/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/game/TestGame.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/*! exports provided: EPSILON, ARRAY_TYPE, RANDOM, setMatrixArrayType, toRadian, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON", function() { return EPSILON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RANDOM", function() { return RANDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setMatrixArrayType", function() { return setMatrixArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRadian", function() { return toRadian; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};

/***/ }),

/***/ "./node_modules/gl-matrix/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/index.js ***!
  \*********************************************/
/*! exports provided: glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "glMatrix", function() { return _common_js__WEBPACK_IMPORTED_MODULE_0__; });
/* harmony import */ var _mat2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat2.js */ "./node_modules/gl-matrix/esm/mat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2", function() { return _mat2_js__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _mat2d_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat2d.js */ "./node_modules/gl-matrix/esm/mat2d.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat2d", function() { return _mat2d_js__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat3", function() { return _mat3_js__WEBPACK_IMPORTED_MODULE_3__; });
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "mat4", function() { return _mat4_js__WEBPACK_IMPORTED_MODULE_4__; });
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat", function() { return _quat_js__WEBPACK_IMPORTED_MODULE_5__; });
/* harmony import */ var _quat2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quat2.js */ "./node_modules/gl-matrix/esm/quat2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "quat2", function() { return _quat2_js__WEBPACK_IMPORTED_MODULE_6__; });
/* harmony import */ var _vec2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vec2.js */ "./node_modules/gl-matrix/esm/vec2.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec2", function() { return _vec2_js__WEBPACK_IMPORTED_MODULE_7__; });
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec3", function() { return _vec3_js__WEBPACK_IMPORTED_MODULE_8__; });
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vec4", function() { return _vec4_js__WEBPACK_IMPORTED_MODULE_9__; });












/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, transpose, invert, adjoint, determinant, multiply, rotate, scale, fromRotation, fromScaling, str, frob, LDU, add, subtract, exactEquals, equals, multiplyScalar, multiplyScalarAndAdd, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LDU", function() { return LDU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {ReadonlyMat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {ReadonlyMat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {ReadonlyMat2} L the lower triangular matrix
 * @param {ReadonlyMat2} D the diagonal matrix
 * @param {ReadonlyMat2} U the upper triangular matrix
 * @param {ReadonlyMat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2} a The first matrix.
 * @param {ReadonlyMat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {ReadonlyMat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {ReadonlyMat2} a the first operand
 * @param {ReadonlyMat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat2d.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat2d.js ***!
  \*********************************************/
/*! exports provided: create, clone, copy, identity, fromValues, set, invert, determinant, multiply, rotate, scale, translate, fromRotation, fromScaling, fromTranslation, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2x3 Matrix
 * @module mat2d
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {ReadonlyMat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function fromValues(a, b, c, d, tx, ty) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {mat2d} out
 */

function invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {ReadonlyMat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to translate
 * @param {ReadonlyVec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat2d} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {ReadonlyMat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @returns {mat2d} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {ReadonlyMat2d} a the first operand
 * @param {ReadonlyMat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat2d} a The first matrix.
 * @param {ReadonlyMat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/*! exports provided: create, fromMat4, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, rotate, scale, fromTranslation, fromRotation, fromScaling, fromMat2d, fromQuat, normalFromMat4, projection, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat2d", function() { return fromMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalFromMat4", function() { return normalFromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "projection", function() { return projection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/*! exports provided: create, clone, copy, fromValues, set, identity, transpose, invert, adjoint, determinant, multiply, translate, scale, rotate, rotateX, rotateY, rotateZ, fromTranslation, fromScaling, fromRotation, fromXRotation, fromYRotation, fromZRotation, fromRotationTranslation, fromQuat2, getTranslation, getScaling, getRotation, fromRotationTranslationScale, fromRotationTranslationScaleOrigin, fromQuat, frustum, perspective, perspectiveFromFieldOfView, ortho, lookAt, targetTo, str, frob, add, subtract, multiplyScalar, multiplyScalarAndAdd, exactEquals, equals, mul, sub */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transpose", function() { return transpose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "adjoint", function() { return adjoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromScaling", function() { return fromScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromXRotation", function() { return fromXRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromYRotation", function() { return fromYRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromZRotation", function() { return fromZRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat2", function() { return fromQuat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getScaling", function() { return getScaling; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRotation", function() { return getRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromQuat", function() { return fromQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frustum", function() { return frustum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return perspective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ortho", function() { return ortho; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookAt", function() { return lookAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "targetTo", function() { return targetTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "frob", function() { return frob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalar", function() { return multiplyScalar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/*! exports provided: create, identity, setAxisAngle, getAxisAngle, getAngle, multiply, rotateX, rotateY, rotateZ, calculateW, exp, ln, pow, slerp, random, invert, conjugate, fromMat3, fromEuler, str, clone, fromValues, copy, set, add, mul, scale, dot, lerp, length, len, squaredLength, sqrLen, normalize, exactEquals, equals, rotationTo, sqlerp, setAxes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxisAngle", function() { return setAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAxisAngle", function() { return getAxisAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAngle", function() { return getAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateW", function() { return calculateW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exp", function() { return exp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ln", function() { return ln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pow", function() { return pow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slerp", function() { return slerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat3", function() { return fromMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEuler", function() { return fromEuler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotationTo", function() { return rotationTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqlerp", function() { return sqlerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAxes", function() { return setAxes; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/gl-matrix/esm/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/gl-matrix/esm/vec4.js");




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var clone = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["clone"];
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["fromValues"];
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var copy = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["copy"];
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var set = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["set"];
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var add = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["add"];
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var scale = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["scale"];
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["dot"];
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["lerp"];
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var length = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["length"];
/**
 * Alias for {@link quat.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["squaredLength"];
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["normalize"];
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["exactEquals"];
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var equals = _vec4_js__WEBPACK_IMPORTED_MODULE_3__["equals"];
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["create"]();
  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](1, 0, 0);
  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["fromValues"](0, 1, 0);
  return function (out, a, b) {
    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__["dot"](a, b);

    if (dot < -0.999999) {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, xUnitVec3, a);
      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__["len"](tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, yUnitVec3, a);
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      _vec3_js__WEBPACK_IMPORTED_MODULE_2__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat2.js":
/*!*********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat2.js ***!
  \*********************************************/
/*! exports provided: create, clone, fromValues, fromRotationTranslationValues, fromRotationTranslation, fromTranslation, fromRotation, fromMat4, copy, identity, set, getReal, getDual, setReal, setDual, getTranslation, translate, rotateX, rotateY, rotateZ, rotateByQuatAppend, rotateByQuatPrepend, rotateAroundAxis, add, multiply, mul, scale, dot, lerp, invert, conjugate, length, len, squaredLength, sqrLen, normalize, str, exactEquals, equals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslationValues", function() { return fromRotationTranslationValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotationTranslation", function() { return fromRotationTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTranslation", function() { return fromTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRotation", function() { return fromRotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromMat4", function() { return fromMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getReal", function() { return getReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDual", function() { return getDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setReal", function() { return setReal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setDual", function() { return setDual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTranslation", function() { return getTranslation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatAppend", function() { return rotateByQuatAppend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateByQuatPrepend", function() { return rotateByQuatPrepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateAroundAxis", function() { return rotateAroundAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "conjugate", function() { return conjugate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");
/* harmony import */ var _quat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./quat.js */ "./node_modules/gl-matrix/esm/quat.js");
/* harmony import */ var _mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mat4.js */ "./node_modules/gl-matrix/esm/mat4.js");



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function create() {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function clone(a) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q a normalized quaternion
 * @param {ReadonlyVec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyVec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {ReadonlyQuat2} dual quaternion receiving operation result
 * @param {ReadonlyQuat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {ReadonlyMat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function fromMat4(out, a) {
  //TODO Optimize this
  var outer = _quat_js__WEBPACK_IMPORTED_MODULE_1__["create"]();
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getRotation"](outer, a);
  var t = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  _mat4_js__WEBPACK_IMPORTED_MODULE_2__["getTranslation"](t, a);
  fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {ReadonlyQuat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = _quat_js__WEBPACK_IMPORTED_MODULE_1__["copy"];
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {quat2} out
 */

function translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateX"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateY"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  _quat_js__WEBPACK_IMPORTED_MODULE_1__["rotateZ"](out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat} q quaternion to rotate by
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the dual quaternion to rotate
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"]) {
    return copy(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {quat2} out
 */

function multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var dot = _quat_js__WEBPACK_IMPORTED_MODULE_1__["dot"];
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {ReadonlyQuat2} a the first operand
 * @param {ReadonlyQuat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function lerp(out, a, b, t) {
  var mt = 1 - t;
  if (dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function invert(out, a) {
  var sqlen = squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {ReadonlyQuat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var length = _quat_js__WEBPACK_IMPORTED_MODULE_1__["length"];
/**
 * Alias for {@link quat2.length}
 * @function
 */

var len = length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {ReadonlyQuat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var squaredLength = _quat_js__WEBPACK_IMPORTED_MODULE_1__["squaredLength"];
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {ReadonlyQuat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function normalize(out, a) {
  var magnitude = squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {ReadonlyQuat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function str(a) {
  return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat2} a the first dual quaternion.
 * @param {ReadonlyQuat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat2} a the first dual quat.
 * @param {ReadonlyQuat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec2.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec2.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat2, transformMat2d, transformMat3, transformMat4, rotate, angle, zero, str, exactEquals, equals, len, sub, mul, div, dist, sqrDist, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2", function() { return transformMat2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat2d", function() { return transformMat2d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function fromValues(x, y) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */

function rotate(out, a, b, rad) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(rad),
      cosC = Math.cos(rad); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1],
      // mag is the product of the magnitudes of a and b
  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),
      // mag &&.. short circuits if mag == 0
  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1

  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/*! exports provided: create, clone, length, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, squaredLength, negate, inverse, normalize, dot, cross, lerp, hermite, bezier, random, transformMat4, transformMat3, transformQuat, rotateX, rotateY, rotateZ, angle, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hermite", function() { return hermite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bezier", function() { return bezier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat3", function() { return transformMat3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angle", function() { return angle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues(x, y, z) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 * Math.PI;
  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/*! exports provided: create, clone, fromValues, copy, set, add, subtract, multiply, divide, ceil, floor, min, max, round, scale, scaleAndAdd, distance, squaredDistance, length, squaredLength, negate, inverse, normalize, dot, cross, lerp, random, transformMat4, transformQuat, zero, str, exactEquals, equals, sub, mul, div, dist, sqrDist, len, sqrLen, forEach */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromValues", function() { return fromValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function() { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subtract", function() { return subtract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multiply", function() { return multiply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divide", function() { return divide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ceil", function() { return ceil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floor", function() { return floor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleAndAdd", function() { return scaleAndAdd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredDistance", function() { return squaredDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "squaredLength", function() { return squaredLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "negate", function() { return negate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inverse", function() { return inverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return lerp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformMat4", function() { return transformMat4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformQuat", function() { return transformQuat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "str", function() { return str; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exactEquals", function() { return exactEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function() { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "div", function() { return div; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dist", function() { return dist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrDist", function() { return sqrDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "len", function() { return len; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sqrLen", function() { return sqrLen; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/gl-matrix/esm/common.js");

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"] != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues(x, y, z, w) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__["ARRAY_TYPE"](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */

function cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__["RANDOM"]() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */

function transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__["EPSILON"] * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();

/***/ }),

/***/ "./src/engine/camera/Camera.ts":
/*!*************************************!*\
  !*** ./src/engine/camera/Camera.ts ***!
  \*************************************/
/*! exports provided: Camera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Camera", function() { return Camera; });
/* harmony import */ var _core_GameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/GameObject */ "./src/engine/core/GameObject.ts");
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");


class Camera extends _core_GameObject__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super();
        /**
         * 是否需要更新投影矩阵
         * @private
         * @default true
         * @type {Boolean}
         */
        this._needUpdateProjectionMatrix = true;
        this._isGeometryDirty = false;
        this.viewMatrix = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
        this.projectionMatrix = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
        this.viewProjectionMatrix = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
    }
    /**
     * 更新viewMatrix
     * @return {Camera} this
     */
    updateViewMatrix() {
        this.updateMatrixWorld(true);
        this.viewMatrix.invert(this.worldMatrix);
        return this;
    }
    /**
     * 更新投影矩阵，子类必须重载这个方法
     */
    updateProjectionMatrix() {
    }
    /**
     * 更新viewProjectionMatrix
     * @return {Camera} this
     */
    updateViewProjectionMatrix() {
        if (this._needUpdateProjectionMatrix) {
            this.updateProjectionMatrix();
            this._needUpdateProjectionMatrix = false;
        }
        this.updateViewMatrix();
        this.viewProjectionMatrix.multiply(this.projectionMatrix, this.viewMatrix);
        return this;
    }
    /**
    * 获取元素相对于当前Camera的矩阵
    * @param {Node} node 目标元素
    * @param {Matrix4} [out] 传递将在这个矩阵上做计算，不传将创建一个新的 Matrix4
    * @return {Matrix4} 返回获取的矩阵
    */
    getModelViewMatrix(node, out) {
        out = out || new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
        out.multiply(this.viewMatrix, node.worldMatrix);
        return out;
    }
    /**
     * 获取元素的投影矩阵
     * @param {Node} node 目标元素
     * @param {Matrix4} [out] 传递将在这个矩阵上做计算，不传将创建一个新的 Matrix4
     * @return {Matrix4} 返回获取的矩阵
     */
    getModelProjectionMatrix(node, out) {
        out = out || new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
        out.multiply(this.viewProjectionMatrix, node.worldMatrix);
        return out;
    }
}


/***/ }),

/***/ "./src/engine/camera/PerspectiveCamera.ts":
/*!************************************************!*\
  !*** ./src/engine/camera/PerspectiveCamera.ts ***!
  \************************************************/
/*! exports provided: PerspectiveCamera */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCamera", function() { return PerspectiveCamera; });
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Camera */ "./src/engine/camera/Camera.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");


class PerspectiveCamera extends _Camera__WEBPACK_IMPORTED_MODULE_0__["Camera"] {
    constructor() {
        super();
        this._near = 0.1;
        this._far = 1000.0;
        this._fov = 50;
        this._aspect = 1;
        this.updateProjectionMatrix();
    }
    get near() {
        return this._near;
    }
    set near(value) {
        this._needUpdateProjectionMatrix = true;
        this._isGeometryDirty = true;
        this._near = value;
    }
    get far() {
        return this._far;
    }
    set far(value) {
        this._needUpdateProjectionMatrix = true;
        this._isGeometryDirty = true;
        this._far = value;
    }
    get fov() {
        return this._fov;
    }
    set fov(value) {
        this._needUpdateProjectionMatrix = true;
        this._isGeometryDirty = true;
        this._fov = value;
    }
    get aspect() {
        return this._aspect;
    }
    set aspect(value) {
        this._aspect = value;
        this._needUpdateProjectionMatrix = true;
        this._isGeometryDirty = true;
        this._aspect = value;
    }
    /**
     * 更新投影矩阵
     */
    updateProjectionMatrix() {
        const elements = this.projectionMatrix.elements;
        const { near, far, aspect, fov } = this;
        const f = 1 / Math.tan(0.5 * _math_math__WEBPACK_IMPORTED_MODULE_1__["default"].degToRad(fov));
        elements[0] = f / aspect;
        elements[5] = f;
        elements[11] = -1;
        elements[15] = 0;
        if (far) {
            const nf = 1 / (near - far);
            elements[10] = (near + far) * nf;
            elements[14] = 2 * far * near * nf;
        }
        else {
            elements[10] = -1;
            elements[14] = -2 * near;
        }
    }
    radians(degrees) {
        return degrees * (Math.PI / 180.0);
    }
}


/***/ }),

/***/ "./src/engine/constants/glConstants.ts":
/*!*********************************************!*\
  !*** ./src/engine/constants/glConstants.ts ***!
  \*********************************************/
/*! exports provided: glConstants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "glConstants", function() { return glConstants; });
let glConstants = {
    ACTIVE_ATTRIBUTES: 35721,
    ACTIVE_ATTRIBUTE_MAX_LENGTH: 35722,
    ACTIVE_TEXTURE: 34016,
    ACTIVE_UNIFORMS: 35718,
    ACTIVE_UNIFORM_MAX_LENGTH: 35719,
    ALIASED_LINE_WIDTH_RANGE: 33902,
    ALIASED_POINT_SIZE_RANGE: 33901,
    ALPHA: 6406,
    ALPHA_BITS: 3413,
    ALWAYS: 519,
    ARRAY_BUFFER: 34962,
    ARRAY_BUFFER_BINDING: 34964,
    ATTACHED_SHADERS: 35717,
    BACK: 1029,
    BLEND: 3042,
    BLEND_COLOR: 32773,
    BLEND_DST_ALPHA: 32970,
    BLEND_DST_RGB: 32968,
    BLEND_EQUATION: 32777,
    BLEND_EQUATION_ALPHA: 34877,
    BLEND_EQUATION_RGB: 32777,
    BLEND_SRC_ALPHA: 32971,
    BLEND_SRC_RGB: 32969,
    BLUE_BITS: 3412,
    BOOL: 35670,
    BOOL_VEC2: 35671,
    BOOL_VEC3: 35672,
    BOOL_VEC4: 35673,
    BROWSER_DEFAULT_WEBGL: 37444,
    BUFFER_SIZE: 34660,
    BUFFER_USAGE: 34661,
    BYTE: 5120,
    CCW: 2305,
    CLAMP_TO_EDGE: 33071,
    COLOR_ATTACHMENT0: 36064,
    COLOR_BUFFER_BIT: 16384,
    COLOR_CLEAR_VALUE: 3106,
    COLOR_WRITEMASK: 3107,
    COMPILE_STATUS: 35713,
    COMPRESSED_TEXTURE_FORMATS: 34467,
    CONSTANT_ALPHA: 32771,
    CONSTANT_COLOR: 32769,
    CONTEXT_LOST_WEBGL: 37442,
    CULL_FACE: 2884,
    CULL_FACE_MODE: 2885,
    CURRENT_PROGRAM: 35725,
    CURRENT_VERTEX_ATTRIB: 34342,
    CW: 2304,
    DECR: 7683,
    DECR_WRAP: 34056,
    DELETE_STATUS: 35712,
    DEPTH_ATTACHMENT: 36096,
    DEPTH_BITS: 3414,
    DEPTH_BUFFER_BIT: 256,
    DEPTH_CLEAR_VALUE: 2931,
    DEPTH_COMPONENT: 6402,
    DEPTH_COMPONENT16: 33189,
    DEPTH_FUNC: 2932,
    DEPTH_RANGE: 2928,
    DEPTH_STENCIL: 34041,
    DEPTH_STENCIL_ATTACHMENT: 33306,
    DEPTH_TEST: 2929,
    DEPTH_WRITEMASK: 2930,
    DITHER: 3024,
    DONT_CARE: 4352,
    DST_ALPHA: 772,
    DST_COLOR: 774,
    DYNAMIC_DRAW: 35048,
    ELEMENT_ARRAY_BUFFER: 34963,
    ELEMENT_ARRAY_BUFFER_BINDING: 34965,
    EQUAL: 514,
    FASTEST: 4353,
    FLOAT: 5126,
    FLOAT_MAT2: 35674,
    FLOAT_MAT3: 35675,
    FLOAT_MAT4: 35676,
    FLOAT_VEC2: 35664,
    FLOAT_VEC3: 35665,
    FLOAT_VEC4: 35666,
    FRAGMENT_SHADER: 35632,
    FRAMEBUFFER: 36160,
    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
    FRAMEBUFFER_BINDING: 36006,
    FRAMEBUFFER_COMPLETE: 36053,
    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
    FRAMEBUFFER_UNSUPPORTED: 36061,
    FRONT: 1028,
    FRONT_AND_BACK: 1032,
    FRONT_FACE: 2886,
    FUNC_ADD: 32774,
    FUNC_REVERSE_SUBTRACT: 32779,
    FUNC_SUBTRACT: 32778,
    GENERATE_MIPMAP_HINT: 33170,
    GEQUAL: 518,
    GREATER: 516,
    GREEN_BITS: 3411,
    HIGH_FLOAT: 36338,
    HIGH_INT: 36341,
    INCR: 7682,
    INCR_WRAP: 34055,
    INFO_LOG_LENGTH: 35716,
    INT: 5124,
    INT_VEC2: 35667,
    INT_VEC3: 35668,
    INT_VEC4: 35669,
    INVALID_ENUM: 1280,
    INVALID_FRAMEBUFFER_OPERATION: 1286,
    INVALID_OPERATION: 1282,
    INVALID_VALUE: 1281,
    INVERT: 5386,
    KEEP: 7680,
    LEQUAL: 515,
    LESS: 513,
    LINEAR: 9729,
    LINEAR_MIPMAP_LINEAR: 9987,
    LINEAR_MIPMAP_NEAREST: 9985,
    LINES: 1,
    LINE_LOOP: 2,
    LINE_STRIP: 3,
    LINE_WIDTH: 2849,
    LINK_STATUS: 35714,
    LOW_FLOAT: 36336,
    LOW_INT: 36339,
    LUMINANCE: 6409,
    LUMINANCE_ALPHA: 6410,
    MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
    MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
    MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
    MAX_RENDERBUFFER_SIZE: 34024,
    MAX_TEXTURE_IMAGE_UNITS: 34930,
    MAX_TEXTURE_SIZE: 3379,
    MAX_VARYING_VECTORS: 36348,
    MAX_VERTEX_ATTRIBS: 34921,
    MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
    MAX_VERTEX_UNIFORM_VECTORS: 36347,
    MAX_VIEWPORT_DIMS: 3386,
    MEDIUM_FLOAT: 36337,
    MEDIUM_INT: 36340,
    MIRRORED_REPEAT: 33648,
    NEAREST: 9728,
    NEAREST_MIPMAP_LINEAR: 9986,
    NEAREST_MIPMAP_NEAREST: 9984,
    NEVER: 512,
    NICEST: 4354,
    NONE: 0,
    NOTEQUAL: 517,
    NO_ERROR: 0,
    NUM_COMPRESSED_TEXTURE_FORMATS: 34466,
    ONE: 1,
    ONE_MINUS_CONSTANT_ALPHA: 32772,
    ONE_MINUS_CONSTANT_COLOR: 32770,
    ONE_MINUS_DST_ALPHA: 773,
    ONE_MINUS_DST_COLOR: 775,
    ONE_MINUS_SRC_ALPHA: 771,
    ONE_MINUS_SRC_COLOR: 769,
    OUT_OF_MEMORY: 1285,
    PACK_ALIGNMENT: 3333,
    POINTS: 0,
    POLYGON_OFFSET_FACTOR: 32824,
    POLYGON_OFFSET_FILL: 32823,
    POLYGON_OFFSET_UNITS: 10752,
    RED_BITS: 3410,
    RENDERBUFFER: 36161,
    RENDERBUFFER_ALPHA_SIZE: 36179,
    RENDERBUFFER_BINDING: 36007,
    RENDERBUFFER_BLUE_SIZE: 36178,
    RENDERBUFFER_DEPTH_SIZE: 36180,
    RENDERBUFFER_GREEN_SIZE: 36177,
    RENDERBUFFER_HEIGHT: 36163,
    RENDERBUFFER_INTERNAL_FORMAT: 36164,
    RENDERBUFFER_RED_SIZE: 36176,
    RENDERBUFFER_STENCIL_SIZE: 36181,
    RENDERBUFFER_WIDTH: 36162,
    RENDERER: 7937,
    REPEAT: 10497,
    REPLACE: 7681,
    RGB: 6407,
    RGB5_A1: 32855,
    RGB565: 36194,
    RGBA: 6408,
    RGBA4: 32854,
    SAMPLER_2D: 35678,
    SAMPLER_CUBE: 35680,
    SAMPLES: 32937,
    SAMPLE_ALPHA_TO_COVERAGE: 32926,
    SAMPLE_BUFFERS: 32936,
    SAMPLE_COVERAGE: 32928,
    SAMPLE_COVERAGE_INVERT: 32939,
    SAMPLE_COVERAGE_VALUE: 32938,
    SCISSOR_BOX: 3088,
    SCISSOR_TEST: 3089,
    SHADER_COMPILER: 36346,
    SHADER_SOURCE_LENGTH: 35720,
    SHADER_TYPE: 35663,
    SHADING_LANGUAGE_VERSION: 35724,
    SHORT: 5122,
    SRC_ALPHA: 770,
    SRC_ALPHA_SATURATE: 776,
    SRC_COLOR: 768,
    STATIC_DRAW: 35044,
    STENCIL_ATTACHMENT: 36128,
    STENCIL_BACK_FAIL: 34817,
    STENCIL_BACK_FUNC: 34816,
    STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
    STENCIL_BACK_PASS_DEPTH_PASS: 34819,
    STENCIL_BACK_REF: 36003,
    STENCIL_BACK_VALUE_MASK: 36004,
    STENCIL_BACK_WRITEMASK: 36005,
    STENCIL_BITS: 3415,
    STENCIL_BUFFER_BIT: 1024,
    STENCIL_CLEAR_VALUE: 2961,
    STENCIL_FAIL: 2964,
    STENCIL_FUNC: 2962,
    STENCIL_INDEX: 6401,
    STENCIL_INDEX8: 36168,
    STENCIL_PASS_DEPTH_FAIL: 2965,
    STENCIL_PASS_DEPTH_PASS: 2966,
    STENCIL_REF: 2967,
    STENCIL_TEST: 2960,
    STENCIL_VALUE_MASK: 2963,
    STENCIL_WRITEMASK: 2968,
    STREAM_DRAW: 35040,
    SUBPIXEL_BITS: 3408,
    TEXTURE: 5890,
    TEXTURE0: 33984,
    TEXTURE1: 33985,
    TEXTURE2: 33986,
    TEXTURE3: 33987,
    TEXTURE4: 33988,
    TEXTURE5: 33989,
    TEXTURE6: 33990,
    TEXTURE7: 33991,
    TEXTURE8: 33992,
    TEXTURE9: 33993,
    TEXTURE10: 33994,
    TEXTURE11: 33995,
    TEXTURE12: 33996,
    TEXTURE13: 33997,
    TEXTURE14: 33998,
    TEXTURE15: 33999,
    TEXTURE16: 34000,
    TEXTURE17: 34001,
    TEXTURE18: 34002,
    TEXTURE19: 34003,
    TEXTURE20: 34004,
    TEXTURE21: 34005,
    TEXTURE22: 34006,
    TEXTURE23: 34007,
    TEXTURE24: 34008,
    TEXTURE25: 34009,
    TEXTURE26: 34010,
    TEXTURE27: 34011,
    TEXTURE28: 34012,
    TEXTURE29: 34013,
    TEXTURE30: 34014,
    TEXTURE31: 34015,
    TEXTURE_2D: 3553,
    TEXTURE_BINDING_2D: 32873,
    TEXTURE_BINDING_CUBE_MAP: 34068,
    TEXTURE_CUBE_MAP: 34067,
    TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
    TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
    TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
    TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
    TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
    TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
    TEXTURE_MAG_FILTER: 10240,
    TEXTURE_MIN_FILTER: 10241,
    TEXTURE_WRAP_S: 10242,
    TEXTURE_WRAP_T: 10243,
    TRIANGLES: 4,
    TRIANGLE_FAN: 6,
    TRIANGLE_STRIP: 5,
    UNPACK_ALIGNMENT: 3317,
    UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443,
    UNPACK_FLIP_Y_WEBGL: 37440,
    UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441,
    UNSIGNED_BYTE: 5121,
    UNSIGNED_INT: 5125,
    UNSIGNED_SHORT: 5123,
    UNSIGNED_SHORT_4_4_4_4: 32819,
    UNSIGNED_SHORT_5_5_5_1: 32820,
    UNSIGNED_SHORT_5_6_5: 33635,
    VALIDATE_STATUS: 35715,
    VENDOR: 7936,
    VERSION: 7938,
    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
    VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
    VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
    VERTEX_ATTRIB_ARRAY_POINTER: 34373,
    VERTEX_ATTRIB_ARRAY_SIZE: 34339,
    VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
    VERTEX_ATTRIB_ARRAY_TYPE: 34341,
    VERTEX_SHADER: 35633,
    VIEWPORT: 2978,
    ZERO: 0
};


/***/ }),

/***/ "./src/engine/core/GameObject.ts":
/*!***************************************!*\
  !*** ./src/engine/core/GameObject.ts ***!
  \***************************************/
/*! exports provided: GameObject, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GameObject", function() { return GameObject; });
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _math_Matrix4Notifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/Matrix4Notifier */ "./src/engine/math/Matrix4Notifier.ts");
/* harmony import */ var _math_Vector3Notifier__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/Vector3Notifier */ "./src/engine/math/Vector3Notifier.ts");
/* harmony import */ var _math_EulerNotifier__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/EulerNotifier */ "./src/engine/math/EulerNotifier.ts");
/* harmony import */ var _math_Quaternion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math/Quaternion */ "./src/engine/math/Quaternion.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");









const defaultUp = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"](0, 1, 0);
const tempMatrix4 = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
const TRAVERSE_STOP_NONE = false;
const TRAVERSE_STOP_CHILDREN = 1;
const TRAVERSE_STOP_ALL = true;
class GameObject extends _event_EventObject__WEBPACK_IMPORTED_MODULE_2__["EventObject"] {
    constructor() {
        super();
        /**
         * Node 的名字，可以通过 getChildByName 查找
         * @type {string}
         */
        this.name = '';
        /**
         * 是否自动更新世界矩阵
         * @default true
         * @type {boolean}
         */
        this.autoUpdateWorldMatrix = true;
        /**
         * 是否自动更新子元素世界矩阵
         * @default true
         * @type {boolean}
         */
        this.autoUpdateChildWorldMatrix = true;
        /**
         * 父节点
         * @default null
         * @type {GameObject}
         */
        this.parent = null;
        this._quatDirty = false;
        this._matrixDirty = false;
        /**
         * 每次更新的时候是否调用子节点的 onUpdate 方法
         * @default true
         * @type {boolean}
         */
        this.needCallChildUpdate = true;
        /**
         * 节点是否显示
         * @default true
         * @type {boolean}
         */
        this.visible = true;
        /**
         * 可视对象是否接受交互事件。默认为接受交互事件，即true。
         * @default true
         * @type {Boolean}
         */
        this.pointerEnabled = true;
        /**
         * 子元素是否接受交互事件。
         * @default true
         * @type {Boolean}
         */
        this.pointerChildren = true;
        /**
         * 是否强制使用父元素 worldMatrix，供高级开发者使用
         * @private
         * @type {Boolean}
         */
        this.__forceUseParentWorldMatrix = false;
        this.matrixVersion = 0;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].generateUUID(this.constructor.name);
        this.up = defaultUp.clone();
        this.children = [];
        this.worldMatrix = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
        this._matrix = new _math_Matrix4Notifier__WEBPACK_IMPORTED_MODULE_4__["Matrix4Notifier"]();
        this._position = new _math_Vector3Notifier__WEBPACK_IMPORTED_MODULE_5__["Vector3Notifier"](0, 0, 0);
        this._scale = new _math_Vector3Notifier__WEBPACK_IMPORTED_MODULE_5__["Vector3Notifier"](1, 1, 1);
        this._pivot = new _math_Vector3Notifier__WEBPACK_IMPORTED_MODULE_5__["Vector3Notifier"](0, 0, 0);
        this._rotation = new _math_EulerNotifier__WEBPACK_IMPORTED_MODULE_6__["EulerNotifier"]();
        this._quaternion = new _math_Quaternion__WEBPACK_IMPORTED_MODULE_7__["Quaternion"]();
        this._matrix.on('update', () => {
            this._onMatrixUpdate();
        });
        this._position.on('update', () => {
            this._onPositionUpdate();
        });
        this._scale.on('update', () => {
            this._onScaleUpdate();
        });
        this._pivot.on('update', () => {
            this._onPivotUpdate();
        });
        this._rotation.on('update', () => {
            this._onRotationUpdate();
        });
        this._quaternion.on('update', () => {
            this._onQuaternionUpdate();
        });
    }
    /**
     * @return {GameObject} 返回clone的Node
     */
    clone() {
        const node = new GameObject();
        node.name = this.name;
        node.setPosition(this.x, this.y, this.z);
        node.setScale(this.scaleX, this.scaleY, this.scaleZ);
        node.setRotation(this.rotationX, this.rotationY, this.rotationZ);
        this.children.forEach((child) => {
            node.addChild(child.clone());
        });
        return node;
    }
    /**
     * 将所以子孙元素放到一个对象中，对象key为元素的name，value为该元素
     * @return {Object} 返回获取的对象
     */
    getChildrenNameMap() {
        const map = {};
        this.traverse((child) => {
            map[child.name] = child;
        }, true);
        return map;
    }
    /**
     * 添加一个子元素
     * @param {GameObject} child 需要添加的子元素
     * @return {GameObject} this
     */
    addChild(child) {
        if (child.parent) {
            child.removeFromParent();
        }
        child.parent = this;
        this.children.push(child);
        return this;
    }
    /**
     * 移除指定的子元素
     * @param {GameObject} child 需要移除的元素
     * @return {GameObject} this
     */
    removeChild(child) {
        const index = this.children.indexOf(child);
        if (index > -1) {
            this.children.splice(index, 1);
            child.parent = null;
        }
        return this;
    }
    /**
     * 将当前元素添加到某个父元素的子元素中
     * @param {GameObject} parent 需要添加到的父元素
     * @return {GameObject} this
     */
    addTo(parent) {
        parent.addChild(this);
        return this;
    }
    /**
     * 将当前元素从其父元素中移除
     * @return {GameObject} this
     */
    removeFromParent() {
        if (this.parent) {
            this.parent.removeChild(this);
        }
        return this;
    }
    /**
     * 更新本地矩阵
     * @return {GameObject} this
     */
    updateMatrix() {
        if (this._matrixDirty) {
            this._matrixDirty = false;
            this.matrixVersion++;
            this._matrix.fromRotationTranslationScaleOrigin(this.quaternion, this._position, this._scale, this._pivot, true);
        }
        return this;
    }
    /**
     * 更新四元数
     * @return {GameObject} this
     */
    updateQuaternion() {
        if (this._quatDirty) {
            this._quatDirty = false;
            this._quaternion.fromEuler(this._rotation, true);
        }
        return this;
    }
    /**
     * 更新transform属性
     * @return {GameObject} this
     */
    updateTransform() {
        this._matrix.decompose(this._quaternion, this._position, this._scale, this._pivot);
        this._onQuaternionUpdate();
        this._matrixDirty = false;
        return this;
    }
    /**
     * 更新世界矩阵
     * @param  {Boolean} [force=true] 是否强制更新
     * @return {GameObject} this
     */
    updateMatrixWorld(force) {
        this.traverse((node) => {
            if (node.autoUpdateWorldMatrix || force) {
                if (node.parent) {
                    if (!node.__forceUseParentWorldMatrix) {
                        node.worldMatrix.multiply(node.parent.worldMatrix, node.matrix);
                    }
                    else {
                        node.worldMatrix.copy(node.parent.worldMatrix);
                    }
                }
                else {
                    node.worldMatrix.copy(node.matrix);
                }
            }
            if (!node.autoUpdateChildWorldMatrix && !force) {
                return TRAVERSE_STOP_CHILDREN;
            }
            return TRAVERSE_STOP_NONE;
        });
        return this;
    }
    /**
     * _traverse
     * @private
     * @param  {Function(Node)} callback
     * @param  {Boolean}  onlyChild
     * @return {Enum}  TRAVERSE_STOP_ALL, TRAVERSE_STOP_CHILDREN, TRAVERSE_STOP_NONE
     */
    _traverse(callback, onlyChild) {
        if (!onlyChild) {
            const res = callback(this);
            if (res) {
                return res;
            }
        }
        const children = this.children;
        for (let i = 0, l = children.length; i < l; i++) {
            const res = children[i]._traverse(callback, false);
            if (res === TRAVERSE_STOP_ALL) {
                return res;
            }
        }
        return TRAVERSE_STOP_NONE;
    }
    /**
     * 遍历当前元素的子孙元素
     * @param {Function(Node)} callback 每个元素都会调用这个函数处理
     * @param {Boolean} [onlyChild=false] 是否只遍历子元素
     * @return {GameObject} this
     */
    traverse(callback, onlyChild = false) {
        this._traverse(callback, onlyChild);
        return this;
    }
    /**
     * 遍历当前元素的子孙元素(广度优先)
     * @param {Function(Node)} callback 每个元素都会调用这个函数处理
     * @param {Boolean} [onlyChild=false] 是否只遍历子元素
     * @return {GameObject} this
     */
    traverseBFS(callback, onlyChild = false) {
        let currentQueue;
        let nextQueue;
        if (!onlyChild) {
            nextQueue = [this];
        }
        else {
            nextQueue = this.children;
        }
        while (nextQueue.length) {
            currentQueue = nextQueue;
            nextQueue = [];
            for (let i = 0, l = currentQueue.length; i < l; i++) {
                const child = currentQueue[i];
                const res = callback(child);
                if (!res) {
                    nextQueue = nextQueue.concat(child.children);
                }
                else if (res === TRAVERSE_STOP_ALL) {
                    return this;
                }
            }
        }
        return this;
    }
    /**
     * 根据函数来获取一个子孙元素(广度优先)
     * @param {Function} fn 判读函数
     * @return {GameObject|null} 返回获取到的子孙元素
     */
    getChildByFnBFS(fn) {
        let result = null;
        this.traverseBFS((child) => {
            if (fn(child)) {
                result = child;
                return TRAVERSE_STOP_ALL;
            }
            return TRAVERSE_STOP_NONE;
        }, true);
        return result;
    }
    /**
     * 根据 name path 来获取子孙元素
     * @param  {String[]} path 名字数组, e.g., getChildByNamePath(['a', 'b', 'c'])
     * @return {GameObject|null} 返回获取到的子孙元素
     */
    getChildByNamePath(path) {
        let currentNode = this;
        for (let i = 0, l = path.length; i < l; i++) {
            const name = path[i];
            const node = currentNode.getChildByFnBFS(child => child.name === name);
            if (node) {
                currentNode = node;
            }
            else {
                return null;
            }
        }
        return currentNode;
    }
    /**
     * 遍历调用子孙元素onUpdate方法
     * @param  {Number} dt
     * @return {GameObject} this
     */
    traverseUpdate(dt) {
        this.traverse((node) => {
            if (node.onUpdate) {
                node.onUpdate(dt);
            }
            if (!node.needCallChildUpdate) {
                return TRAVERSE_STOP_CHILDREN;
            }
            return TRAVERSE_STOP_NONE;
        });
        return this;
    }
    onUpdate() {
    }
    /**
     * 根据函数来获取一个子孙元素
     * @param {Function} fn 判读函数
     * @return {GameObject|null} 返回获取到的子孙元素
     */
    getChildByFn(fn) {
        let result = null;
        this.traverse((child) => {
            if (fn(child)) {
                result = child;
                return TRAVERSE_STOP_ALL;
            }
            return TRAVERSE_STOP_NONE;
        }, true);
        return result;
    }
    /**
     * 根据函数来获取匹配的所有子孙元素
     * @param {Function} fn 判读函数
     * @return {GameObject[]} 返回获取到的子孙元素
     */
    getChildrenByFn(fn) {
        let result = [];
        this.traverse((child) => {
            if (fn(child)) {
                result.push(child);
            }
        }, true);
        return result;
    }
    /**
     * 获取指定name的首个子孙元素
     * @param {string} name 元素name
     * @return {GameObject|null} 获取的元素
     */
    getChildByName(name) {
        return this.getChildByFn(child => child.name === name);
    }
    /**
     * 获取指定name的所有子孙元素
     * @param {string} name 元素name
     * @return {GameObject[]} 获取的元素数组
     */
    getChildrenByName(name) {
        return this.getChildrenByFn(child => child.name === name);
    }
    /**
     * 获取指定id的子孙元素
     * @param {string} id 元素id
     * @return {GameObject|null} 获取的元素
     */
    getChildById(id) {
        return this.getChildByFn(child => child.id === id);
    }
    /**
     * 获取指定类名的所有子孙元素
     * @param {string} className 类名
     * @return {GameObject[]} 获取的元素数组
     */
    getChildrenByClassName(className) {
        return this.getChildrenByFn(child => child.className === className);
    }
    /**
     * 设置元素的缩放比例
     * @param {number} x X缩放比例
     * @param {number} y Y缩放比例
     * @param {number} z Z缩放比例
     * @return {GameObject} this
     */
    setScale(x, y = x, z = y) {
        this._scale.set(x, y, z);
        return this;
    }
    /**
     * 设置元素的位置
     * @param {number} x X方向位置
     * @param {number} y Y方向位置
     * @param {number} z Z方向位置
     * @return {GameObject} this
     */
    setPosition(x, y, z) {
        this._position.set(x, y, z);
        return this;
    }
    /**
     * 设置元素的旋转
     * @param {number} x X轴旋转角度, 角度制
     * @param {number} y Y轴旋转角度, 角度制
     * @param {number} z Z轴旋转角度, 角度制
     * @return {GameObject} this
     */
    setRotation(x, y, z) {
        this._rotation.setDegree(x, y, z);
        return this;
    }
    /**
     * 设置中心点
     * @param {Number} x 中心点x
     * @param {Number} y 中心点y
     * @param {Number} z 中心点z
     * @return {GameObject} this
     */
    setPivot(x, y, z) {
        this._pivot.set(x, y, z);
        return this;
    }
    /**
     * 改变元素的朝向
     * @param {GameObject|Object|Vector3} node 需要朝向的元素，或者坐标
     * @return {GameObject} this
     */
    lookAt(node) {
        tempMatrix4.targetTo(node.position, this.position, this.up);
        this._quaternion.fromMat4(tempMatrix4);
        return this;
    }
    get matrix() {
        this.updateMatrix();
        return this._matrix;
    }
    set matrix(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.matrix.set', 'node.matrix is readOnly.Use node.matrix.copy instead.');
        this._matrix.copy(value);
    }
    get position() {
        return this._position;
    }
    set position(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.position.set', 'node.position is readOnly.Use node.position.copy instead.');
        this._position.copy(value);
    }
    /**
     * x轴坐标
     * @type {number}
     */
    get x() {
        return this._position.elements[0];
    }
    set x(value) {
        this._position.elements[0] = value;
        this._matrixDirty = true;
    }
    /**
     * y轴坐标
     * @type {number}
     */
    get y() {
        return this._position.elements[1];
    }
    set y(value) {
        this._position.elements[1] = value;
        this._matrixDirty = true;
    }
    /**
     * z轴坐标
     * @type {number}
     */
    get z() {
        return this._position.elements[2];
    }
    set z(value) {
        this._position.elements[2] = value;
        this._matrixDirty = true;
    }
    get scale() {
        return this._scale;
    }
    set scale(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.scale.set', 'node.scale is readOnly.Use node.scale.copy instead.');
        this._scale.copy(value);
    }
    /**
     * 缩放比例x
     * @type {number}
     */
    get scaleX() {
        return this._scale.elements[0];
    }
    set scaleX(value) {
        this._scale.elements[0] = value;
        this._matrixDirty = true;
    }
    /**
     * 缩放比例y
     * @type {number}
     */
    get scaleY() {
        return this._scale.elements[1];
    }
    set scaleY(value) {
        this._scale.elements[1] = value;
        this._matrixDirty = true;
    }
    /**
     * 缩放比例z
     * @type {number}
     */
    get scaleZ() {
        return this._scale.elements[2];
    }
    set scaleZ(value) {
        this._scale.elements[2] = value;
        this._matrixDirty = true;
    }
    get pivot() {
        return this._pivot;
    }
    set pivot(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.pivot.set', 'node.pivot is readOnly.Use node.pivot.copy instead.');
        this._pivot.copy(value);
    }
    /**
     * 中心点x
     * @type {Number}
     */
    get pivotX() {
        return this._pivot.elements[0];
    }
    set pivotX(value) {
        this._pivot.elements[0] = value;
        this._matrixDirty = true;
    }
    /**
     * 中心点y
     * @type {Number}
     */
    get pivotY() {
        return this._pivot.elements[1];
    }
    set pivotY(value) {
        this._pivot.elements[1] = value;
        this._matrixDirty = true;
    }
    /**
     * 中心点z
     * @type {Number}
     */
    get pivotZ() {
        return this._pivot.elements[2];
    }
    set pivotZ(value) {
        this._pivot.elements[2] = value;
        this._matrixDirty = true;
    }
    get rotation() {
        return this._rotation;
    }
    set rotation(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.rotation.set', 'node.rotation is readOnly.Use node.rotation.copy instead.');
        this._rotation.copy(value);
    }
    /**
     * 旋转角度 x, 角度制
     * @type {number}
     */
    get rotationX() {
        return this._rotation.degX;
    }
    set rotationX(value) {
        this._rotation.degX = value;
    }
    /**
     * 旋转角度 y, 角度制
     * @type {number}
     */
    get rotationY() {
        return this._rotation.degY;
    }
    set rotationY(value) {
        this._rotation.degY = value;
    }
    /**
     * 旋转角度 z, 角度制
     * @type {number}
     */
    get rotationZ() {
        return this._rotation.degZ;
    }
    set rotationZ(value) {
        this._rotation.degZ = value;
    }
    get quaternion() {
        this.updateQuaternion();
        return this._quaternion;
    }
    set quaternion(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_8__["log"].warnOnce('Node.quaternion.set', 'node.quaternion is readOnly.Use node.quaternion.copy instead.');
        this._quaternion.copy(value);
    }
    destroy(renderer, needDestroyTextures = false) {
        const nodes = this.children;
        this.off();
        nodes.forEach((node) => {
            node.off();
            node.removeFromParent();
        });
        this.removeFromParent();
        return this;
    }
    _onMatrixUpdate() {
        this.matrixVersion++;
        this.updateTransform();
    }
    _onPositionUpdate() {
        this._matrixDirty = true;
    }
    _onScaleUpdate() {
        this._matrixDirty = true;
    }
    _onPivotUpdate() {
        this._matrixDirty = true;
    }
    _onRotationUpdate() {
        this._quatDirty = true;
        this._matrixDirty = true;
    }
    _onQuaternionUpdate() {
        this._rotation.fromQuat(this._quaternion);
        this._quatDirty = false;
    }
}
GameObject.TRAVERSE_STOP_NONE = TRAVERSE_STOP_NONE;
GameObject.TRAVERSE_STOP_CHILDREN = TRAVERSE_STOP_CHILDREN;
GameObject.TRAVERSE_STOP_ALL = TRAVERSE_STOP_ALL;
/* harmony default export */ __webpack_exports__["default"] = (GameObject);
/**
 * 包围盒信息
 * @typedef {object} Bounds
 * @property {number} x 包围盒中心的X坐标
 * @property {number} y 包围盒中心的Y坐标
 * @property {number} z 包围盒中心的Z坐标
 * @property {number} width 包围盒的宽度
 * @property {number} height 包围盒的高度
 * @property {number} depth 包围盒的深度
 * @property {number} xMin X轴的最小值
 * @property {number} xMax X轴的最大值
 * @property {number} yMin Y轴的最小值
 * @property {number} yMax Y轴的最大值
 * @property {number} zMin Z轴的最小值
 * @property {number} zMax Z轴的最大值
 */
/**
 * 碰撞信息
 * @typedef {object} raycastInfo
 * @property {Mesh} mesh 碰撞的 mesh
 * @property {Vector3} point 碰撞得点
 */


/***/ }),

/***/ "./src/engine/core/Mesh.ts":
/*!*********************************!*\
  !*** ./src/engine/core/Mesh.ts ***!
  \*********************************/
/*! exports provided: Mesh */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mesh", function() { return Mesh; });
/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameObject */ "./src/engine/core/GameObject.ts");

class Mesh extends _GameObject__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super();
        this._usedResourceDict = {};
    }
    getRenderOption(opt = {}) {
        this.geometry.getRenderOption(opt);
        return opt;
    }
    useResource(res) {
        if (res) {
            this._usedResourceDict[res.constructor + ':' + res.id] = res;
        }
    }
    destroy(renderer, needDestroyTextures = false) {
        if (this._isDestroyed) {
            return this;
        }
        super.destroy(renderer, needDestroyTextures);
        const resourceManager = renderer.resourceManager;
        const _usedResourceDict = this._usedResourceDict;
        for (let id in _usedResourceDict) {
            resourceManager.destroyIfNoRef(_usedResourceDict[id]);
        }
        if (this.material && needDestroyTextures) {
            this.material.destroyTextures();
        }
        this.off();
        this._usedResourceDict = null;
        this.geometry = null;
        this.material = null;
        this._isDestroyed = true;
        return this;
    }
}


/***/ }),

/***/ "./src/engine/core/Scene.ts":
/*!**********************************!*\
  !*** ./src/engine/core/Scene.ts ***!
  \**********************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scene", function() { return Scene; });
/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameObject */ "./src/engine/core/GameObject.ts");
/* harmony import */ var _renderer_WebGLRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../renderer/WebGLRenderer */ "./src/engine/renderer/WebGLRenderer.ts");


class Scene extends _GameObject__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(params) {
        super();
        /**
         * 渲染器
         * @type {WebGLRenderer}
         */
        this.renderer = null;
        /**
       * 摄像机
       * @type {Camera}
       */
        this.camera = null;
        /**
        * 偏移值
        * @type {number}
        * @default 0
        */
        this.offsetX = 0;
        /**
         * 偏移值
         * @type {Number}
         * @default 0
         */
        this.offsetY = 0;
        this.width = 0;
        this.height = 0;
        this.rendererWidth = 0;
        this.rendererHeight = 0;
        if (!params.width) {
            params.width = window.innerWidth;
        }
        if (!params.height) {
            params.height = window.innerHeight;
        }
        if (!params.pixelRatio) {
            let pixelRatio = window.devicePixelRatio || 1;
            pixelRatio = Math.min(pixelRatio, 1024 / Math.max(params.width, params.height), 2);
            pixelRatio = Math.max(pixelRatio, 1);
            params.pixelRatio = pixelRatio;
        }
        this.width = params.width;
        this.height = params.height;
        this.camera = params.camera;
        this.canvas = params.canvas;
        this.pixelRatio = params.pixelRatio;
        this.initRenderer(params);
    }
    /**
     * 初始化渲染器
     * @private
     * @param  {Object} params
     */
    initRenderer(params) {
        const canvas = this.canvas = this.createCanvas(params);
        this.renderer = new _renderer_WebGLRenderer__WEBPACK_IMPORTED_MODULE_1__["WebGLRenderer"](canvas, params.clearColor);
        this.resize(this.width, this.height, this.pixelRatio, true);
    }
    /**
     * 生成canvas
     * @private
     * @param  {Object} params
     * @return {Canvas}
     */
    createCanvas(params) {
        let canvas;
        if (params.canvas) {
            canvas = params.canvas;
        }
        else {
            canvas = document.createElement('canvas');
        }
        if (params.container) {
            params.container.appendChild(canvas);
        }
        return canvas;
    }
    /**
     * 缩放舞台
     * @param  {Number} width 舞台宽
     * @param  {Number} height 舞台高
     * @param  {Number} [pixelRatio=this.pixelRatio] 像素密度
     * @param  {Boolean} [force=false] 是否强制刷新
     * @return {Stage} 舞台本身。链式调用支持。
     */
    resize(width, height, pixelRatio, force) {
        if (pixelRatio === undefined) {
            pixelRatio = this.pixelRatio;
        }
        if (force || this.width !== width || this.height !== height || this.pixelRatio !== pixelRatio) {
            this.width = width;
            this.height = height;
            this.pixelRatio = pixelRatio;
            this.rendererWidth = width * pixelRatio;
            this.rendererHeight = height * pixelRatio;
            const canvas = this.canvas;
            const renderer = this.renderer;
            renderer.resize(this.rendererWidth, this.rendererHeight, force);
            canvas.style.width = this.width + 'px';
            canvas.style.height = this.height + 'px';
        }
        return this;
    }
    /**
     * 设置舞台偏移值
     * @param {Number} x x
     * @param {Number} y y
     * @return {Stage} 舞台本身。链式调用支持。
     */
    setOffset(x, y) {
        if (this.offsetX !== x || this.offsetY !== y) {
            this.offsetX = x;
            this.offsetY = y;
            const pixelRatio = this.pixelRatio;
            this.renderer.setOffset(x * pixelRatio, y * pixelRatio);
        }
        return this;
    }
    /**
    * 改viewport
    * @param  {Number} x      x
    * @param  {Number} y      y
    * @param  {Number} width  width
    * @param  {Number} height height
    * @return {Stage} 舞台本身。链式调用支持。
    */
    viewport(x, y, width, height) {
        this.resize(width, height, this.pixelRatio, true);
        this.setOffset(x, y);
        return this;
    }
    /**
     * 渲染一帧
     * @param  {number} dt 间隔时间
     * @return {Stage} 舞台本身。链式调用支持。
     */
    tick(dt) {
        this.traverseUpdate(dt);
        if (this.camera) {
            this.renderer.render(this, this.camera, true);
        }
        return this;
    }
    /**
     * 释放 WebGL 资源
     * @return {Stage} this
     */
    releaseGLResource() {
        this.renderer.releaseGLResource();
        return this;
    }
    /**
    * 销毁
    * @return {Stage} this
    */
    destroy() {
        this.releaseGLResource();
        this.traverse((child) => {
            child.off();
            child.parent = null;
        });
        this.children.length = 0;
        this.renderer.off();
        return this;
    }
}


/***/ }),

/***/ "./src/engine/event/EventObject.ts":
/*!*****************************************!*\
  !*** ./src/engine/event/EventObject.ts ***!
  \*****************************************/
/*! exports provided: EventObject, EventObjectNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventObject", function() { return EventObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventObjectNode", function() { return EventObjectNode; });
class EventObject {
    /**
     * @language=en
     * Add an event listenser.
     * @param {String} type Event type to listen.
     * @param {Function} listener Callback function of event listening.
     * @param {Boolean} once Listen on event only once and no more response after the first response?
     * @returns {Object} The Event itself. Functions chain call supported.
     */
    on(type, listener, once) {
        var listeners = (this._listeners = this._listeners || {});
        var eventListeners = (listeners[type] = listeners[type] || []);
        for (var i = 0, len = eventListeners.length; i < len; i++) {
            var el = eventListeners[i];
            if (el.listener === listener)
                return;
        }
        eventListeners.push({ listener: listener, once: once });
        return this;
    }
    /**
     * @language=en
     * Remove one event listener. Remove all event listeners if no parameter provided, and remove all event listeners on one type which is provided as the only parameter.
     * @param {String} type The type of event listener that want to remove.
     * @param {Function} listener Event listener callback function to be removed.
     * @returns {Object} The Event itself. Functions chain call supported.
     */
    off(type, listener) {
        //remove all event listeners
        if (arguments.length == 0) {
            this._listeners = null;
            return this;
        }
        var eventListeners = this._listeners && this._listeners[type];
        if (eventListeners) {
            //remove event listeners by specified type
            if (arguments.length == 1) {
                delete this._listeners[type];
                return this;
            }
            for (var i = 0, len = eventListeners.length; i < len; i++) {
                var el = eventListeners[i];
                if (el.listener === listener) {
                    eventListeners.splice(i, 1);
                    if (eventListeners.length === 0)
                        delete this._listeners[type];
                    break;
                }
            }
        }
        return this;
    }
    /**
     * @language=en
     * Send events. If the first parameter is an Object, take it  as an Event Object.
     * @param {String} type Event type to send.
     * @param {Object} detail The detail (parameters go with the event) of Event to send.
     * @returns {Boolean} Whether Event call successfully.
     */
    fire(type, detail) {
        var event, eventType;
        if (typeof type === 'string') {
            eventType = type;
        }
        else {
            event = type;
            eventType = type.type;
        }
        var listeners = this._listeners;
        if (!listeners)
            return false;
        var eventListeners = listeners[eventType];
        if (eventListeners) {
            var eventListenersCopy = eventListeners.slice(0);
            event = event || new EventObjectNode(eventType, this, detail);
            if (event._stopped)
                return false;
            for (var i = 0; i < eventListenersCopy.length; i++) {
                var el = eventListenersCopy[i];
                el.listener.call(this, event);
                if (el.once) {
                    var index = eventListeners.indexOf(el);
                    if (index > -1) {
                        eventListeners.splice(index, 1);
                    }
                }
            }
            if (eventListeners.length == 0)
                delete listeners[eventType];
            return true;
        }
        return false;
    }
}
;
class EventObjectNode {
    constructor(type, target, detail) {
        this.timeStamp = 0;
        this.type = type;
        this.target = target;
        this.detail = detail;
        this.timeStamp = +new Date();
    }
    stopImmediatePropagation() {
        this._stopped = true;
    }
}
//Trick: `stopImmediatePropagation` compatibility
var RawEvent = window.Event;
if (RawEvent) {
    var proto = RawEvent.prototype, stop = proto.stopImmediatePropagation;
    proto.stopImmediatePropagation = function () {
        stop && stop.call(this);
        this._stopped = true;
    };
}


/***/ }),

/***/ "./src/engine/geometry/BoxGeometry.ts":
/*!********************************************!*\
  !*** ./src/engine/geometry/BoxGeometry.ts ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Geometry */ "./src/engine/geometry/Geometry.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _GeometryData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GeometryData */ "./src/engine/geometry/GeometryData.ts");



const aabbData = [
    [0, 0, 0],
    [0, 0, 0]
];
/**
 * 长方体几何体
 * @class
 * @extends Geometry
 */
class BoxGeometry extends _Geometry__WEBPACK_IMPORTED_MODULE_0__["Geometry"] {
    /**
     * @constructs
     */
    constructor() {
        super();
        /**
         * box的宽度
         * @default 1
         * @type {number}
         */
        this.width = 1;
        /**
         * box的高度
         * @default 1
         * @type {number}
         */
        this.height = 1;
        /**
         * box的深度
         * @default 1
         * @type {number}
         */
        this.depth = 1;
        /**
         * 水平分割面的数量
         * @default 1
         * @type {number}
         */
        this.widthSegments = 1;
        /**
         * 垂直分割面的数量
         * @default 1
         * @type {number}
         */
        this.heightSegments = 1;
        /**
         * 深度分割面的数量
         * @default 1
         * @type {number}
         */
        this.depthSegments = 1;
        if (this.isSegments()) {
            this.buildWithSegments();
        }
        else {
            this.build();
        }
    }
    buildWithSegments() {
        const { width, height, depth, widthSegments, heightSegments, depthSegments } = this;
        const xVertexCount = (heightSegments + 1) * (depthSegments + 1);
        const yVertexCount = (widthSegments + 1) * (depthSegments + 1);
        const zVertexCount = (widthSegments + 1) * (heightSegments + 1);
        const xIndexCount = heightSegments * depthSegments * 6;
        const yIndexCount = widthSegments * depthSegments * 6;
        const zIndexCount = widthSegments * heightSegments * 6;
        const verticesCount = (xVertexCount + yVertexCount + zVertexCount) * 2;
        const vertices = new Float32Array(verticesCount * 3);
        const normals = new Float32Array(verticesCount * 3);
        const uvs = new Float32Array(verticesCount * 2);
        const indices = new Uint16Array((xIndexCount + yIndexCount + zIndexCount) * 2);
        this.vertices = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](vertices, 3);
        this.normals = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](normals, 3);
        this.uvs = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](uvs, 2);
        this.indices = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](indices, 1);
        let idxInfo = [0, 0];
        // x right
        this.buildPlane(idxInfo, 2, 1, 0, -1, 1, depth, height, width / 2, depthSegments, heightSegments);
        // -x left
        this.buildPlane(idxInfo, 2, 1, 0, 1, 1, depth, height, -width / 2, depthSegments, heightSegments);
        // y top
        this.buildPlane(idxInfo, 0, 2, 1, 1, -1, width, depth, height / 2, widthSegments, depthSegments);
        // -y bottom
        this.buildPlane(idxInfo, 0, 2, 1, 1, 1, width, depth, -height / 2, widthSegments, depthSegments);
        // z front
        this.buildPlane(idxInfo, 0, 1, 2, 1, 1, width, height, depth / 2, widthSegments, heightSegments);
        // -z back
        this.buildPlane(idxInfo, 0, 1, 2, -1, 1, width, height, -depth / 2, widthSegments, heightSegments);
    }
    buildPlane(idxInfo, u, v, w, uDir, vDir, uLength, vLength, wValue, uSegments, vSegments) {
        const uDiff = uLength / uSegments;
        const vDiff = vLength / vSegments;
        const uHalf = uLength / 2;
        const vHalf = vLength / 2;
        let idx = idxInfo[0];
        let currentIndicesIdx = idxInfo[1];
        const vertices = this.vertices.data;
        const normals = this.normals.data;
        const uvs = this.uvs.data;
        const indices = this.indices.data;
        for (let vi = 0; vi <= vSegments; vi++) {
            let vValue = (vi * vDiff - vHalf) * vDir;
            for (let ui = 0; ui <= uSegments; ui++) {
                vertices[idx * 3 + u] = (ui * uDiff - uHalf) * uDir;
                vertices[idx * 3 + v] = vValue;
                vertices[idx * 3 + w] = wValue;
                normals[idx * 3 + u] = 0;
                normals[idx * 3 + v] = 0;
                normals[idx * 3 + w] = wValue < 0 ? -1 : 1;
                uvs[idx * 2] = ui / uSegments;
                uvs[idx * 2 + 1] = 1 - vi / vSegments;
                if (ui < uSegments && vi < vSegments) {
                    let lb = idxInfo[0] + (vi + 1) * (uSegments + 1) + ui;
                    indices[currentIndicesIdx++] = lb;
                    indices[currentIndicesIdx++] = idx;
                    indices[currentIndicesIdx++] = lb + 1;
                    indices[currentIndicesIdx++] = lb + 1;
                    indices[currentIndicesIdx++] = idx;
                    indices[currentIndicesIdx++] = idx + 1;
                }
                idx++;
            }
        }
        idxInfo[0] = idx;
        idxInfo[1] = currentIndicesIdx;
    }
    build() {
        const vertices = new Float32Array(72);
        const indices = new Uint16Array(36);
        this.vertices = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](vertices, 3);
        this.indices = new _GeometryData__WEBPACK_IMPORTED_MODULE_2__["GeometryData"](indices, 1);
        const halfWidth = this.width / 2;
        const halfHeight = this.height / 2;
        const halfDepth = this.depth / 2;
        const p1 = [-halfWidth, -halfHeight, -halfDepth];
        const p2 = [halfWidth, -halfHeight, -halfDepth];
        const p3 = [halfWidth, halfHeight, -halfDepth];
        const p4 = [-halfWidth, halfHeight, -halfDepth];
        const p5 = [-halfWidth, -halfHeight, halfDepth];
        const p6 = [halfWidth, -halfHeight, halfDepth];
        const p7 = [halfWidth, halfHeight, halfDepth];
        const p8 = [-halfWidth, halfHeight, halfDepth];
        this.addRect(p6, p2, p3, p7); // right
        this.addRect(p1, p5, p8, p4); // left
        this.addRect(p8, p7, p3, p4); // top
        this.addRect(p1, p2, p6, p5); // bottom
        this.addRect(p5, p6, p7, p8); // front
        this.addRect(p2, p1, p4, p3); // back
    }
    isSegments() {
        return this.widthSegments > 1 || this.heightSegments > 1 || this.depthSegments > 1;
    }
    /**
     * 设置朝前面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setFrontUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setFrontUV!');
            return;
        }
        this.setVertexUV(32, uv);
    }
    /**
     * 设置右侧面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setRightUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setRightUV!');
            return;
        }
        this.setVertexUV(0, uv);
    }
    /**
     * 设置朝后面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setBackUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setBackUV!');
            return;
        }
        this.setVertexUV(40, uv);
    }
    /**
     * 设置左侧面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setLeftUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setLeftUV!');
            return;
        }
        this.setVertexUV(8, uv);
    }
    /**
     * 设置顶部面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setTopUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setTopUV!');
            return;
        }
        this.setVertexUV(16, uv);
    }
    /**
     * 设置底部面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][]} uv uv数据，如 [[0, 1], [1, 1], [1, 0], [0, 0]]
     */
    setBottomUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setBottomUV!');
            return;
        }
        this.setVertexUV(24, uv);
    }
    /**
     * 设置所有面的uv，不支持设置带有 widthSegments heightSegments depthSegments 的实例
     * @param {number[][][]} uv uv数据，如
     * [<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]],<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]],<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]],<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]],<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]],<br>
     *     [[0, 1], [1, 1], [1, 0], [0, 0]]<br>
     * ]
     */
    setAllRectUV(uv) {
        if (this.isSegments()) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('segmented BoxGeometry dont support setAllRectUV!');
            return null;
        }
        for (let i = 0; i < 6; i++) {
            this.setVertexUV(i * 8, uv);
        }
        return this;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (BoxGeometry);


/***/ }),

/***/ "./src/engine/geometry/Geometry.ts":
/*!*****************************************!*\
  !*** ./src/engine/geometry/Geometry.ts ***!
  \*****************************************/
/*! exports provided: Geometry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Geometry", function() { return Geometry; });
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _math_Vector4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vector4 */ "./src/engine/math/Vector4.ts");
/* harmony import */ var _math_Vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Vector2 */ "./src/engine/math/Vector2.ts");
/* harmony import */ var _math_Matrix3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Matrix3 */ "./src/engine/math/Matrix3.ts");
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _math_Quaternion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/Quaternion */ "./src/engine/math/Quaternion.ts");
/* harmony import */ var _GeometryData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./GeometryData */ "./src/engine/geometry/GeometryData.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _math_Sphere__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../math/Sphere */ "./src/engine/math/Sphere.ts");
/* harmony import */ var _math_Utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../math/Utils */ "./src/engine/math/Utils.ts");
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");












const { TRIANGLES, LINES, FRONT, BACK, FRONT_AND_BACK } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_11__["glConstants"];
const tempVector31 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const tempVector32 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const tempVector33 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const tempVector41 = new _math_Vector4__WEBPACK_IMPORTED_MODULE_1__["Vector4"]();
const tempVector21 = new _math_Vector2__WEBPACK_IMPORTED_MODULE_2__["Vector2"]();
const tempVector22 = new _math_Vector2__WEBPACK_IMPORTED_MODULE_2__["Vector2"]();
const tempVector23 = new _math_Vector2__WEBPACK_IMPORTED_MODULE_2__["Vector2"]();
const tempMatrix3 = new _math_Matrix3__WEBPACK_IMPORTED_MODULE_3__["Matrix3"]();
const tempMatrix4 = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_4__["Matrix4"]();
const tempQuaternion = new _math_Quaternion__WEBPACK_IMPORTED_MODULE_5__["Quaternion"]();
class Geometry {
    /**
     * @constructs
     */
    constructor() {
        /**
         * 顶点数据
         * @default null
         * @type {GeometryData}
         */
        this.vertices = null;
        /**
         * uv 数据
         * @default null
         * @type {GeometryData}
         */
        this.uvs = null;
        /**
         * uv1 数据
         * @default null
         * @type {GeometryData}
         */
        this.uvs1 = null;
        /**
         * color 数据
         * @default null
         * @type {GeometryData}
         */
        this.colors = null;
        /**
         * 顶点索引数据
         * @default null
         * @type {GeometryData}
         */
        this.indices = null;
        /**
         * 绘制模式
         * @default TRIANGLES
         * @type {number}
         */
        this.mode = TRIANGLES;
        /**
         * 是否是静态
         * @type {Boolean}
         * @default true
         */
        this.isStatic = true;
        /**
        * 是否需要更新
        * @type {Boolean}
        * @default true
        */
        this.isDirty = true;
        this._needUpdateNormals = false;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_8__["default"].generateUUID(this.constructor.name);
        this.currentVerticesCount = 0;
        this.currentIndicesCount = 0;
    }
    /**
    * 法向量数据，如果没有的话会自动生成
    * @default null
    * @type {Float32Array}
    */
    get normals() {
        if (this._needUpdateNormals || !this._normals) {
            this.calculateNormals();
        }
        return this._normals;
    }
    set normals(data) {
        this._normals = data;
        this._needUpdateNormals = false;
    }
    calculateNormals() {
        const vertices = this.vertices;
        if (!vertices) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warnOnce('geometry.calculateNormals', 'geometry.calculateNormals error:no vertices data.');
            return;
        }
        if (!this._normals) {
            this._normals = new _GeometryData__WEBPACK_IMPORTED_MODULE_6__["GeometryData"](new Float32Array(vertices.realLength), 3);
        }
        const normals = this._normals;
        let indices;
        if (this.indices) {
            indices = this.indices.data;
        }
        else {
            const len = vertices.length / 3;
            indices = new Array(len);
            for (let i = 0; i < len; i++) {
                indices[i] = i;
            }
        }
        let idx = 0;
        const verticesInFaceCountList = new Uint8Array(vertices.count);
        for (let i = 0; i < indices.length; i += 3) {
            idx = indices[i];
            tempVector31.copy(vertices.get(idx));
            idx = indices[i + 1];
            tempVector32.copy(vertices.get(idx));
            idx = indices[i + 2];
            tempVector33.copy(vertices.get(idx));
            tempVector32.sub(tempVector31);
            tempVector33.sub(tempVector31);
            tempVector32.cross(tempVector33);
            for (let j = 0; j < 3; j++) {
                idx = indices[i + j];
                if (verticesInFaceCountList[idx]) {
                    let oldNormal = normals.get(idx);
                    oldNormal.scale(verticesInFaceCountList[idx]);
                    oldNormal.add(tempVector32);
                    oldNormal.scale(1 / (verticesInFaceCountList[idx] + 1));
                    normals.set(idx, oldNormal);
                }
                else {
                    normals.set(idx, tempVector32);
                }
                verticesInFaceCountList[idx]++;
            }
        }
        this.isDirty = true;
        this._needUpdateNormals = false;
    }
    /**
    * 切线向量数据，如果没有的话会自动生成
    * @default null
    * @type {Float32Array}
    */
    get tangents() {
        if (!this._tangents) {
            this.calculateTangents(this.uvs, '_tangents');
        }
        return this._tangents;
    }
    set tangents(data) {
        this._tangents = data;
    }
    /**
   * 切线向量数据，如果没有的话会自动生成
   * @default null
   * @type {Float32Array}
   */
    get tangents1() {
        if (!this._tangents1) {
            this.calculateTangents(this.uvs1, '_tangents1');
        }
        return this._tangents1;
    }
    set tangents1(data) {
        this._tangents1 = data;
    }
    calculateTangents(uvs, tangentsName) {
        const vertices = this.vertices;
        if (!vertices) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warnOnce('geometry.calculateTangents', 'geometry.calculateTangents error:no vertices data.');
            return;
        }
        if (!this[tangentsName]) {
            this[tangentsName] = new _GeometryData__WEBPACK_IMPORTED_MODULE_6__["GeometryData"](new Float32Array(vertices.count * 4), 4);
        }
        const tangents = this[tangentsName];
        let indices;
        if (this.indices) {
            indices = this.indices.data;
        }
        else {
            const len = vertices.length / 3;
            indices = new Array(len);
            for (let i = 0; i < len; i++) {
                indices[i] = i;
            }
        }
        let idx = 0;
        for (let i = 0; i < indices.length; i += 3) {
            idx = indices[i];
            tempVector31.copy(vertices.get(idx));
            tempVector21.copy(uvs.get(idx));
            idx = indices[i + 1];
            tempVector32.copy(vertices.get(idx));
            tempVector22.copy(uvs.get(idx));
            idx = indices[i + 2];
            tempVector33.copy(vertices.get(idx));
            tempVector23.copy(uvs.get(idx));
            // eage1
            tempVector32.sub(tempVector31);
            // eage2
            tempVector33.sub(tempVector31);
            // deltauv1
            tempVector22.sub(tempVector21);
            // deltauv2
            tempVector23.sub(tempVector21);
            let f = 1 / (tempVector22.x * tempVector23.y - tempVector23.x * tempVector22.y);
            if (!Number.isFinite(f)) {
                tempVector31.x = 0;
                tempVector31.y = 0;
                tempVector31.z = 1;
            }
            else {
                tempVector31.x = f * (tempVector23.y * tempVector32.x - tempVector22.y * tempVector33.x);
                tempVector31.y = f * (tempVector23.y * tempVector32.y - tempVector22.y * tempVector33.y);
                tempVector31.z = f * (tempVector23.y * tempVector32.z - tempVector22.y * tempVector33.z);
            }
            tempVector41.set(tempVector31.x, tempVector31.y, tempVector31.z, 1);
            tangents.set(indices[i], tempVector41);
            tangents.set(indices[i + 1], tempVector41);
            tangents.set(indices[i + 2], tempVector41);
        }
        this.isDirty = true;
    }
    /**
    * 将三角形模式转换为线框模式，即 Material 中的 wireframe
    */
    convertToLinesMode() {
        if (this.mode !== TRIANGLES) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Only support convert triangles to lines mode!');
            return;
        }
        if (!this.indices) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Has no indices!');
            return;
        }
        let newIndices = new Uint16Array(this.indices.length * 2);
        let data = this.indices.data;
        for (let i = 0; i < data.length; i += 3) {
            newIndices[i * 2] = data[i]; // A
            newIndices[i * 2 + 1] = data[i + 1]; // B
            newIndices[i * 2 + 2] = data[i + 1]; // B
            newIndices[i * 2 + 3] = data[i + 2]; // C
            newIndices[i * 2 + 4] = data[i + 2]; // C
            newIndices[i * 2 + 5] = data[i]; // A
        }
        this.indices.data = newIndices;
        this.mode = LINES;
    }
    /**
     * 平移
     * @param  {Number} [x=0]
     * @param  {Number} [y=0]
     * @param  {Number} [z=0]
     * @return {Geometry} this
     */
    translate(x = 0, y = 0, z = 0) {
        this.transformMat4(tempMatrix4.fromTranslation(tempVector31.set(x, y, z)));
        return this;
    }
    /**
    * 缩放
    * @param  {Number} [x=1]
    * @param  {Number} [y=1]
    * @param  {Number} [z=1]
    * @return {Geometry} this
    */
    scale(x = 1, y = 1, z = 1) {
        this.transformMat4(tempMatrix4.fromScaling(tempVector31.set(x, y, z)));
        return this;
    }
    /**
     * 旋转
     * @param  {Number} [x=0] 旋转角度x
     * @param  {Number} [y=0] 旋转角度y
     * @param  {Number} [z=0] 旋转角度z
     * @return {Geometry} this
     */
    rotate(x = 0, y = 0, z = 0) {
        this.transformMat4(tempMatrix4.fromQuat(tempQuaternion.fromEuler({
            x: x * _math_math__WEBPACK_IMPORTED_MODULE_8__["default"].DEG2RAD,
            y: y * _math_math__WEBPACK_IMPORTED_MODULE_8__["default"].DEG2RAD,
            z: z * _math_math__WEBPACK_IMPORTED_MODULE_8__["default"].DEG2RAD
        })));
        return this;
    }
    /**
     * Transforms the geometry with a mat4.
     * @param  {Matrix4} mat4
     * @return {Geometry} this
     */
    transformMat4(mat4) {
        const vertices = this.vertices;
        if (vertices) {
            vertices.traverse((vertex, index, offset) => {
                vertices.setByOffset(offset, vertex.transformMat4(mat4));
            });
        }
        tempMatrix3.normalFromMat4(mat4);
        if (this._normals) {
            const normals = this.normals;
            normals.traverse((vertex, index, offset) => {
                normals.setByOffset(offset, vertex.transformMat3(tempMatrix3).normalize());
            });
        }
        if (this._tangents) {
            const tangents = this.tangents;
            tangents.traverse((vertex, index, offset) => {
                tangents.setByOffset(offset, vertex.transformMat3(tempMatrix3).normalize());
            });
        }
        this.isDirty = true;
        return this;
    }
    /**
    * 合并两个 geometry
    * @param  {Geometry} geometry
    * @param  {Matrix4} [matrix=null] 合并的矩阵
    * @return {Geometry} this
    */
    merge(geometry, matrix) {
        let vertices = geometry.vertices;
        if (vertices && this.vertices) {
            const count = this.vertices.count;
            if (matrix) {
                vertices = geometry.vertices.clone();
                vertices.traverse((vertex, index, offset) => {
                    vertices.setByOffset(offset, vertex.transformMat4(matrix));
                });
            }
            this.vertices.merge(vertices);
            if (this.indices && geometry.indices) {
                this.indices.merge(geometry.indices, data => data + count);
            }
            else {
                this.indices = null;
            }
        }
        if (this.uvs && geometry.uvs) {
            this.uvs.merge(geometry.uvs);
        }
        else {
            this.uvs = null;
        }
        if (this.uvs1 && geometry.uvs1) {
            this.uvs1.merge(geometry.uvs1);
        }
        else {
            this.uvs1 = null;
        }
        if (this.colors && geometry.colors) {
            this.colors.merge(geometry.colors);
        }
        else {
            this.colors = null;
        }
        if (this._normals) {
            this._normals = null;
        }
        if (this._tangents) {
            this._tangents = null;
        }
        if (this._tangents1) {
            this._tangents1 = null;
        }
        this.isDirty = true;
        return this;
    }
    ensureData(name, size, total, TypedArray) {
        let geometryData = this[name];
        if (!geometryData || total > geometryData.length) {
            const newData = new TypedArray(total);
            if (geometryData) {
                newData.set(geometryData.data);
                geometryData.data = newData;
            }
            else {
                this[name] = new _GeometryData__WEBPACK_IMPORTED_MODULE_6__["GeometryData"](newData, size);
            }
        }
    }
    /**
     * 添加顶点
     * @param {...number[]} points 顶点坐标，如 addPoints([x, y, z], [x, y, z])
     */
    addPoints(...args) {
        const points = [].slice.call(arguments);
        const total = (this.currentVerticesCount + points.length) * 3;
        this.ensureData('vertices', 3, total, Float32Array);
        const data = this.vertices.data;
        points.forEach((point) => {
            let start = this.currentVerticesCount++ * 3;
            data[start] = point[0];
            data[start + 1] = point[1];
            data[start + 2] = point[2];
        });
        return this.currentVerticesCount - points.length;
    }
    /**
     * 添加顶点索引
     * @param {...number} indices 顶点索引，如 addIndices(0, 1, 2)
     */
    addIndices(...args) {
        const indices = [].slice.call(arguments);
        const total = this.currentIndicesCount + indices.length;
        this.ensureData('indices', 1, total, Uint16Array);
        const data = this.indices.data;
        indices.forEach((idx) => {
            data[this.currentIndicesCount++] = idx;
        });
        this._needUpdateNormals = true;
    }
    /**
     * 添加一条线
     * @param {number[]} p1 起点坐标，如 [x, y, z]
     * @param {number[]} p2 终点坐标
     */
    addLine(p1, p2) {
        let start = this.addPoints(p1, p2);
        this.addIndices(start, start + 1);
    }
    /**
     * 添加一个三角形 ABC
     * @param {number[]} p1 点A，如 [x, y, z]
     * @param {number[]} p2 点B
     * @param {number[]} p3 点C
     */
    addFace(p1, p2, p3) {
        let start = this.addPoints(p1, p2, p3);
        this.addIndices(start, start + 1, start + 2);
    }
    /**
     * 添加一个矩形 ABCD
     * @param {number[]} p1 点A，如 [x, y, z]
     * @param {number[]} p2 点B
     * @param {number[]} p3 点C
     * @param {number[]} p4 点D
     */
    addRect(p1, p2, p3, p4) {
        let start = this.addPoints(p1, p2, p3, p4);
        // 0 1 2 & 0 2 3 make a rect
        this.addIndices(start, start + 1, start + 2, start, start + 2, start + 3);
    }
    /**
     * 设置顶点对应的uv坐标
     * @param {number} start 开始的顶点索引
     * @param {number[][]} uvs uv坐标数据，如 [[0, 0], [1, 0]]
     */
    setVertexUV(start, uvs) {
        this.ensureData('uvs', 2, this.vertices.length / 3 * 2, Float32Array);
        const data = this.uvs.data;
        for (let i = 0; i < uvs.length; i++) {
            data[start + i * 2] = uvs[i][0];
            data[start + i * 2 + 1] = uvs[i][1];
        }
    }
    /**
     * 设置三角形ABC的uv
     * @param {number} start 开始的顶点索引
     * @param {number[]} p1 点A的uv，如 [0, 0]
     * @param {number[]} p2 点B的uv
     * @param {number[]} p3 点C的uv
     */
    setFaceUV(start, p1, p2, p3) {
        this.setVertexUV(start, [p1, p2, p3]);
    }
    /**
     * 设置矩形ABCD的uv
     * @param {number} start 开始的顶点索引
     * @param {number[]} p1 点A的uv，如 [0, 0]
     * @param {number[]} p2 点B的uv
     * @param {number[]} p3 点C的uv
     * @param {number[]} p4 点D的uv
     */
    setRectUV(start, p1, p2, p3, p4) {
        this.setVertexUV(start, [p1, p2, p3, p4]);
    }
    /**
     * 获取指定matrix变化后的包围盒数据
     *
     * @param {Matrix4} [null] matrix 需要变换的矩阵
     * @param {Bounds} [bounds] 包围盒数据，传入的话会改变他
     * @return {Bounds} 包围盒数据
     */
    getBounds(matrix = null, bounds) {
        if (!bounds) {
            bounds = {
                xMin: Infinity,
                xMax: -Infinity,
                yMin: Infinity,
                yMax: -Infinity,
                zMin: Infinity,
                zMax: -Infinity
            };
        }
        const vertices = this.vertices;
        if (!vertices) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warnOnce('geometry.getBounds', 'geometry has no vertices data, geometry.getBounds will return Infinity bounds.');
            return bounds;
        }
        vertices.traverse((vertexData) => {
            if (matrix) {
                vertexData.transformMat4(matrix);
            }
            bounds.xMax = Math.max(bounds.xMax, vertexData.x);
            bounds.yMax = Math.max(bounds.yMax, vertexData.y);
            bounds.zMax = Math.max(bounds.zMax, vertexData.z);
            bounds.xMin = Math.min(bounds.xMin, vertexData.x);
            bounds.yMin = Math.min(bounds.yMin, vertexData.y);
            bounds.zMin = Math.min(bounds.zMin, vertexData.z);
        });
        bounds.width = bounds.xMax - bounds.xMin;
        bounds.height = bounds.yMax - bounds.yMin;
        bounds.depth = bounds.zMax - bounds.zMin;
        bounds.x = (bounds.xMin + bounds.xMax) / 2;
        bounds.y = (bounds.yMin + bounds.yMax) / 2;
        bounds.z = (bounds.zMin + bounds.zMax) / 2;
        return bounds;
    }
    /**
     * 获取本地包围盒
     * @param  {Boolean} [force=false] 是否强制刷新
     * @return {Bounds}
     */
    getLocalBounds(force = false) {
        if (!this._localBounds || force) {
            this._localBounds = this.getBounds();
        }
        return this._localBounds;
    }
    /**
     * 获取球面包围盒
     * @param  {Matrix4} matrix
     * @return {Sphere}
     */
    getSphereBounds(matrix) {
        if (!this._sphereBounds) {
            this._sphereBounds = new _math_Sphere__WEBPACK_IMPORTED_MODULE_9__["Sphere"]();
        }
        const sphereBounds = this._sphereBounds;
        sphereBounds.copy(this.getLocalSphereBounds());
        if (matrix) {
            sphereBounds.transformMat4(matrix);
        }
        return sphereBounds;
    }
    /**
     * 获取本地球面包围盒
     * @param  {Boolean} [force=false] 是否强制刷新
     * @return {Sphere}
     */
    getLocalSphereBounds(force = false) {
        if (!this._localSphereBounds || force) {
            const localBounds = this.getLocalBounds(force);
            const sphere = new _math_Sphere__WEBPACK_IMPORTED_MODULE_9__["Sphere"]({
                center: new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"](localBounds.x, localBounds.y, localBounds.z)
            });
            const vertices = this.vertices;
            if (vertices) {
                sphere.fromGeometryData(vertices);
            }
            else {
                _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warnOnce('geometry.getLocalSphereBounds', 'geometry has no vertices data, geometry.getLocalSphereBounds will return Infinity bounds.');
                sphere.radius = Infinity;
            }
            this._localSphereBounds = sphere;
        }
        return this._localSphereBounds;
    }
    /**
     * 将 Geometry 转换成无 indices
     * @param {number} [verticesItemLen=3] 转换结果的顶点数据的位数(3 or 4)，如果为4会补1
     */
    convertToNoIndices(verticesItemLen = 3) {
        if (this.mode !== TRIANGLES) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Only support convert triangles to lines mode!');
            return;
        }
        if (!this.indices) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Has no indices!');
            return;
        }
        const indices = this.indices.data;
        const indicesLen = indices.length;
        const vertices = new Float32Array(indicesLen * verticesItemLen);
        const uvs = this.uvs ? new Float32Array(indicesLen * 2) : null;
        const normals = new Float32Array(indicesLen * 3);
        const colors = this.colors ? new Float32Array(this.colors.size * indicesLen) : null;
        for (let i = 0; i < indicesLen; i++) {
            const idx = indices[i];
            _math_Utils__WEBPACK_IMPORTED_MODULE_10__["Utils"].copyArrayData(vertices, this.vertices, i * verticesItemLen, idx * 3, 3);
            if (verticesItemLen === 4) {
                vertices[i * 4 + 3] = 1;
            }
            _math_Utils__WEBPACK_IMPORTED_MODULE_10__["Utils"].copyArrayData(uvs, this.uvs, i * 2, idx * 2, 2);
            _math_Utils__WEBPACK_IMPORTED_MODULE_10__["Utils"].copyArrayData(normals, this.normals, i * 3, idx * 3, 3);
            if (this.colors) {
                _math_Utils__WEBPACK_IMPORTED_MODULE_10__["Utils"].copyArrayData(colors, this.colors, i * this.colors.size, idx * this.colors.size, this.colors.size);
            }
        }
        delete this.indices;
        this.vertices.data = vertices;
        if (this.uvs) {
            this.uvs.data = uvs;
        }
        if (this.normals) {
            this.normals.data = normals;
        }
        if (this.colors) {
            this.colors.data = colors;
        }
    }
    /**
     * clone当前Geometry
     * @return {Geometry} 返回clone的Geometry
     */
    clone() {
        const geometry = new Geometry();
        geometry.mode = this.mode;
        if (this.vertices) {
            geometry.vertices = this.vertices.clone();
        }
        if (this.uvs) {
            geometry.uvs = this.uvs.clone();
        }
        if (this.uvs1) {
            geometry.uvs1 = this.uvs1.clone();
        }
        if (this.colors) {
            geometry.colors = this.colors.clone();
        }
        if (this.indices) {
            geometry.indices = this.indices.clone();
        }
        if (this._normals) {
            geometry._normals = this._normals.clone();
        }
        if (this._tangents) {
            geometry._tangents = this._tangents.clone();
        }
        if (this._tangents1) {
            geometry._tangents1 = this._tangents1.clone();
        }
        if (this.positionDecodeMat) {
            geometry.positionDecodeMat = this.positionDecodeMat;
        }
        if (this.uvDecodeMat) {
            geometry.uvDecodeMat = this.uvDecodeMat;
        }
        if (this.uv1DecodeMat) {
            geometry.uv1DecodeMat = this.uv1DecodeMat;
        }
        if (this.normalDecodeMat) {
            geometry.normalDecodeMat = this.normalDecodeMat;
        }
        return geometry;
    }
    /**
     * 检测 aabb 碰撞
     * @param  {Ray} ray
     * @return {Vector3[]|null}
     */
    _aabbRaycast(ray) {
        const bounds = this.getLocalBounds();
        const res = ray.intersectsBox([
            [bounds.xMin, bounds.yMin, bounds.zMin],
            [bounds.xMax, bounds.yMax, bounds.zMax]
        ]);
        if (res) {
            return [res];
        }
        return null;
    }
    getRenderOption(opt = {}) {
        if (this.positionDecodeMat) {
            opt.QUANTIZED = 1;
            opt.POSITION_QUANTIZED = 1;
        }
        if (this.normalDecodeMat) {
            opt.QUANTIZED = 1;
            opt.NORMAL_QUANTIZED = 1;
        }
        if (this.uvDecodeMat) {
            opt.QUANTIZED = 1;
            opt.UV_QUANTIZED = 1;
        }
        if (this.uv1DecodeMat) {
            opt.QUANTIZED = 1;
            opt.UV1_QUANTIZED = 1;
        }
        if (this.colors) {
            opt.HAS_COLOR = 1;
            opt.COLOR_SIZE = this.colors.size;
        }
        return opt;
    }
    getShaderKey() {
        if (this._shaderKey === undefined) {
            this._shaderKey = 'geometry';
            if (this.colors) {
                this._shaderKey += '_colors';
            }
            if (this.positionDecodeMat) {
                this._shaderKey += 'positionDecodeMat';
            }
        }
        return this._shaderKey;
    }
    /**
     * 获取数据的内存大小，只处理顶点数据，单位为字节
     * @return {number} 内存占用大小
     */
    getSize() {
        let sum = 0;
        for (const key in this) {
            if (_math_Utils__WEBPACK_IMPORTED_MODULE_10__["Utils"].hasOwnProperty(this, key) && this[key] && (this[key] instanceof _GeometryData__WEBPACK_IMPORTED_MODULE_6__["GeometryData"])) {
                let elm = this[key];
                sum += elm.getByteLength();
            }
        }
        return sum;
    }
    /**
     * @deprecated
     * @return {Geometry} this
     */
    destroy() {
        _utils_Log__WEBPACK_IMPORTED_MODULE_7__["log"].warn('Geometry.destroy has been deprecated, use mesh.destroy(renderer) instead.');
    }
}


/***/ }),

/***/ "./src/engine/geometry/GeometryData.ts":
/*!*********************************************!*\
  !*** ./src/engine/geometry/GeometryData.ts ***!
  \*********************************************/
/*! exports provided: GeometryData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeometryData", function() { return GeometryData; });
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _math_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Utils */ "./src/engine/math/Utils.ts");
/* harmony import */ var _math_Vector2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Vector2 */ "./src/engine/math/Vector2.ts");
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _math_Vector4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../math/Vector4 */ "./src/engine/math/Vector4.ts");
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");







const sizeVectorMap = {
    2: new _math_Vector2__WEBPACK_IMPORTED_MODULE_3__["Vector2"](),
    3: new _math_Vector3__WEBPACK_IMPORTED_MODULE_4__["Vector3"](),
    4: new _math_Vector4__WEBPACK_IMPORTED_MODULE_5__["Vector4"](),
    16: new _math_Matrix4__WEBPACK_IMPORTED_MODULE_6__["Matrix4"]()
};
class GeometryData {
    /**
    * @constructs
    * @param  {TypedArray} data  数据
    * @param  {Number} size The number of components per vertex attribute.Must be 1, 2, 3, or 4.
    * @param  {Object} [params] 初始化参数，所有params都会复制到实例上
    */
    constructor(data, size) {
        /**
         * Whether integer data values should be normalized when being casted to a float.
         * @type {Boolean}
         * @default false
         */
        this.normalized = false;
        this._isSubDirty = false;
        this._isAllDirty = false;
        this._stride = 0;
        this.strideSize = 0;
        this._offset = 0;
        this.offsetSize = 0;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_0__["default"].generateUUID(this.constructor.name);
        /**
         * @type {TypedArray}
         */
        this.data = data;
        this.size = size;
        if (!this.bufferViewId) {
            this.bufferViewId = this.id;
        }
        if (!this.size) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('GeometryData.constructor: geometryData must set size!', this);
        }
    }
    /**
     * @type {Boolean}
     * @default false
     */
    get isDirty() {
        return this._isSubDirty || this._isAllDirty;
    }
    set isDirty(value) {
        this._isAllDirty = value;
        if (value === false) {
            this.clearSubData();
        }
    }
    /**
     * The offset in bytes between the beginning of consecutive vertex attributes.
     * @type {Number}
     * @default this.size
     */
    get stride() {
        return this._stride;
    }
    set stride(value) {
        this._stride = value;
        this.strideSize = value === 0 ? 0 : value / this.data.BYTES_PER_ELEMENT;
    }
    /**
    * An offset in bytes of the first component in the vertex attribute array. Must be a multiple of type.
    * @type {Number}
    * @default 0
    */
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
        this.offsetSize = value / this.data.BYTES_PER_ELEMENT;
    }
    /**
     * @type {TypedArray}
     */
    set data(data) {
        if (data) {
            this._data = data;
            this.type = _math_Utils__WEBPACK_IMPORTED_MODULE_2__["Utils"].getTypedArrayGLType(data);
            this.stride = this._stride;
            this.offset = this._offset;
            this._isAllDirty = true;
        }
    }
    get data() {
        return this._data;
    }
    /**
    * @type {Number}
    * @readOnly
    */
    get length() {
        return this._data.length;
    }
    /**
    * @type {Number}
    * @readOnly
    */
    get realLength() {
        if (this.strideSize === 0) {
            return this._data.length;
        }
        return this._data.length / this.strideSize * this.size;
    }
    /**
     * 获取数据大小，单位为字节
     * @return {number} 数据大小
     */
    getByteLength() {
        return this._data.BYTES_PER_ELEMENT * this.realLength;
    }
    /**
     * @type {Number}
     * @readOnly
     */
    get count() {
        if (this.strideSize === 0) {
            return this._data.length / this.size;
        }
        return this._data.length / this.strideSize;
    }
    /**
     * 更新部分数据
     * @param {Number} offset 偏移index
     * @param {TypedArray} data 数据
     */
    setSubData(offset, data) {
        this._isSubDirty = true;
        this.data.set(data, offset);
        if (!this.subDataList) {
            this.subDataList = [];
        }
        const byteOffset = data.BYTES_PER_ELEMENT * offset;
        this.subDataList.push({
            byteOffset,
            data
        });
    }
    /**
     * 清除 subData
     */
    clearSubData() {
        if (this.subDataList) {
            this.subDataList.length = 0;
        }
        this._isSubDirty = false;
    }
    /**
     * clone
     * @return {GeometryData}
     */
    clone() {
        const res = new GeometryData(null, 1);
        res.copy(this);
        return res;
    }
    /**
     * copy
     * @param  {GeometryData} geometryData
     */
    copy(geometryData) {
        const data = geometryData.data;
        this.data = new data.constructor(data);
        this.size = geometryData.size;
        this.stride = geometryData.stride;
        this.normalized = geometryData.normalized;
        this.type = geometryData.type;
        this.offset = geometryData.offset;
    }
    /**
     * 获取偏移值
     * @param  {Number} index
     * @return {Number}
     */
    getOffset(index) {
        const strideSize = this.strideSize;
        if (strideSize === 0) {
            return index * this.size;
        }
        return index * strideSize + this.offsetSize;
    }
    /**
     * 获取值
     * @param  {Number} index
     * @return {Number|Vector2|Vector3|Vector4}
     */
    get(index) {
        const offset = this.getOffset(index);
        return this.getByOffset(offset);
    }
    /**
     * 设置值
     * @param {Number} index
     * @param {Number|Vector2|Vector3|Vector4} value
     */
    set(index, value) {
        const offset = this.getOffset(index);
        this.setByOffset(offset, value);
        return offset;
    }
    /**
     * 根据 offset 获取值
     * @param  {Number} offset
     * @return {Number|Vector2|Vector3|Vector4}
     */
    getByOffset(offset) {
        const size = this.size;
        if (size > 1) {
            const tempVector = sizeVectorMap[size];
            return tempVector.fromArray(this._data, offset);
        }
        return this._data[offset];
    }
    /**
    * 根据 offset 设置值
    * @param {Number} offset
    * @param {Number|Vector2|Vector3|Vector4} value
    */
    setByOffset(offset, value) {
        const size = this.size;
        const data = this._data;
        if (size > 1) {
            value.toArray(data, offset);
        }
        else {
            data[offset] = value;
        }
        this._isAllDirty = true;
    }
    /**
    * 按 index 遍历
    * @param  {Function} callback(attribute, index, offset)
    * @return {Boolean}
    */
    traverse(callback) {
        const count = this.count;
        for (let index = 0; index < count; index++) {
            const offset = this.getOffset(index);
            const attribute = this.getByOffset(offset);
            if (callback(attribute, index, offset)) {
                return true;
            }
        }
        return false;
    }
    /**
     * 按 Component 遍历 Component
     * @param  {Function} callback(data, offset)
     * @return {Boolean}
     */
    traverseByComponent(callback) {
        const count = this.count;
        const size = this.size;
        const data = this._data;
        for (let index = 0; index < count; index++) {
            const offset = this.getOffset(index);
            const componentIndex = index * size;
            for (let i = 0; i < size; i++) {
                const componentOffset = offset + i;
                if (callback(data[componentOffset], componentIndex + i, componentOffset)) {
                    return true;
                }
            }
        }
        return false;
    }
    merge(geometryData, transform) {
        if (geometryData.type !== this.type || geometryData.size !== this.size) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warn('geometryData type or size not same, cannot merge!', this, geometryData);
            return this;
        }
        const DataClass = _math_Utils__WEBPACK_IMPORTED_MODULE_2__["Utils"].getTypedArrayClass(this.type);
        const length0 = this.realLength;
        const length1 = geometryData.realLength;
        const newData = new DataClass(length0 + length1);
        this.traverseByComponent((data, index) => {
            newData[index] = data;
        });
        geometryData.traverseByComponent((data, index) => {
            if (transform) {
                data = transform(data, index);
            }
            newData[length0 + index] = data;
        });
        this.stride = 0;
        this.offset = 0;
        this.data = newData;
        return this;
    }
}


/***/ }),

/***/ "./src/engine/light/DirectionLight.ts":
/*!********************************************!*\
  !*** ./src/engine/light/DirectionLight.ts ***!
  \********************************************/
/*! exports provided: DirectionLight */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectionLight", function() { return DirectionLight; });
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _Light__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Light */ "./src/engine/light/Light.ts");



const tempMatrix4 = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
const tempVector3 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
class DirectionLight extends _Light__WEBPACK_IMPORTED_MODULE_2__["Light"] {
    /**
     * @constructs
     * @param {Object} [params] 创建对象的属性参数。可包含此类的所有属性。
     */
    constructor() {
        super();
        /**
        * 阴影生成参数，默认不生成阴影
        * @default null
        * @type {object}
        * @property {boolean} [debug=false] 是否显示生成的阴影贴图
        * @property {number} [width=render.width] 阴影贴图的宽，默认为画布宽
        * @property {number} [height=render.height] 阴影贴图的高，默认为画布高
        * @property {number} [maxBias=0.05] depth最大差值，实际的bias为max(maxBias * (1 - dot(normal, lightDir)), minBias)
        * @property {number} [minBias=0.005] depth最小差值
        * @property {Object} [cameraInfo=null] 阴影摄像机信息，没有会根据当前相机自动计算
        */
        this.shadow = null;
        this.direction = new _math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"](0, 0, 1);
    }
    getWorldDirection() {
        tempVector3.copy(this.direction).transformDirection(this.worldMatrix).normalize();
        return tempVector3;
    }
    getViewDirection(camera) {
        const modelViewMatrix = camera.getModelViewMatrix(this, tempMatrix4);
        tempVector3.copy(this.direction).transformDirection(modelViewMatrix).normalize();
        return tempVector3;
    }
}


/***/ }),

/***/ "./src/engine/light/Light.ts":
/*!***********************************!*\
  !*** ./src/engine/light/Light.ts ***!
  \***********************************/
/*! exports provided: LightType, Light */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightType", function() { return LightType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return Light; });
/* harmony import */ var _math_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Color */ "./src/engine/math/Color.ts");
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _core_GameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/GameObject */ "./src/engine/core/GameObject.ts");



var LightType;
(function (LightType) {
    LightType[LightType["DirectionLight"] = 0] = "DirectionLight";
    LightType[LightType["PointLight"] = 1] = "PointLight";
    LightType[LightType["SpotLight"] = 2] = "SpotLight";
})(LightType || (LightType = {}));
const tempColor = new _math_Color__WEBPACK_IMPORTED_MODULE_0__["default"]();
class Light extends _core_GameObject__WEBPACK_IMPORTED_MODULE_2__["default"] {
    /**
     * @constructs
     * @param {Object} [params] 创建对象的属性参数。可包含此类的所有属性。
     */
    constructor() {
        super();
        /**
        * 光强度
        * @type {Number}
        * @default 1
        */
        this.amount = 1;
        /**
         * 是否开启灯光
         * @type {Boolean}
         * @default true
         */
        this.enabled = true;
        /**
        * 光常量衰减值, PointLight 和 SpotLight 时生效
        * @type {Number}
        * @readOnly
        * @default 1
        */
        this.constantAttenuation = 1;
        /**
        * 光线性衰减值, PointLight 和 SpotLight 时生效
        * @type {Number}
        * @readOnly
        * @default 0
        */
        this.linearAttenuation = 0;
        /**
         * 光二次衰减值, PointLight 和 SpotLight 时生效
         * @type {Number}
         * @readOnly
         * @default 0
         */
        this.quadraticAttenuation = 0;
        this._range = 0;
        this.direction = new _math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
        this.color = new _math_Color__WEBPACK_IMPORTED_MODULE_0__["default"](1, 1, 1);
    }
    /**
     * 光照范围, PointLight 和 SpotLight 时生效, 0 时代表光照范围无限大。
     * @type {Number}
     * @default 0
     */
    get range() {
        return this._range;
    }
    set range(value) {
        this.constantAttenuation = 1;
        if (value <= 0) {
            this.linearAttenuation = 0;
            this.quadraticAttenuation = 0;
        }
        else {
            this.linearAttenuation = 4.5 / value;
            this.quadraticAttenuation = 75 / (value * value);
        }
        this._range = value;
    }
    /**
     * 获取光范围信息, PointLight 和 SpotLight 时生效
     * @param  {Array} out  信息接受数组
     * @param  {Number} offset 偏移值
     */
    toInfoArray(out, offset) {
        out[offset + 0] = this.constantAttenuation;
        out[offset + 1] = this.linearAttenuation;
        out[offset + 2] = this.quadraticAttenuation;
        return this;
    }
    getRealColor() {
        return tempColor.copy(this.color).scale(this.amount);
    }
    /**
    * 生成阴影贴图，支持阴影的子类需要重写
    * @param  {WebGLRenderer} renderer
    * @param  {Camera} camera
    */
    createShadowMap(renderer, camera) {
    }
}


/***/ }),

/***/ "./src/engine/light/LightManager.ts":
/*!******************************************!*\
  !*** ./src/engine/light/LightManager.ts ***!
  \******************************************/
/*! exports provided: LightManager, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LightManager", function() { return LightManager; });
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _math_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Utils */ "./src/engine/math/Utils.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _DirectionLight__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DirectionLight */ "./src/engine/light/DirectionLight.ts");





const tempMatrix4 = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
const tempVector3 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
const tempFloat32Array = new Float32Array([0, 0, 0]);
/**
 * 光管理类
 * @class
 */
class LightManager {
    /**
     * @constructs
     * @param {Object} [params] 创建对象的属性参数。可包含此类的所有属性。
     */
    constructor() {
        this.ambientLights = [];
        this.directionalLights = [];
        this.pointLights = [];
        this.spotLights = [];
        this.areaLights = [];
        this.lightInfo = {
            AMBIENT_LIGHTS: 0,
            POINT_LIGHTS: 0,
            DIRECTIONAL_LIGHTS: 0,
            SPOT_LIGHTS: 0,
            AREA_LIGHTS: 0,
            uid: 0
        };
    }
    getRenderOption(option = {}) {
        _math_Utils__WEBPACK_IMPORTED_MODULE_2__["Utils"].each(this.lightInfo, (count, name) => {
            if (name === 'uid' || !count) {
                return;
            }
            option[name] = count;
        });
        return option;
    }
    /**
     * 增加光
     * @param {Light} light 光源
     * @return {LightManager} this
     */
    addLight(light) {
        let lights = null;
        if (!light.enabled) {
            return this;
        }
        // if (light.isAmbientLight) {
        //     lights = this.ambientLights;
        // } else if (light.isDirectionalLight) {
        //     lights = this.directionalLights;
        // } else if (light.isPointLight) {
        //     lights = this.pointLights;
        // } else if (light.isSpotLight) {
        //     lights = this.spotLights;
        // } else if (light.isAreaLight) {
        //     lights = this.areaLights;
        // } else {
        //     log.warnOnce(`LightManager.addLight(${light.id})`, 'Not support this light:', light);
        // }
        if (light instanceof _DirectionLight__WEBPACK_IMPORTED_MODULE_4__["DirectionLight"]) {
            lights = this.directionalLights;
        }
        else {
            _utils_Log__WEBPACK_IMPORTED_MODULE_3__["log"].warnOnce(`LightManager.addLight(${light.id})`, 'Not support this light:', light);
        }
        if (lights) {
            if (light.shadow) {
                lights.unshift(light);
            }
            else {
                lights.push(light);
            }
        }
        return this;
    }
    /**
     * 获取方向光信息
     * @param  {Camera} camera 摄像机
     * @return {Object}
     */
    getDirectionalInfo(camera) {
        const colors = [];
        const infos = [];
        const shadowMap = [];
        const shadowMapSize = [];
        const lightSpaceMatrix = [];
        const shadowBias = [];
        this.directionalLights.forEach((light, index) => {
            const offset = index * 3;
            light.getRealColor().toRGBArray(colors, offset);
            light.getViewDirection(camera).toArray(infos, offset);
            if (light.shadow && light.lightShadow) {
                shadowMap.push(light.lightShadow.framebuffer.texture);
                shadowMapSize.push(light.lightShadow.width);
                shadowMapSize.push(light.lightShadow.height);
                shadowBias.push(light.lightShadow.minBias, light.lightShadow.maxBias);
                tempMatrix4.copy(camera.worldMatrix);
                tempMatrix4.premultiply(light.lightShadow.camera.viewProjectionMatrix);
                tempMatrix4.toArray(lightSpaceMatrix, index * 16);
            }
        });
        const result = {
            colors: new Float32Array(colors),
            infos: new Float32Array(infos)
        };
        if (shadowMap.length) {
            result['shadowMap'] = shadowMap;
            result['shadowMapSize'] = new Float32Array(shadowMapSize);
            result['shadowBias'] = new Float32Array(shadowBias);
            result['lightSpaceMatrix'] = new Float32Array(lightSpaceMatrix);
        }
        return result;
    }
    /**
     * 获取聚光灯信息
     * @param {Camera} camera 摄像机
     * @return {Object}
     */
    getSpotInfo(camera) {
        const colors = [];
        const infos = [];
        const poses = [];
        const dirs = [];
        const cutoffs = [];
        const shadowMap = [];
        const shadowMapSize = [];
        const lightSpaceMatrix = [];
        const shadowBias = [];
        const ranges = [];
        this.spotLights.forEach((light, index) => {
            const offset = index * 3;
            light.getRealColor().toRGBArray(colors, offset);
            light.toInfoArray(infos, offset);
            light.getViewDirection(camera).toArray(dirs, offset);
            ranges.push(light.range);
            cutoffs.push(light._cutoffCos, light._outerCutoffCos);
            camera.getModelViewMatrix(light, tempMatrix4);
            tempMatrix4.getTranslation(tempVector3);
            tempVector3.toArray(poses, offset);
            if (light.shadow && light.lightShadow) {
                shadowMap.push(light.lightShadow.framebuffer.texture);
                shadowMapSize.push(light.lightShadow.width);
                shadowMapSize.push(light.lightShadow.height);
                shadowBias.push(light.lightShadow.minBias, light.lightShadow.maxBias);
                tempMatrix4.multiply(light.lightShadow.camera.viewProjectionMatrix, camera.worldMatrix);
                tempMatrix4.toArray(lightSpaceMatrix, index * 16);
            }
        });
        const result = {
            colors: new Float32Array(colors),
            infos: new Float32Array(infos),
            poses: new Float32Array(poses),
            dirs: new Float32Array(dirs),
            cutoffs: new Float32Array(cutoffs),
            ranges: new Float32Array(ranges)
        };
        if (shadowMap.length) {
            result['shadowMap'] = shadowMap;
            result['shadowMapSize'] = new Float32Array(shadowMapSize);
            result['shadowBias'] = new Float32Array(shadowBias);
            result['lightSpaceMatrix'] = new Float32Array(lightSpaceMatrix);
        }
        return result;
    }
    /**
     * 获取点光源信息
     * @param  {Camera} camera 摄像机
     * @return {Object}
     */
    getPointInfo(camera) {
        const colors = [];
        const infos = [];
        const poses = [];
        const shadowMap = [];
        const lightSpaceMatrix = [];
        const shadowBias = [];
        const cameras = [];
        const ranges = [];
        this.pointLights.forEach((light, index) => {
            const offset = index * 3;
            light.getRealColor().toRGBArray(colors, offset);
            light.toInfoArray(infos, offset);
            ranges.push(light.range);
            camera.getModelViewMatrix(light, tempMatrix4);
            tempMatrix4.getTranslation(tempVector3);
            tempVector3.toArray(poses, offset);
            if (light.shadow && light.lightShadow) {
                shadowMap.push(light.lightShadow.framebuffer.texture);
                shadowBias.push(light.lightShadow.minBias, light.lightShadow.maxBias);
                camera.worldMatrix.toArray(lightSpaceMatrix, index * 16);
                cameras[index * 2] = light.lightShadow.camera.near;
                cameras[index * 2 + 1] = light.lightShadow.camera.far;
            }
        });
        const result = {
            colors: new Float32Array(colors),
            infos: new Float32Array(infos),
            poses: new Float32Array(poses),
            ranges: new Float32Array(ranges)
        };
        if (shadowMap.length) {
            result['shadowMap'] = shadowMap;
            result['shadowBias'] = new Float32Array(shadowBias);
            result['lightSpaceMatrix'] = new Float32Array(lightSpaceMatrix);
            result['cameras'] = new Float32Array(cameras);
        }
        return result;
    }
    /**
     * 获取面光源信息
     * @param  {Camera} camera 摄像机
     * @return {Object}
     */
    getAreaInfo(camera) {
        const colors = [];
        const poses = [];
        const width = [];
        const height = [];
        let ltcTexture1;
        let ltcTexture2;
        this.areaLights.forEach((light, index) => {
            const offset = index * 3;
            light.getRealColor().toRGBArray(colors, offset);
            camera.getModelViewMatrix(light, tempMatrix4);
            tempMatrix4.getTranslation(tempVector3);
            tempVector3.toArray(poses, offset);
            const quat = tempMatrix4.getRotation();
            tempMatrix4.fromQuat(quat);
            tempVector3.set(light.width * 0.5, 0, 0);
            tempVector3.transformMat4(tempMatrix4);
            tempVector3.toArray(width, offset);
            tempVector3.set(0.0, light.height * 0.5, 0.0);
            tempVector3.transformMat4(tempMatrix4);
            tempVector3.toArray(height, offset);
            ltcTexture1 = light.ltcTexture1;
            ltcTexture2 = light.ltcTexture2;
        });
        const result = {
            colors: new Float32Array(colors),
            poses: new Float32Array(poses),
            width: new Float32Array(width),
            height: new Float32Array(height),
            ltcTexture1,
            ltcTexture2
        };
        return result;
    }
    /**
     * 获取环境光信息
     * @return {Object}
     */
    getAmbientInfo() {
        tempFloat32Array[0] = tempFloat32Array[1] = tempFloat32Array[2] = 0;
        this.ambientLights.forEach((light) => {
            const realColor = light.getRealColor();
            tempFloat32Array[0] += realColor.r;
            tempFloat32Array[1] += realColor.g;
            tempFloat32Array[2] += realColor.b;
        });
        tempFloat32Array[0] = Math.min(1, tempFloat32Array[0]);
        tempFloat32Array[1] = Math.min(1, tempFloat32Array[1]);
        tempFloat32Array[2] = Math.min(1, tempFloat32Array[2]);
        return tempFloat32Array;
    }
    /**
     * 更新所有光源信息
     * @param  {Camera} camera 摄像机
     */
    updateInfo(camera) {
        const { lightInfo, ambientLights, directionalLights, pointLights, spotLights, areaLights } = this;
        lightInfo['AMBIENT_LIGHTS'] = ambientLights.length;
        lightInfo['POINT_LIGHTS'] = pointLights.length;
        lightInfo['DIRECTIONAL_LIGHTS'] = directionalLights.length;
        lightInfo['SPOT_LIGHTS'] = spotLights.length;
        lightInfo['AREA_LIGHTS'] = areaLights.length;
        const shadowFilter = light => !!light.shadow;
        lightInfo['SHADOW_POINT_LIGHTS'] = pointLights.filter(shadowFilter).length;
        lightInfo['SHADOW_SPOT_LIGHTS'] = spotLights.filter(shadowFilter).length;
        lightInfo['SHADOW_DIRECTIONAL_LIGHTS'] = directionalLights.filter(shadowFilter).length;
        lightInfo['uid'] = [
            lightInfo['AMBIENT_LIGHTS'],
            lightInfo['POINT_LIGHTS'],
            lightInfo['SHADOW_POINT_LIGHTS'],
            lightInfo['DIRECTIONAL_LIGHTS'],
            lightInfo['SHADOW_DIRECTIONAL_LIGHTS'],
            lightInfo['SPOT_LIGHTS'],
            lightInfo['SHADOW_SPOT_LIGHTS'],
            lightInfo['AREA_LIGHTS']
        ].join('_');
        this.directionalInfo = this.getDirectionalInfo(camera);
        this.pointInfo = this.getPointInfo(camera);
        this.spotInfo = this.getSpotInfo(camera);
        this.areaInfo = this.getAreaInfo(camera);
        this.ambientInfo = this.getAmbientInfo();
    }
    /**
     * 获取光源信息
     * @return {Object}
     */
    getInfo() {
        return this.lightInfo;
    }
    /**
     * 重置所有光源
     */
    reset() {
        this.ambientLights.length = 0;
        this.directionalLights.length = 0;
        this.pointLights.length = 0;
        this.spotLights.length = 0;
        this.areaLights.length = 0;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (LightManager);


/***/ }),

/***/ "./src/engine/material/BasicMaterial.ts":
/*!**********************************************!*\
  !*** ./src/engine/material/BasicMaterial.ts ***!
  \**********************************************/
/*! exports provided: BasicMaterial */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicMaterial", function() { return BasicMaterial; });
/* harmony import */ var _Material__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Material */ "./src/engine/material/Material.ts");
/* harmony import */ var _texture_Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../texture/Texture */ "./src/engine/texture/Texture.ts");
/* harmony import */ var _math_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Color */ "./src/engine/math/Color.ts");



class BasicMaterial extends _Material__WEBPACK_IMPORTED_MODULE_0__["Material"] {
    constructor(params) {
        super();
        /**
        * 光照类型，支持: NONE, PHONG, BLINN-PHONG, LAMBERT
        * @default BLINN-PHONG
        * @type {string}
        */
        this.lightType = 'BLINN-PHONG';
        /**
        * 漫反射贴图，或颜色
        * @default Color(.5, .5, .5)
        * @type {Texture|Color}
        */
        this.diffuse = null;
        /**
         * 环境光贴图，或颜色
         * @default null
         * @type {Texture|Color}
         */
        this.ambient = null;
        /**
        * 镜面贴图，或颜色
        * @default Color(1, 1, 1)
        * @type {Texture|Color}
        */
        this.specular = null;
        /**
         * 放射光贴图，或颜色
         * @default Color(0, 0, 0)
         * @type {Texture|Color}
         */
        this.emission = null;
        /**
         * 环境贴图
         * @default null
         * @type {CTexture}
         */
        this.specularEnvMap = null;
        /**
         * 环境贴图变化矩阵，如旋转等
         * @default null
         * @type {Matrix4}
         */
        this.specularEnvMatrix = null;
        /**
         * 反射率
         * @default 0
         * @type {number}
         */
        this.reflectivity = 0;
        /**
         * 折射比率
         * @default 0
         * @type {number}
         */
        this.refractRatio = 0;
        /**
        * 折射率
        * @default 0
        * @type {number}
        */
        this.refractivity = 0;
        /**
         * 高光发光值
         * @default 32
         * @type {number}
         */
        this.shininess = 32;
        this.usedUniformVectors = 11;
        this.diffuse = new _math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](.5, .5, .5);
        this.specular = new _math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](1, 1, 1);
        this.emission = new _math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, 0);
        Object.assign(this.uniforms, {
            u_diffuse: 'DIFFUSE',
            u_specular: 'SPECULAR',
            u_ambient: 'AMBIENT',
            u_shininess: 'SHININESS',
            u_reflectivity: 'REFLECTIVITY',
            u_refractRatio: 'REFRACTRATIO',
            u_refractivity: 'REFRACTIVITY',
            u_specularEnvMap: 'SPECULARENVMAP',
            u_specularEnvMatrix: 'SPECULARENVMATRIX'
        });
        this.addTextureUniforms({
            u_diffuse: 'DIFFUSE',
            u_specular: 'SPECULAR',
            u_ambient: 'AMBIENT'
        });
    }
    getRenderOption(option = {}) {
        super.getRenderOption(option);
        const textureOption = this._textureOption.reset(option);
        const lightType = this.lightType;
        if (lightType === 'PHONG' || lightType === 'BLINN-PHONG') {
            option.HAS_SPECULAR = 1;
        }
        const diffuse = this.diffuse;
        if (diffuse && (diffuse instanceof _texture_Texture__WEBPACK_IMPORTED_MODULE_1__["default"])) {
            textureOption.add(this.diffuse, 'DIFFUSE_MAP');
        }
        if (option.HAS_LIGHT) {
            textureOption.add(this.specular, 'SPECULAR_MAP');
            textureOption.add(this.ambient, 'AMBIENT_MAP');
            textureOption.add(this.specularEnvMap, 'SPECULAR_ENV_MAP');
        }
        textureOption.update();
        return option;
    }
}


/***/ }),

/***/ "./src/engine/material/Material.ts":
/*!*****************************************!*\
  !*** ./src/engine/material/Material.ts ***!
  \*****************************************/
/*! exports provided: Material */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Material", function() { return Material; });
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _renderer_TextureOptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renderer/TextureOptions */ "./src/engine/renderer/TextureOptions.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _renderer_Semantic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renderer/Semantic */ "./src/engine/renderer/Semantic.ts");





const blankInfo = {
    isBlankInfo: true,
    get() {
        return undefined;
    }
};
const { LEQUAL, BACK, FRONT, FRONT_AND_BACK, ZERO, FUNC_ADD, ONE, SRC_ALPHA, ONE_MINUS_SRC_ALPHA } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"];
class Material {
    constructor() {
        /**
         * 光照类型
         *
         * @private
         * @type {string} //NONE, PHONG, BLINN-PHONG, LAMBERT光照模型
         * @memberof Material
         */
        this._lightType = 'NONE';
        /**
         *
         * 深度测试
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._depthTest = false;
        /**
         * 深度测试mask
         *
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._depthMask = false;
        this._depthRange = [0, 1];
        this._depthFunc = LEQUAL;
        this._cullFace = false;
        this._cullFaceType = BACK;
        this._side = FRONT;
        this._blend = false;
        this._blendEquation = FUNC_ADD;
        this._blendEquationAlpha = FUNC_ADD;
        this._blendSrc = ONE;
        this._blendDst = ZERO;
        this._blendSrcAlpha = ONE;
        this._blendDstAlpha = ZERO;
        /**
         * 当前是否需要强制更新
         *
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._isDirty = false;
        /**
         *透明度 0~1
         *
         * @private
         * @type {number}
         * @memberof Material
         */
        this._transparency = 1;
        /**
         *是否需要透明
         *
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._transparent = false;
        /**
         *法线贴图
         *
         * @private
         * @type {Texture}
         * @memberof Material
         */
        this._normalMap = null;
        /**
         *
         *法线贴图scale
         * @private
         * @type {number}
         * @memberof Material
         */
        this._normalMapScale = 1;
        /**
         * 透明度剪裁，如果渲染的颜色透明度大于等于这个值的话渲染为完全不透明，否则渲染为完全透明
         *
         * @private
         * @type {number}
         * @memberof Material
         */
        this._alphaCutoff = 0;
        /**
         * 是否需要加基础 uniforms
         *
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._needBasicUnifroms = true;
        /**
         *
         * 是否需要加基础 attributes
         * @private
         * @type {boolean}
         * @memberof Material
         */
        this._needBasicAttributes = true;
        /**
         *可以通过指定，semantic来指定值的获取方式，或者自定义get方法
         *
         * @private
         * @type {Object}
         * @memberof Material
         */
        this._uniforms = {};
        /**
         * 可以通过指定，semantic来指定值的获取方式，或者自定义get方法
         *
         * @private
         * @type {Object}
         * @memberof Material
         */
        this._attributes = {};
        this._textureOption = new _renderer_TextureOptions__WEBPACK_IMPORTED_MODULE_2__["TextureOptions"]();
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_1__["default"].generateUUID(this.constructor.name);
        this.uniforms = {};
        this.attributes = {};
        if (this.needBasicAttributes) {
            this.addBasicAttributes();
        }
        if (this.needBasicUnifroms) {
            this.addBasicUniforms();
        }
    }
    get lightType() {
        return this._lightType;
    }
    set lightType(value) {
        this._lightType = value;
    }
    get depthTest() {
        return this._depthTest;
    }
    set depthTest(value) {
        this._depthTest = value;
    }
    get depthMask() {
        return this._depthMask;
    }
    set depthMask(value) {
        this._depthMask = value;
    }
    get depthRange() {
        return this._depthRange;
    }
    set depthRange(value) {
        this._depthRange = value;
    }
    get depthFunc() {
        return this._depthFunc;
    }
    set depthFunc(value) {
        this._depthFunc = value;
    }
    get cullFace() {
        return this._cullFace;
    }
    set cullFace(value) {
        this._cullFace = value;
        if (value) {
            this.cullFaceType = this._cullFaceType;
        }
        else {
            this._side = FRONT_AND_BACK;
        }
    }
    get cullFaceType() {
        return this._cullFaceType;
    }
    set cullFaceType(value) {
        this._cullFaceType = value;
        if (this._cullFace) {
            if (value === BACK) {
                this._side = FRONT;
            }
            else if (value === FRONT) {
                this._side = BACK;
            }
        }
    }
    get side() {
        return this._side;
    }
    set side(value) {
        if (this._side !== value) {
            this._side = value;
            if (value === FRONT_AND_BACK) {
                this._cullFace = false;
            }
            else {
                this._cullFace = true;
                if (value === FRONT) {
                    this._cullFaceType = BACK;
                }
                else if (value === BACK) {
                    this._cullFaceType = FRONT;
                }
            }
        }
    }
    get blend() {
        return this._blend;
    }
    set blend(value) {
        this._blend = value;
    }
    get blendEquation() {
        return this._blendEquation;
    }
    set blendEquation(value) {
        this._blendEquation = value;
    }
    get blendEquationAlpha() {
        return this._blendEquationAlpha;
    }
    set blendEquationAlpha(value) {
        this._blendEquationAlpha = value;
    }
    get blendSrc() {
        return this._blendSrc;
    }
    set blendSrc(value) {
        this._blendSrc = value;
    }
    get blendDst() {
        return this._blendDst;
    }
    set blendDst(value) {
        this._blendDst = value;
    }
    get blendSrcAlpha() {
        return this._blendSrcAlpha;
    }
    set blendSrcAlpha(value) {
        this._blendSrcAlpha = value;
    }
    get blendDstAlpha() {
        return this._blendDstAlpha;
    }
    set blendDstAlpha(value) {
        this._blendDstAlpha = value;
    }
    get isDirty() {
        return this._isDirty;
    }
    set isDirty(value) {
        this._isDirty = value;
    }
    get transparency() {
        return this._transparency;
    }
    set transparency(value) {
        this._transparency = value;
    }
    get transparent() {
        return this._transparent;
    }
    set transparent(value) {
        if (this._transparent !== value) {
            this._transparent = value;
            if (!value) {
                this.blend = false;
                this.depthMask = true;
            }
            else {
                this.setDefaultTransparentBlend();
            }
        }
    }
    get normalMap() {
        return this._normalMap;
    }
    set normalMap(value) {
        this._normalMap = value;
    }
    get normalMapScale() {
        return this._normalMapScale;
    }
    set normalMapScale(value) {
        this._normalMapScale = value;
    }
    setDefaultTransparentBlend() {
        this.blend = true;
        this.depthMask = false;
        this.blendSrc = SRC_ALPHA;
        this.blendDst = ONE_MINUS_SRC_ALPHA;
        this.blendSrcAlpha = SRC_ALPHA;
        this.blendDstAlpha = ONE_MINUS_SRC_ALPHA;
    }
    get alphaCutoff() {
        return this._alphaCutoff;
    }
    set alphaCutoff(value) {
        this._alphaCutoff = value;
    }
    get needBasicUnifroms() {
        return this._needBasicUnifroms;
    }
    set needBasicUnifroms(value) {
        this._needBasicUnifroms = value;
    }
    get needBasicAttributes() {
        return this._needBasicAttributes;
    }
    set needBasicAttributes(value) {
        this._needBasicAttributes = value;
    }
    get isLoaded() {
        return true;
    }
    get uniforms() {
        return this._uniforms;
    }
    set uniforms(value) {
        this._uniforms = value;
    }
    get attributes() {
        return this._attributes;
    }
    set attributes(value) {
        this._attributes = value;
    }
    /**
     * 增加基础 attributes
     */
    addBasicAttributes() {
        let attributes = this.attributes;
        this._copyProps(attributes, {
            a_position: 'POSITION',
            a_normal: 'NORMAL',
            a_tangent: 'TANGENT',
            a_texcoord0: 'TEXCOORD_0',
            a_texcoord1: 'TEXCOORD_1',
            a_color: 'COLOR_0',
            a_skinIndices: 'SKININDICES',
            a_skinWeights: 'SKINWEIGHTS'
        });
        ['POSITION', 'NORMAL', 'TANGENT'].forEach((name) => {
            let camelName = name.slice(0, 1) + name.slice(1).toLowerCase();
            for (let i = 0; i < 8; i++) {
                const morphAttributeName = 'a_morph' + camelName + i;
                if (attributes[morphAttributeName] === undefined) {
                    attributes[morphAttributeName] = 'MORPH' + name + i;
                }
            }
        });
    }
    /**
    * 增加基础 uniforms
    */
    addBasicUniforms() {
        this._copyProps(this.uniforms, {
            u_modelMatrix: 'MODEL',
            u_viewMatrix: 'VIEW',
            u_projectionMatrix: 'PROJECTION',
            u_modelViewMatrix: 'MODELVIEW',
            u_modelViewProjectionMatrix: 'MODELVIEWPROJECTION',
            u_viewInverseNormalMatrix: 'VIEWINVERSEINVERSETRANSPOSE',
            u_normalMatrix: 'MODELVIEWINVERSETRANSPOSE',
            u_normalWorldMatrix: 'MODELINVERSETRANSPOSE',
            u_cameraPosition: 'CAMERAPOSITION',
            u_rendererSize: 'RENDERERSIZE',
            u_logDepth: 'LOGDEPTH',
            // light
            u_ambientLightsColor: 'AMBIENTLIGHTSCOLOR',
            u_directionalLightsColor: 'DIRECTIONALLIGHTSCOLOR',
            u_directionalLightsInfo: 'DIRECTIONALLIGHTSINFO',
            u_directionalLightsShadowMap: 'DIRECTIONALLIGHTSSHADOWMAP',
            u_directionalLightsShadowMapSize: 'DIRECTIONALLIGHTSSHADOWMAPSIZE',
            u_directionalLightsShadowBias: 'DIRECTIONALLIGHTSSHADOWBIAS',
            u_directionalLightSpaceMatrix: 'DIRECTIONALLIGHTSPACEMATRIX',
            u_pointLightsPos: 'POINTLIGHTSPOS',
            u_pointLightsColor: 'POINTLIGHTSCOLOR',
            u_pointLightsInfo: 'POINTLIGHTSINFO',
            u_pointLightsRange: 'POINTLIGHTSRANGE',
            u_pointLightsShadowBias: 'POINTLIGHTSSHADOWBIAS',
            u_pointLightsShadowMap: 'POINTLIGHTSSHADOWMAP',
            u_pointLightSpaceMatrix: 'POINTLIGHTSPACEMATRIX',
            u_pointLightCamera: 'POINTLIGHTCAMERA',
            u_spotLightsPos: 'SPOTLIGHTSPOS',
            u_spotLightsDir: 'SPOTLIGHTSDIR',
            u_spotLightsColor: 'SPOTLIGHTSCOLOR',
            u_spotLightsCutoffs: 'SPOTLIGHTSCUTOFFS',
            u_spotLightsInfo: 'SPOTLIGHTSINFO',
            u_spotLightsRange: 'SPOTLIGHTSRANGE',
            u_spotLightsShadowMap: 'SPOTLIGHTSSHADOWMAP',
            u_spotLightsShadowMapSize: 'SPOTLIGHTSSHADOWMAPSIZE',
            u_spotLightsShadowBias: 'SPOTLIGHTSSHADOWBIAS',
            u_spotLightSpaceMatrix: 'SPOTLIGHTSPACEMATRIX',
            u_areaLightsPos: 'AREALIGHTSPOS',
            u_areaLightsColor: 'AREALIGHTSCOLOR',
            u_areaLightsWidth: 'AREALIGHTSWIDTH',
            u_areaLightsHeight: 'AREALIGHTSHEIGHT',
            u_areaLightsLtcTexture1: 'AREALIGHTSLTCTEXTURE1',
            u_areaLightsLtcTexture2: 'AREALIGHTSLTCTEXTURE2',
            // joint
            u_jointMat: 'JOINTMATRIX',
            u_jointMatTexture: 'JOINTMATRIXTEXTURE',
            u_jointMatTextureSize: 'JOINTMATRIXTEXTURESIZE',
            // quantization
            u_positionDecodeMat: 'POSITIONDECODEMAT',
            u_normalDecodeMat: 'NORMALDECODEMAT',
            u_uvDecodeMat: 'UVDECODEMAT',
            u_uv1DecodeMat: 'UV1DECODEMAT',
            // morph
            u_morphWeights: 'MORPHWEIGHTS',
            u_normalMapScale: 'NORMALMAPSCALE',
            u_emission: 'EMISSION',
            u_transparency: 'TRANSPARENCY',
            // uv matrix
            u_uvMatrix: 'UVMATRIX_0',
            u_uvMatrix1: 'UVMATRIX_1',
            // other info
            u_fogColor: 'FOGCOLOR',
            u_fogInfo: 'FOGINFO',
            u_alphaCutoff: 'ALPHACUTOFF',
            u_exposure: 'EXPOSURE',
            u_gammaFactor: 'GAMMAFACTOR',
        });
        this.addTextureUniforms({
            u_normalMap: 'NORMALMAP',
            u_parallaxMap: 'PARALLAXMAP',
            u_emission: 'EMISSION',
            u_transparency: 'TRANSPARENCY'
        });
    }
    /**
     * 增加贴图 uniforms
     * @param {Object} textureUniforms textureName:semanticName 键值对
     */
    addTextureUniforms(textureUniforms) {
        const uniforms = {};
        for (const uniformName in textureUniforms) {
            let semanticName = textureUniforms[uniformName];
            uniforms[uniformName] = semanticName;
            uniforms[`${uniformName}.texture`] = semanticName;
            uniforms[`${uniformName}.uv`] = `${semanticName}UV`;
        }
        this._copyProps(this.uniforms, uniforms);
    }
    /**
    * 获取渲染选项值
    * @param  {Object} [option={}] 渲染选项值
    * @return {Object} 渲染选项值
    */
    getRenderOption(option) {
        const lightType = this.lightType;
        option[`LIGHT_TYPE_${lightType}`] = 1;
        option.SIDE = this.side;
        if (lightType !== 'NONE') {
            option.HAS_LIGHT = 1;
        }
        let textureOption = this._textureOption.reset(option);
        if (option.HAS_LIGHT) {
            option.HAS_NORMAL = 1;
            textureOption.add(this.normalMap, 'NORMAL_MAP', () => {
                if (this.normalMapScale !== 1) {
                    option.NORMAL_MAP_SCALE = 1;
                }
            });
        }
        if (this.alphaCutoff > 0) {
            option.ALPHA_CUTOFF = 1;
        }
        textureOption.update();
        return option;
    }
    getUniformData(name, mesh, programInfo) {
        return this.getUniformInfo(name).get(mesh, this, programInfo);
    }
    getAttributeData(name, mesh, programInfo) {
        return this.getAttributeInfo(name).get(mesh, this, programInfo);
    }
    getUniformInfo(name) {
        return this.getInfo('uniforms', name);
    }
    getAttributeInfo(name) {
        return this.getInfo('attributes', name);
    }
    getInfo(dataType, name) {
        const dataDict = this[dataType];
        let info = dataDict[name];
        if (typeof info === 'string') {
            info = _renderer_Semantic__WEBPACK_IMPORTED_MODULE_4__["semantic"][info];
        }
        if (!info || !info.get) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_3__["log"].warnOnce('material.getInfo-' + name, 'Material.getInfo: no this semantic:' + name);
            info = blankInfo;
        }
        return info;
    }
    load() {
    }
    /**
    * 复制属性，只有没属性时才会覆盖
    * @private
    * @param  {Object} dest
    * @param  {Object} src
    */
    _copyProps(dest, src) {
        for (const key in src) {
            if (dest[key] === undefined) {
                dest[key] = src[key];
            }
        }
    }
}


/***/ }),

/***/ "./src/engine/math/Color.ts":
/*!**********************************!*\
  !*** ./src/engine/math/Color.ts ***!
  \**********************************/
/*! exports provided: Color, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Color", function() { return Color; });
/* harmony import */ var _Vector4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector4 */ "./src/engine/math/Vector4.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/engine/math/Utils.ts");


/**
 * 颜色类
 * @class
 * @extends Vector4
 */
class Color extends _Vector4__WEBPACK_IMPORTED_MODULE_0__["Vector4"] {
    /**
     * r
     * @type {Number}
     */
    get r() {
        return this.x;
    }
    set r(v) {
        this.x = v;
    }
    /**
     * g
     * @type {Number}
     */
    get g() {
        return this.y;
    }
    set g(v) {
        this.y = v;
    }
    /**
     * b
     * @type {Number}
     */
    get b() {
        return this.z;
    }
    set b(v) {
        this.z = v;
    }
    /**
     * a
     * @type {Number}
     */
    get a() {
        return this.w;
    }
    set a(v) {
        this.w = v;
    }
    /**
     * @constructs
     * @param  {number} r
     * @param  {number} g
     * @param  {number} b
     * @param  {number} a
     */
    constructor(r = 1, g = 1, b = 1, a = 1) {
        super(r, g, b, a);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 转换到的数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toRGBArray(array = [], offset = 0) {
        const el = this.elements;
        array[offset] = el[0];
        array[offset + 1] = el[1];
        array[offset + 2] = el[2];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Color}
     */
    fromUintArray(array, offset = 0) {
        this.elements[0] = array[offset] / 255;
        this.elements[1] = array[offset + 1] / 255;
        this.elements[2] = array[offset + 2] / 255;
        this.elements[3] = array[offset + 3] / 255;
        return this;
    }
    /**
     * 从十六进制值赋值
     * @param  {String|Number} hex 颜色的十六进制值，可以以下形式："#ff9966", "ff9966", "#f96", "f96", 0xff9966
     * @return {Color}
     */
    fromHEX(hex) {
        if (typeof hex === 'number') {
            hex = _Utils__WEBPACK_IMPORTED_MODULE_1__["Utils"].padLeft(hex.toString(16), 6);
        }
        else {
            if (hex[0] === '#') {
                hex = hex.slice(1);
            }
            if (hex.length === 3) {
                hex = hex.replace(/(\w)/g, '$1$1');
            }
        }
        this.elements[0] = parseInt(hex.slice(0, 2), 16) / 255;
        this.elements[1] = parseInt(hex.slice(2, 4), 16) / 255;
        this.elements[2] = parseInt(hex.slice(4, 6), 16) / 255;
        return this;
    }
    /**
     * 转16进制
     * @return {string}
     */
    toHEX() {
        let hex = '';
        for (let i = 0; i < 3; i++) {
            hex += _Utils__WEBPACK_IMPORTED_MODULE_1__["Utils"].padLeft(Math.floor(this.elements[i] * 255).toString(16), 2);
        }
        return hex;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (Color);


/***/ }),

/***/ "./src/engine/math/Euler.ts":
/*!**********************************!*\
  !*** ./src/engine/math/Euler.ts ***!
  \**********************************/
/*! exports provided: Euler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Euler", function() { return Euler; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./src/engine/math/math.ts");
/* harmony import */ var _Matrix4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");



const tempMatrix = new _Matrix4__WEBPACK_IMPORTED_MODULE_1__["Matrix4"]();
const DEG2RAD = _math__WEBPACK_IMPORTED_MODULE_0__["default"].DEG2RAD;
const RAD2DEG = _math__WEBPACK_IMPORTED_MODULE_0__["default"].RAD2DEG;
class Euler {
    /**
     * @constructs
     * @param  {Number} [x=0]  角度 X, 弧度制
     * @param  {Number} [y=0]  角度 Y, 弧度制
     * @param  {Number} [z=0]  角度 Z, 弧度制
     */
    constructor(x = 0, y = 0, z = 0) {
        /**
     * 旋转顺序，默认为 ZYX
     * @type {string}
     * @default 'ZYX'
     */
        this.order = 'ZYX';
        this.elements = new Float32Array([x, y, z]);
        this.updateDegrees();
    }
    /**
     * 克隆
     * @return {Euler}
     */
    clone() {
        const euler = new Euler();
        euler.copy(this);
        return euler;
    }
    /**
     * 复制
     * @param  {Euler} euler
     * @return {Euler} this
     */
    copy(euler) {
        this.elements[0] = euler.x;
        this.elements[1] = euler.y;
        this.elements[2] = euler.z;
        this.order = euler.order;
        this.updateDegrees();
        return this;
    }
    /**
     * Set the components of a euler to the given values
     * @param {Number} x x 轴旋转角度, 弧度制
     * @param {Number} y y 轴旋转角度, 弧度制
     * @param {Number} z z 轴旋转角度, 弧度制
     * @return {Euler} this
     */
    set(x, y, z) {
        this.elements[0] = x;
        this.elements[1] = y;
        this.elements[2] = z;
        this.updateDegrees();
        return this;
    }
    /**
     * 设置角度
     * @param {Number} degX x 轴旋转角度, 角度制
     * @param {Number} degY y 轴旋转角度, 角度制
     * @param {Number} degZ z 轴旋转角度, 角度制
     * @return {Euler} this
     */
    setDegree(degX, degY, degZ) {
        this._degX = degX;
        this._degY = degY;
        this._degZ = degZ;
        this.updateRadians();
        return this;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Euler} this
     */
    fromArray(array, offset = 0) {
        this.elements[0] = array[offset];
        this.elements[1] = array[offset + 1];
        this.elements[2] = array[offset + 2];
        this.updateDegrees();
        return this;
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        array[offset] = this.elements[0];
        array[offset + 1] = this.elements[0 + 1];
        array[offset + 2] = this.elements[0 + 2];
        return array;
    }
    /**
     * Creates a euler from the given 4x4 rotation matrix.
     * @param {Matrix4} mat rotation matrix
     * @param {string} [order=this.order] 旋转顺序，默认为当前Euler实例的order
     * @return {Euler} this
     */
    fromMat4(mat, order) {
        // Based on https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js#L133
        const elements = mat.elements;
        const m11 = elements[0];
        const m21 = elements[1];
        const m31 = elements[2];
        const m12 = elements[4];
        const m22 = elements[5];
        const m32 = elements[6];
        const m13 = elements[8];
        const m23 = elements[9];
        const m33 = elements[10];
        order = order || this.order;
        this.order = order;
        const clamp = _math__WEBPACK_IMPORTED_MODULE_0__["default"].clamp;
        if (order === 'XYZ') {
            this.elements[1] = Math.asin(clamp(m13, -1, 1));
            if (Math.abs(m13) < 0.99999) {
                this.elements[0] = Math.atan2(-m23, m33);
                this.elements[2] = Math.atan2(-m12, m11);
            }
            else {
                this.elements[0] = Math.atan2(m32, m22);
                this.elements[2] = 0;
            }
        }
        else if (order === 'YXZ') {
            this.elements[0] = Math.asin(-clamp(m23, -1, 1));
            if (Math.abs(m23) < 0.99999) {
                this.elements[1] = Math.atan2(m13, m33);
                this.elements[2] = Math.atan2(m21, m22);
            }
            else {
                this.elements[1] = Math.atan2(-m31, m11);
                this.elements[2] = 0;
            }
        }
        else if (order === 'ZXY') {
            this.elements[0] = Math.asin(clamp(m32, -1, 1));
            if (Math.abs(m32) < 0.99999) {
                this.elements[1] = Math.atan2(-m31, m33);
                this.elements[2] = Math.atan2(-m12, m22);
            }
            else {
                this.elements[1] = 0;
                this.elements[2] = Math.atan2(m21, m11);
            }
        }
        else if (order === 'ZYX') {
            this.elements[1] = Math.asin(-clamp(m31, -1, 1));
            if (Math.abs(m31) < 0.99999) {
                this.elements[0] = Math.atan2(m32, m33);
                this.elements[2] = Math.atan2(m21, m11);
            }
            else {
                this.elements[0] = 0;
                this.elements[2] = Math.atan2(-m12, m22);
            }
        }
        else if (order === 'YZX') {
            this.elements[2] = Math.asin(clamp(m21, -1, 1));
            if (Math.abs(m21) < 0.99999) {
                this.elements[0] = Math.atan2(-m23, m22);
                this.elements[1] = Math.atan2(-m31, m11);
            }
            else {
                this.elements[0] = 0;
                this.elements[1] = Math.atan2(m13, m33);
            }
        }
        else if (order === 'XZY') {
            this.elements[2] = Math.asin(-clamp(m12, -1, 1));
            if (Math.abs(m12) < 0.99999) {
                this.elements[0] = Math.atan2(m32, m22);
                this.elements[1] = Math.atan2(m13, m11);
            }
            else {
                this.elements[0] = Math.atan2(-m23, m33);
                this.elements[1] = 0;
            }
        }
        else {
            _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warn('Euler fromMat4() unsupported order: ' + order);
        }
        this.updateDegrees();
        return this;
    }
    /**
     * Creates a euler from the given quat.
     * @param  {Quaternion} quat
     * @param  {String} [order=this.order] 旋转顺序，默认为当前Euler实例的order
     * @return {Euler} this
     */
    fromQuat(quat, order) {
        tempMatrix.fromQuat(quat);
        return this.fromMat4(tempMatrix, order);
    }
    updateDegrees() {
        this._degX = this.elements[0] * RAD2DEG;
        this._degY = this.elements[1] * RAD2DEG;
        this._degZ = this.elements[2] * RAD2DEG;
        return this;
    }
    updateRadians() {
        this.elements[0] = this._degX * DEG2RAD;
        this.elements[1] = this._degY * DEG2RAD;
        this.elements[2] = this._degZ * DEG2RAD;
        return this;
    }
    /**
     * 角度 X, 角度制
     * @type {Number}
     */
    get degX() {
        return this._degX;
    }
    set degX(value) {
        this._degX = value;
        this.elements[0] = value * DEG2RAD;
    }
    /**
     * 角度 Y, 角度制
     * @type {Number}
     */
    get degY() {
        return this._degY;
    }
    set degY(value) {
        this._degY = value;
        this.elements[1] = value * DEG2RAD;
    }
    /**
     * 角度 Z, 角度制
     * @type {Number}
     */
    get degZ() {
        return this._degZ;
    }
    set degZ(value) {
        this._degZ = value;
        this.elements[2] = value * DEG2RAD;
    }
    /**
     * 角度 X, 弧度制
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
        this._degX = value * RAD2DEG;
    }
    /**
     * 角度 Y, 弧度制
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
        this._degY = value * RAD2DEG;
    }
    /**
     * 角度 Z, 弧度制
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
        this._degZ = value * RAD2DEG;
    }
}


/***/ }),

/***/ "./src/engine/math/EulerNotifier.ts":
/*!******************************************!*\
  !*** ./src/engine/math/EulerNotifier.ts ***!
  \******************************************/
/*! exports provided: EulerNotifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EulerNotifier", function() { return EulerNotifier; });
/* harmony import */ var _Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./src/engine/math/math.ts");
/* harmony import */ var _Euler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Euler */ "./src/engine/math/Euler.ts");
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");





const tempMatrix = new _Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
const DEG2RAD = _math__WEBPACK_IMPORTED_MODULE_1__["default"].DEG2RAD;
const RAD2DEG = _math__WEBPACK_IMPORTED_MODULE_1__["default"].RAD2DEG;
class EulerNotifier extends _event_EventObject__WEBPACK_IMPORTED_MODULE_3__["EventObject"] {
    /**
     * @constructs
     * @param  {Number} [x=0]  角度 X, 弧度制
     * @param  {Number} [y=0]  角度 Y, 弧度制
     * @param  {Number} [z=0]  角度 Z, 弧度制
     */
    constructor(x = 0, y = 0, z = 0) {
        super();
        /**
     * 旋转顺序，默认为 ZYX
     * @type {string}
     * @default 'ZYX'
     */
        this.order = 'ZYX';
        this.elements = new Float32Array([x, y, z]);
        this.updateDegrees();
    }
    /**
     * 克隆
     * @return {Euler}
     */
    clone() {
        const euler = new _Euler__WEBPACK_IMPORTED_MODULE_2__["Euler"]();
        euler.copy(this);
        return euler;
    }
    /**
     * 复制
     * @param  {Euler} euler
     * @return {Euler} this
     */
    copy(euler) {
        this.elements[0] = euler.x;
        this.elements[1] = euler.y;
        this.elements[2] = euler.z;
        this.order = euler.order;
        this.updateDegrees();
        return this;
    }
    /**
     * Set the components of a euler to the given values
     * @param {Number} x x 轴旋转角度, 弧度制
     * @param {Number} y y 轴旋转角度, 弧度制
     * @param {Number} z z 轴旋转角度, 弧度制
     * @return {Euler} this
     */
    set(x, y, z) {
        this.elements[0] = x;
        this.elements[1] = y;
        this.elements[2] = z;
        this.updateDegrees();
        return this;
    }
    /**
     * 设置角度
     * @param {Number} degX x 轴旋转角度, 角度制
     * @param {Number} degY y 轴旋转角度, 角度制
     * @param {Number} degZ z 轴旋转角度, 角度制
     * @return {Euler} this
     */
    setDegree(degX, degY, degZ) {
        this._degX = degX;
        this._degY = degY;
        this._degZ = degZ;
        this.updateRadians();
        return this;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Euler} this
     */
    fromArray(array, offset = 0) {
        this.elements[0] = array[offset];
        this.elements[1] = array[offset + 1];
        this.elements[2] = array[offset + 2];
        this.updateDegrees();
        return this;
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        array[offset] = this.elements[0];
        array[offset + 1] = this.elements[0 + 1];
        array[offset + 2] = this.elements[0 + 2];
        return array;
    }
    /**
     * Creates a euler from the given 4x4 rotation matrix.
     * @param {Matrix4} mat rotation matrix
     * @param {string} [order=this.order] 旋转顺序，默认为当前Euler实例的order
     * @return {Euler} this
     */
    fromMat4(mat, order) {
        // Based on https://github.com/mrdoob/three.js/blob/dev/src/math/Euler.js#L133
        const elements = mat.elements;
        const m11 = elements[0];
        const m21 = elements[1];
        const m31 = elements[2];
        const m12 = elements[4];
        const m22 = elements[5];
        const m32 = elements[6];
        const m13 = elements[8];
        const m23 = elements[9];
        const m33 = elements[10];
        order = order || this.order;
        this.order = order;
        const clamp = _math__WEBPACK_IMPORTED_MODULE_1__["default"].clamp;
        if (order === 'XYZ') {
            this.elements[1] = Math.asin(clamp(m13, -1, 1));
            if (Math.abs(m13) < 0.99999) {
                this.elements[0] = Math.atan2(-m23, m33);
                this.elements[2] = Math.atan2(-m12, m11);
            }
            else {
                this.elements[0] = Math.atan2(m32, m22);
                this.elements[2] = 0;
            }
        }
        else if (order === 'YXZ') {
            this.elements[0] = Math.asin(-clamp(m23, -1, 1));
            if (Math.abs(m23) < 0.99999) {
                this.elements[1] = Math.atan2(m13, m33);
                this.elements[2] = Math.atan2(m21, m22);
            }
            else {
                this.elements[1] = Math.atan2(-m31, m11);
                this.elements[2] = 0;
            }
        }
        else if (order === 'ZXY') {
            this.elements[0] = Math.asin(clamp(m32, -1, 1));
            if (Math.abs(m32) < 0.99999) {
                this.elements[1] = Math.atan2(-m31, m33);
                this.elements[2] = Math.atan2(-m12, m22);
            }
            else {
                this.elements[1] = 0;
                this.elements[2] = Math.atan2(m21, m11);
            }
        }
        else if (order === 'ZYX') {
            this.elements[1] = Math.asin(-clamp(m31, -1, 1));
            if (Math.abs(m31) < 0.99999) {
                this.elements[0] = Math.atan2(m32, m33);
                this.elements[2] = Math.atan2(m21, m11);
            }
            else {
                this.elements[0] = 0;
                this.elements[2] = Math.atan2(-m12, m22);
            }
        }
        else if (order === 'YZX') {
            this.elements[2] = Math.asin(clamp(m21, -1, 1));
            if (Math.abs(m21) < 0.99999) {
                this.elements[0] = Math.atan2(-m23, m22);
                this.elements[1] = Math.atan2(-m31, m11);
            }
            else {
                this.elements[0] = 0;
                this.elements[1] = Math.atan2(m13, m33);
            }
        }
        else if (order === 'XZY') {
            this.elements[2] = Math.asin(-clamp(m12, -1, 1));
            if (Math.abs(m12) < 0.99999) {
                this.elements[0] = Math.atan2(m32, m22);
                this.elements[1] = Math.atan2(m13, m11);
            }
            else {
                this.elements[0] = Math.atan2(-m23, m33);
                this.elements[1] = 0;
            }
        }
        else {
            _utils_Log__WEBPACK_IMPORTED_MODULE_4__["log"].warn('Euler fromMat4() unsupported order: ' + order);
        }
        this.updateDegrees();
        return this;
    }
    /**
     * Creates a euler from the given quat.
     * @param  {Quaternion} quat
     * @param  {String} [order=this.order] 旋转顺序，默认为当前Euler实例的order
     * @return {Euler} this
     */
    fromQuat(quat, order) {
        tempMatrix.fromQuat(quat);
        return this.fromMat4(tempMatrix, order);
    }
    updateDegrees() {
        this._degX = this.elements[0] * RAD2DEG;
        this._degY = this.elements[1] * RAD2DEG;
        this._degZ = this.elements[2] * RAD2DEG;
        this.fire('update');
        return this;
    }
    updateRadians() {
        this.elements[0] = this._degX * DEG2RAD;
        this.elements[1] = this._degY * DEG2RAD;
        this.elements[2] = this._degZ * DEG2RAD;
        this.fire('update');
        return this;
    }
    /**
     * 角度 X, 角度制
     * @type {Number}
     */
    get degX() {
        return this._degX;
    }
    set degX(value) {
        this._degX = value;
        this.elements[0] = value * DEG2RAD;
        this.fire('update');
    }
    /**
     * 角度 Y, 角度制
     * @type {Number}
     */
    get degY() {
        return this._degY;
    }
    set degY(value) {
        this._degY = value;
        this.elements[1] = value * DEG2RAD;
        this.fire('update');
    }
    /**
     * 角度 Z, 角度制
     * @type {Number}
     */
    get degZ() {
        return this._degZ;
    }
    set degZ(value) {
        this._degZ = value;
        this.elements[2] = value * DEG2RAD;
        this.fire('update');
    }
    /**
     * 角度 X, 弧度制
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
        this._degX = value * RAD2DEG;
        this.fire('update');
    }
    /**
     * 角度 Y, 弧度制
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
        this._degY = value * RAD2DEG;
        this.fire('update');
    }
    /**
     * 角度 Z, 弧度制
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
        this._degZ = value * RAD2DEG;
        this.fire('update');
    }
}


/***/ }),

/***/ "./src/engine/math/Matrix3.ts":
/*!************************************!*\
  !*** ./src/engine/math/Matrix3.ts ***!
  \************************************/
/*! exports provided: Matrix3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix3", function() { return Matrix3; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");

class Matrix3 {
    /**
    * Creates a new identity mat3
    * @constructs
    */
    constructor() {
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].create();
    }
    /**
     * Copy the values from one mat3 to this
     * @param  {Matrix3} m the source matrix
     * @return {Matrix3} this
     */
    copy(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].copy(this.elements, m.elements);
        return this;
    }
    /**
     * Creates a new mat3 initialized with values from this matrix
     * @return {Matrix3} a new Matrix3
     */
    clone() {
        const m = new Matrix3();
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].copy(m.elements, this.elements);
        return m;
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const elements = this.elements;
        for (let i = 0; i < 9; i++) {
            array[offset + i] = elements[i];
        }
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Matrix3} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        for (let i = 0; i < 9; i++) {
            elements[i] = array[offset + i];
        }
        return this;
    }
    /**
     * Set the components of a mat3 to the given values
     * @param {Number} m00
     * @param {Number} m01
     * @param {Number} m02
     * @param {Number} m10
     * @param {Number} m11
     * @param {Number} m12
     * @param {Number} m20
     * @param {Number} m21
     * @param {Number} m22
     * @return {Matrix3} this
     */
    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].set(this.elements, m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return this;
    }
    /**
     * Set this to the identity matrix
     * @return {Matrix3} this
     */
    identity() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].identity(this.elements);
        return this;
    }
    /**
     * Transpose the values of this
     * @return {Matrix3} this
     */
    transpose() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].transpose(this.elements, this.elements);
        return this;
    }
    /**
     * invert a matrix
     * @param  {Matrix3} [m = this]
     * @return {Matrix3} this
     */
    invert(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].invert(this.elements, m.elements);
        return this;
    }
    /**
     * Calculates the adjugate of a mat3
     * @param  {Matrix3} [m=this]
     * @return {Matrix3} this
     */
    adjoint(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].adjoint(this.elements, m.elements);
        return this;
    }
    /**
     * Calculates the determinant of this
     * @return {Number}
     */
    determinant() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].determinant(this.elements);
    }
    /**
     * Multiplies two matrix3's
     * @param  {Matrix3} a
     * @param  {Matrix3} [b] 如果不传，计算 this 和 a 的乘积
     * @return {Matrix3} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].multiply(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * 左乘
     * @param  {Matrix3} m
     * @return {Matrix3}  this
     */
    premultiply(m) {
        this.multiply(m, this);
        return this;
    }
    /**
     * Translate this by the given vector
     * @param  {Vector2} v vector to translate by
     * @return {Matrix3} this
     */
    translate(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].translate(this.elements, this.elements, v.elements);
        return this;
    }
    /**
     * Rotates this by the given angle
     * @param  {Number} rad the angle to rotate the matrix by
     * @return {Matrix3} this
     */
    rotate(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].rotate(this.elements, this.elements, rad);
        return this;
    }
    /**
     * Scales the mat3 by the dimensions in the given vec2
     * @param  {Vector2} v the vec2 to scale the matrix by
     * @return {Matrix3} this
     */
    scale(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].scale(this.elements, this.elements, v.elements);
        return this;
    }
    /**
     * Creates a matrix from a vector translation
     * @param  {Vector2} v Translation vector
     * @return {Matrix3} this
     */
    fromTranslation(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].fromTranslation(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a matrix from a given angle
     * @param  {Number} rad the angle to rotate the matrix by
     * @return {Matrix3} this
     */
    fromRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].fromRotation(this.elements, rad);
        return this;
    }
    /**
     * Creates a matrix from a vector scaling
     * @param  {Vector2} v Scaling vector
     * @return {Matrix3} this
     */
    fromScaling(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].fromScaling(this.elements, v.elements);
        return this;
    }
    /**
     * Calculates a 3x3 matrix from the given quaternion
     * @param  {Quaternion} q Quaternion to create matrix from
     * @return {Matrix3} this
     */
    fromQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].fromQuat(this.elements, q.elements);
        return this;
    }
    /**
     * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
     * @param  {Matrix4} m Mat4 to derive the normal matrix from
     * @return {Matrix3} this
     */
    normalFromMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].normalFromMat4(this.elements, m.elements);
        return this;
    }
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     * @param  {Matrix4} m the source 4x4 matrix
     * @return {Matrix3} this
     */
    fromMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].fromMat4(this.elements, m.elements);
        return this;
    }
    /**
     * Returns Frobenius norm of this
     * @return {Number} Frobenius norm
     */
    frob() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].frob(this.elements);
    }
    /**
     * Adds two mat3's
     * @param {Matrix3} a
     * @param {Matrix3} [b] 如果不传，计算 this 和 a 的和
     * @return {Marix4} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].add(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Subtracts matrix b from matrix a
     * @param {Matrix3} a
     * @param {Matrix3} [b] 如果不传，计算 this 和 a 的差
     * @return {Marix4} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].subtract(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     * @param {Matrix3} a
     * @param {Matrix3} [b] 如果不传，比较 this 和 a 是否相等
     * @return {Boolean}
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     * @param {Matrix3} a
     * @param {Matrix3} [b] 如果不传，比较 this 和 a 是否近似相等
     * @return {Boolean}
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["mat3"].equals(a.elements, b.elements);
    }
    /**
     * fromRotationTranslationScale
     * @param  {Number} r rad angle
     * @param  {Number} x
     * @param  {Number} y
     * @param  {Number} scaleX
     * @param  {Number} scaleY
     * @return {Matrix3}
     */
    fromRotationTranslationScale(rotation, x, y, scaleX, scaleY) {
        const cos = Math.cos(rotation);
        const sin = Math.sin(rotation);
        this.set(scaleX * cos, -scaleY * sin, 0, scaleX * sin, scaleY * cos, 0, x, y, 1);
        return this;
    }
    sub(a, b) {
        return this.subtract(a, b);
    }
    mul(a, b) {
        return this.multiply(a, b);
    }
}


/***/ }),

/***/ "./src/engine/math/Matrix4.ts":
/*!************************************!*\
  !*** ./src/engine/math/Matrix4.ts ***!
  \************************************/
/*! exports provided: Matrix4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return Matrix4; });
/* harmony import */ var _Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _Quaternion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Quaternion */ "./src/engine/math/Quaternion.ts");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");



let tempMatrix4;
const tempVector3 = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const tempVector32 = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
class Matrix4 {
    /**
* Creates a new identity mat4
* @constructs
*/
    constructor() {
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].create();
    }
    /**
     * Copy the values from one mat4 to this
     * @param  {Matrix4} m the source matrix
     * @return {Matrix4} this
     */
    copy(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].copy(this.elements, m.elements);
        return this;
    }
    /**
     * Creates a new mat4 initialized with values from this matrix
     * @return {Matrix4} a new Matrix4
     */
    clone() {
        const m = new Matrix4();
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].copy(m.elements, this.elements);
        return m;
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const elements = this.elements;
        for (let i = 0; i < 16; i++) {
            array[offset + i] = elements[i];
        }
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Matrix4} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        for (let i = 0; i < 16; i++) {
            elements[i] = array[offset + i];
        }
        return this;
    }
    /**
     * Set the components of a mat3 to the given values
     * @param {Number} m00
     * @param {Number} m01
     * @param {Number} m02
     * @param {Number} m03
     * @param {Number} m10
     * @param {Number} m11
     * @param {Number} m12
     * @param {Number} m13
     * @param {Number} m20
     * @param {Number} m21
     * @param {Number} m22
     * @param {Number} m23
     * @param {Number} m30
     * @param {Number} m31
     * @param {Number} m32
     * @param {Number} m33
     * @return {Matrix4} this
     */
    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(this.elements, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        return this;
    }
    /**
     * Set this to the identity matrix
     * @return {Matrix4} this
     */
    identity() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].identity(this.elements);
        return this;
    }
    /**
     * Transpose the values of this
     * @return {Matrix4} this
     */
    transpose() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].transpose(this.elements, this.elements);
        return this;
    }
    /**
     * invert a matrix
     * @param {Matrix4} [m=this]
     * @return {Matrix4} this
     */
    invert(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].invert(this.elements, m.elements);
        return this;
    }
    /**
     * Calculates the adjugate of a mat4
     * @param {Matrix4} [m=this]
     * @return {Matrix4} this
     */
    adjoint(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].adjoint(this.elements, m.elements);
        return this;
    }
    /**
     * Calculates the determinant of this
     * @return {Matrix4} this
     */
    determinant() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].determinant(this.elements);
    }
    /**
     * Multiplies two matrix4's
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，计算 this 和 a 的乘积
     * @return {Matrix4} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].multiply(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * 左乘
     * @param {Matrix4} m
     * @return {Matrix4} this
     */
    premultiply(m) {
        this.multiply(m, this);
        return this;
    }
    /**
     * Translate this by the given vector
     * @param {Vector3} v vector to translate by
     * @return {Matrix4} this
     */
    translate(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(this.elements, this.elements, v.elements);
        return this;
    }
    /**
     * Scales the mat3 by the dimensions in the given vec2
     * @param {Vector3} v the vec3 to scale the matrix by
     * @return {Matrix4} this
     */
    scale(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(this.elements, this.elements, v.elements);
        return this;
    }
    /**
     * Rotates this by the given angle
     * @param {Number} rad the angle to rotate the matrix by
     * @param {Vector3} axis the axis to rotate around
     * @return {Matrix4} this
     */
    rotate(rad, axis) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(this.elements, this.elements, rad, axis.elements);
        return this;
    }
    /**
     * Rotates this by the given angle around the X axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    rotateX(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotateX(this.elements, this.elements, rad);
        return this;
    }
    /**
     * Rotates this by the given angle around the Y axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    rotateY(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotateY(this.elements, this.elements, rad);
        return this;
    }
    /**
     * Rotates this by the given angle around the Z axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    rotateZ(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotateZ(this.elements, this.elements, rad);
        return this;
    }
    /**
     * Creates a matrix from a vector translation
     * @param {Vector3} transition Translation vector
     * @return {Matrix4} this
     */
    fromTranslation(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromTranslation(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a matrix from a vector scaling
     * @param  {Vector3} v Scaling vector
     * @return {Matrix4} this
     */
    fromScaling(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromScaling(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * @param {Number} rad the angle to rotate the matrix by
     * @param {Vector3} axis the axis to rotate around
     * @return {Matrix4} this
     */
    fromRotation(rad, axis) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromRotation(this.elements, rad, axis.elements);
        return this;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    fromXRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromXRotation(this.elements, rad);
        return this;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    fromYRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromYRotation(this.elements, rad);
        return this;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4} this
     */
    fromZRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromZRotation(this.elements, rad);
        return this;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @return {Matrix4} this
     */
    fromRotationTranslation(q, v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromRotationTranslation(this.elements, q.elements, v.elements);
        return this;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {Vector3} [out=new Vector3] Vector to receive translation component
     * @return {Vector3} out
     */
    getTranslation(out = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].getTranslation(out.elements, this.elements);
        return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {Vector3} [out=new Vector3] Vector to receive scaling factor component
     * @return {Vector3} out
     */
    getScaling(out = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].getScaling(out.elements, this.elements);
        return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {Quaternion} out Quaternion to receive the rotation component
     * @return {Quaternion} out
     */
    getRotation(out = new _Quaternion__WEBPACK_IMPORTED_MODULE_1__["Quaternion"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].getRotation(out.elements, this.elements);
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @param  {Vector3} s Scaling vector
     * @return {Matrix4} this
     */
    fromRotationTranslationScale(q, v, s) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromRotationTranslationScale(this.elements, q.elements, v.elements, s.elements);
        return this;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @param  {Vector3} s Scaling vector
     * @param  {Vector3} o The origin vector around which to scale and rotate
     * @return {Matrix4} this
     */
    fromRotationTranslationScaleOrigin(q, v, s, o) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromRotationTranslationScaleOrigin(this.elements, q.elements, v.elements, s.elements, o.elements);
        return this;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param {Quaternion} q Quaternion to create matrix from
     * @return {Matrix4} this
     */
    fromQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].fromQuat(this.elements, q.elements);
        return this;
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param  {Number} left  Left bound of the frustum
     * @param  {Number} right Right bound of the frustum
     * @param  {Number} bottom Bottom bound of the frustum
     * @param  {Number} top Top bound of the frustum
     * @param  {Number} near Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4} this
     */
    frustum(left, right, bottom, top, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].frustum(this.elements, left, right, bottom, top, near, far);
        return this;
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param {Number} fovy Vertical field of view in radians
     * @param {Number} aspect Aspect ratio. typically viewport width/height
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @return {Matrix4} this
     */
    perspective(fovy, aspect, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].perspective(this.elements, fovy, aspect, near, far);
        return this;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * @param  {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param  {Number} Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4} this
     */
    perspectiveFromFieldOfView(fov, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].perspectiveFromFieldOfView(this.elements, fov, near, far);
        return this;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * @param  {Number} left  Left bound of the frustum
     * @param  {Number} right Right bound of the frustum
     * @param  {Number} bottom Bottom bound of the frustum
     * @param  {Number} top Top bound of the frustum
     * @param  {Number} near Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4} this
     */
    ortho(left, right, bottom, top, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].ortho(this.elements, left, right, bottom, top, near, far);
        return this;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis
     * @param  {XYZObject} eye Position of the viewer
     * @param  {XYZObject} center Point the viewer is looking at
     * @param  {Vector3} up pointing up
     * @return {Matrix4} this
     */
    lookAt(eye, center, up) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].lookAt(this.elements, eye.elements, center.elements, up.elements);
        return this;
    }
    /**
     * Generates a matrix that makes something look at something else.
     * @param  {XYZObject} eye Position of the viewer
     * @param  {XYZObject} Point the viewer is looking at
     * @param  {Vector3} up pointing up
     * @return {Matrix4} this
     */
    targetTo(eyePos, targetPos, upVector) {
        // mat4.targetTo(this.elements, eye.elements, target.elements, up.elements);
        let eye = eyePos.elements;
        let target = targetPos.elements;
        let up = upVector.elements;
        const out = this.elements;
        let eyex = eye[0];
        let eyey = eye[1];
        let eyez = eye[2];
        let upx = up[0];
        let upy = up[1];
        let upz = up[2];
        let z0 = eyex - target[0];
        let z1 = eyey - target[1];
        let z2 = eyez - target[2];
        let len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        else {
            z2 = 1;
        }
        let x0 = upy * z2 - upz * z1;
        let x1 = upz * z0 - upx * z2;
        let x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        else {
            upx += 0.0000001;
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = x0 * x0 + x1 * x1 + x2 * x2;
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        return this;
    }
    /**
     * Returns Frobenius norm of a mat4
     * @return {Number} Frobenius norm
     */
    frob() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].frob(this.elements);
    }
    /**
     * Adds two mat4's
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，计算 this 和 a 的和
     * @return {Marix4} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].add(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Subtracts matrix b from matrix a
     * @param {Matrix4} a
     * @param {Matrix4} [b]  如果不传，计算 this 和 a 的差
     * @return {Marix4} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].subtract(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，比较 this 和 a 是否相等
     * @return {Boolean}
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，比较 this 和 a 是否近似相等
     * @return {Boolean}
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__["mat4"].equals(a.elements, b.elements);
    }
    /**
     * compose
     * @param  {Quaternion} q quaternion
     * @param  {Vector3} v position
     * @param  {Vector3} s scale
     * @param  {Vector3} p [pivot]
     * @return {Matrix4}  this
     */
    compose(q, v, s, p) {
        if (p) {
            this.fromRotationTranslationScaleOrigin(q, v, s, p);
        }
        else {
            this.fromRotationTranslationScale(q, v, s);
        }
        return this;
    }
    /**
     * decompose
     * @param  {Quaternion} q quaternion
     * @param  {Vector3} v position
     * @param  {Vector3} s scale
     * @param  {Vector3} p [pivot]
     * @return {Matrix4}  this
     */
    decompose(q, v, s, p) {
        this.getScaling(s);
        this.getTranslation(v);
        if (!tempMatrix4) {
            tempMatrix4 = new Matrix4();
        }
        const det = this.determinant();
        if (det < 0)
            s.x *= -1;
        tempMatrix4.copy(this);
        tempVector3.inverse(s);
        tempMatrix4.scale(tempVector3);
        q.fromMat4(tempMatrix4);
        if (p) {
            p.set(0, 0, 0);
        }
        return this;
    }
}


/***/ }),

/***/ "./src/engine/math/Matrix4Notifier.ts":
/*!********************************************!*\
  !*** ./src/engine/math/Matrix4Notifier.ts ***!
  \********************************************/
/*! exports provided: Matrix4Notifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4Notifier", function() { return Matrix4Notifier; });
/* harmony import */ var _Matrix4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _Vector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _Quaternion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Quaternion */ "./src/engine/math/Quaternion.ts");
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");





let tempMatrix4;
const tempVector3 = new _Vector3__WEBPACK_IMPORTED_MODULE_2__["Vector3"]();
const tempVector32 = new _Vector3__WEBPACK_IMPORTED_MODULE_2__["Vector3"]();
class Matrix4Notifier extends _event_EventObject__WEBPACK_IMPORTED_MODULE_4__["EventObject"] {
    constructor() {
        super();
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].create();
    }
    /**
   * Copy the values from one mat4 to this
   * @param  {Matrix4} m the source matrix
   * @return {Matrix4Notifier} this
   */
    copy(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].copy(this.elements, m.elements);
        this.fire('update');
        return this;
    }
    /**
    * 从数组赋值
    * @param  {Array} array  数组
    * @param  {Number} [offset=0] 数组偏移值
    * @return {Matrix4Notifier} this
    */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        for (let i = 0; i < 16; i++) {
            elements[i] = array[offset + i];
        }
        this.fire('update');
        return this;
    }
    /**
    * Set the components of a mat3 to the given values
    * @param {Number} m00
    * @param {Number} m01
    * @param {Number} m02
    * @param {Number} m03
    * @param {Number} m10
    * @param {Number} m11
    * @param {Number} m12
    * @param {Number} m13
    * @param {Number} m20
    * @param {Number} m21
    * @param {Number} m22
    * @param {Number} m23
    * @param {Number} m30
    * @param {Number} m31
    * @param {Number} m32
    * @param {Number} m33
    * @return {Matrix4Notifier} this
    */
    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].set(this.elements, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        this.fire('update');
        return this;
    }
    /**
     * Set this to the identity matrix
     * @return {Matrix4Notifier} this
     */
    identity() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].identity(this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Transpose the values of this
     * @return {Matrix4Notifier} this
     */
    transpose() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].transpose(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * invert a matrix
     * @param {Matrix4} [m=this]
     * @return {Matrix4Notifier} this
     */
    invert(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].invert(this.elements, m.elements);
        this.fire('update');
        return this;
    }
    /**
     * Calculates the adjugate of a mat4
     * @param {Matrix4} [m=this]
     * @return {Matrix4Notifier} this
     */
    adjoint(m = this) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].adjoint(this.elements, m.elements);
        this.fire('update');
        return this;
    }
    /**
     * Calculates the determinant of this
     * @return {Matrix4Notifier} this
     */
    determinant() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].determinant(this.elements);
    }
    /**
     * Multiplies two matrix4's
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，计算 this 和 a 的乘积
     * @return {Matrix4Notifier} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].multiply(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * 左乘
     * @param {Matrix4} m
     * @return {Matrix4Notifier} this
     */
    premultiply(m) {
        this.multiply(m, this);
        this.fire('update');
        return this;
    }
    /**
     * Translate this by the given vector
     * @param {Vector3} v vector to translate by
     * @return {Matrix4Notifier} this
     */
    translate(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].translate(this.elements, this.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
   * Scales the mat3 by the dimensions in the given vec2
   * @param {Vector3} v the vec3 to scale the matrix by
   * @return {Matrix4Notifier} this
   */
    scale(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].scale(this.elements, this.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
    * Rotates this by the given angle
    * @param {Number} rad the angle to rotate the matrix by
    * @param {Vector3} axis the axis to rotate around
    * @return {Matrix4Notifier} this
    */
    rotate(rad, axis) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotate(this.elements, this.elements, rad, axis.elements);
        this.fire('update');
        return this;
    }
    /**
    * Rotates this by the given angle around the X axis
    * @param {Number} rad the angle to rotate the matrix by
    * @return {Matrix4Notifier} this
    */
    rotateX(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotateX(this.elements, this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Rotates this by the given angle around the Y axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4Notifier} this
     */
    rotateY(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotateY(this.elements, this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Rotates this by the given angle around the Z axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4Notifier} this
     */
    rotateZ(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotateZ(this.elements, this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from a vector translation
     * @param {Vector3} transition Translation vector
     * @return {Matrix4Notifier} this
     */
    fromTranslation(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromTranslation(this.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from a vector scaling
     * @param  {Vector3} v Scaling vector
     * @return {Matrix4Notifier} this
     */
    fromScaling(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromScaling(this.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * @param {Number} rad the angle to rotate the matrix by
     * @param {Vector3} axis the axis to rotate around
     * @return {Matrix4Notifier} this
     */
    fromRotation(rad, axis) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromRotation(this.elements, rad, axis.elements);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4Notifier} this
     */
    fromXRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromXRotation(this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4Notifier} this
     */
    fromYRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromYRotation(this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * @param {Number} rad the angle to rotate the matrix by
     * @return {Matrix4Notifier} this
     */
    fromZRotation(rad) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromZRotation(this.elements, rad);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @return {Matrix4Notifier} this
     */
    fromRotationTranslation(q, v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromRotationTranslation(this.elements, q.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {Vector3} [out=new Vector3] Vector to receive translation component
     * @return {Vector3} out
     */
    getTranslation(out = new _Vector3__WEBPACK_IMPORTED_MODULE_2__["Vector3"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].getTranslation(out.elements, this.elements);
        return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {Vector3} [out=new Vector3] Vector to receive scaling factor component
     * @return {Vector3} out
     */
    getScaling(out = new _Vector3__WEBPACK_IMPORTED_MODULE_2__["Vector3"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].getScaling(out.elements, this.elements);
        return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {Quaternion} out Quaternion to receive the rotation component
     * @return {Quaternion} out
     */
    getRotation(out = new _Quaternion__WEBPACK_IMPORTED_MODULE_3__["Quaternion"]()) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].getRotation(out.elements, this.elements);
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @param  {Vector3} s Scaling vector
     * @return {Matrix4Notifier} this
     */
    fromRotationTranslationScale(q, v, s) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromRotationTranslationScale(this.elements, q.elements, v.elements, s.elements);
        this.fire('update');
        return this;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * @param  {Quaternion} q Rotation quaternion
     * @param  {Vector3} v Translation vector
     * @param  {Vector3} s Scaling vector
     * @param  {Vector3} o The origin vector around which to scale and rotate
     * @param  {Boolean} [dontFireEvent=false] dontFireEvent
     * @return {Matrix4Notifier} this
     */
    fromRotationTranslationScaleOrigin(q, v, s, o, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromRotationTranslationScaleOrigin(this.elements, q.elements, v.elements, s.elements, o.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     * @param {Quaternion} q Quaternion to create matrix from
     * @return {Matrix4Notifier} this
     */
    fromQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].fromQuat(this.elements, q.elements);
        this.fire('update');
        return this;
    }
    /**
     * Generates a frustum matrix with the given bounds
     * @param  {Number} left  Left bound of the frustum
     * @param  {Number} right Right bound of the frustum
     * @param  {Number} bottom Bottom bound of the frustum
     * @param  {Number} top Top bound of the frustum
     * @param  {Number} near Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4Notifier} this
     */
    frustum(left, right, bottom, top, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].frustum(this.elements, left, right, bottom, top, near, far);
        this.fire('update');
        return this;
    }
    /**
     * Generates a perspective projection matrix with the given bounds
     * @param {Number} fovy Vertical field of view in radians
     * @param {Number} aspect Aspect ratio. typically viewport width/height
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @return {Matrix4Notifier} this
     */
    perspective(fovy, aspect, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].perspective(this.elements, fovy, aspect, near, far);
        this.fire('update');
        return this;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * @param  {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param  {Number} Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4Notifier} this
     */
    perspectiveFromFieldOfView(fov, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].perspectiveFromFieldOfView(this.elements, fov, near, far);
        this.fire('update');
        return this;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     * @param  {Number} left  Left bound of the frustum
     * @param  {Number} right Right bound of the frustum
     * @param  {Number} bottom Bottom bound of the frustum
     * @param  {Number} top Top bound of the frustum
     * @param  {Number} near Near bound of the frustum
     * @param  {Number} far Far bound of the frustum
     * @return {Matrix4Notifier} this
     */
    ortho(left, right, bottom, top, near, far) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].ortho(this.elements, left, right, bottom, top, near, far);
        this.fire('update');
        return this;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis
     * @param  {XYZObject} eye Position of the viewer
     * @param  {XYZObject} center Point the viewer is looking at
     * @param  {Vector3} up pointing up
     * @return {Matrix4Notifier} this
     */
    lookAt(eye, center, up) {
        if (!eye.isVector3) {
            eye = tempVector3.set(eye.x, eye.y, eye.z);
        }
        if (!center.isVector3) {
            center = tempVector32.set(center.x, center.y, center.z);
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].lookAt(this.elements, eye.elements, center.elements, up.elements);
        this.fire('update');
        return this;
    }
    /**
     * Generates a matrix that makes something look at something else.
     * @param  {XYZObject} eye Position of the viewer
     * @param  {XYZObject} Point the viewer is looking at
     * @param  {Vector3} up pointing up
     * @return {Matrix4Notifier} this
     */
    targetTo(eye, target, up) {
        if (!eye.isVector3) {
            eye = tempVector3.set(eye.x, eye.y, eye.z);
        }
        if (!target.isVector3) {
            target = tempVector32.set(target.x, target.y, target.z);
        }
        // mat4.targetTo(this.elements, eye.elements, target.elements, up.elements);
        eye = eye.elements;
        target = target.elements;
        up = up.elements;
        const out = this.elements;
        let eyex = eye[0];
        let eyey = eye[1];
        let eyez = eye[2];
        let upx = up[0];
        let upy = up[1];
        let upz = up[2];
        let z0 = eyex - target[0];
        let z1 = eyey - target[1];
        let z2 = eyez - target[2];
        let len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        else {
            z2 = 1;
        }
        let x0 = upy * z2 - upz * z1;
        let x1 = upz * z0 - upx * z2;
        let x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        else {
            upx += 0.0000001;
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = x0 * x0 + x1 * x1 + x2 * x2;
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        this.fire('update');
        return this;
    }
    /**
     * Returns Frobenius norm of a mat4
     * @return {Number} Frobenius norm
     */
    frob() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].frob(this.elements);
    }
    /**
     * Adds two mat4's
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，计算 this 和 a 的和
     * @return {Marix4} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].add(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Subtracts matrix b from matrix a
     * @param {Matrix4} a
     * @param {Matrix4} [b]  如果不传，计算 this 和 a 的差
     * @return {Marix4} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].subtract(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，比较 this 和 a 是否相等
     * @return {Boolean}
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     * @param {Matrix4} a
     * @param {Matrix4} [b] 如果不传，比较 this 和 a 是否近似相等
     * @return {Boolean}
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["mat4"].equals(a.elements, b.elements);
    }
    /**
     * compose
     * @param  {Quaternion} q quaternion
     * @param  {Vector3} v position
     * @param  {Vector3} s scale
     * @param  {Vector3} p [pivot]
     * @return {Matrix4Notifier}  this
     */
    compose(q, v, s, p) {
        if (p) {
            this.fromRotationTranslationScaleOrigin(q, v, s, p);
        }
        else {
            this.fromRotationTranslationScale(q, v, s);
        }
        return this;
    }
    /**
     * decompose
     * @param  {Quaternion} q quaternion
     * @param  {Vector3} v position
     * @param  {Vector3} s scale
     * @param  {Vector3} p [pivot]
     * @return {Matrix4Notifier}  this
     */
    decompose(q, v, s, p) {
        this.getScaling(s);
        this.getTranslation(v);
        if (!tempMatrix4) {
            tempMatrix4 = new _Matrix4__WEBPACK_IMPORTED_MODULE_0__["Matrix4"]();
        }
        const det = this.determinant();
        if (det < 0)
            s.x *= -1;
        tempMatrix4.copy(this);
        tempVector3.inverse(s);
        tempMatrix4.scale(tempVector3);
        q.fromMat4(tempMatrix4);
        if (p) {
            p.set(0, 0, 0);
        }
        return this;
    }
}


/***/ }),

/***/ "./src/engine/math/Quaternion.ts":
/*!***************************************!*\
  !*** ./src/engine/math/Quaternion.ts ***!
  \***************************************/
/*! exports provided: Quaternion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return Quaternion; });
/* harmony import */ var _Matrix3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix3 */ "./src/engine/math/Matrix3.ts");
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _Vector3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");




const tempMat3 = new _Matrix3__WEBPACK_IMPORTED_MODULE_0__["Matrix3"]();
const tempVec3 = new _Vector3__WEBPACK_IMPORTED_MODULE_2__["Vector3"]();
class Quaternion extends _event_EventObject__WEBPACK_IMPORTED_MODULE_3__["EventObject"] {
    /**
      * Creates a new identity quat
      * @constructs
      * @param  {Number} [x=0] X component
      * @param  {Number} [y=0] Y component
      * @param  {Number} [z=0] Z component
      * @param  {Number} [w=1] W component
      */
    constructor(x = 0, y = 0, z = 0, w = 1) {
        super();
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].fromValues(x, y, z, w);
    }
    /**
     * Copy the values from one quat to this
     * @param  {Quaternion} q
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    copy(q, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].copy(this.elements, q.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     * @return {Quaternion} a new quaternion
     */
    clone() {
        const el = this.elements;
        return new Quaternion(el[0], el[1], el[2], el[3]);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const el = this.elements;
        array[offset] = el[0];
        array[offset + 1] = el[1];
        array[offset + 2] = el[2];
        array[offset + 3] = el[3];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @param {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    fromArray(array, offset = 0, dontFireEvent) {
        const el = this.elements;
        el[0] = array[offset];
        el[1] = array[offset + 1];
        el[2] = array[offset + 2];
        el[3] = array[offset + 3];
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Set the components of a quat to the given values
     * @param {Number} x  X component
     * @param {Number} y  Y component
     * @param {Number} z  Z component
     * @param {Number} w  W component
     * @param {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    set(x, y, z, w, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].set(this.elements, x, y, z, w);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Set this to the identity quaternion
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    identity(dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].identity(this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     * @param  {Vector3} a the initial vector
     * @param  {Vector3} b the destination vector
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    rotationTo(a, b, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].rotationTo(this.elements, a.elements, b.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {Vector3} view  the vector representing the viewing direction
     * @param {Vector3} right the vector representing the local "right" direction
     * @param {Vector3} up    the vector representing the local "up" direction
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    setAxes(view, right, up, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].setAxes(this.elements, view.elements, right.elements, up.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     * @param {Vector3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @param {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    setAxisAngle(axis, rad, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].setAxisAngle(this.elements, axis.elements, rad);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {Vector3} out_axis  Vector receiving the axis of rotation
     * @return {Number} Angle, in radians, of the rotation
     */
    getAxisAngle(axis) {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].getAxisAngle(axis.elements, this.elements);
    }
    /**
     * Adds two quat's
     * @param {Quaternion} q
     * @param {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    add(q, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].add(this.elements, this.elements, q.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Multiplies two quat's
     * @param  {Quaternion} q
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    multiply(q, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].multiply(this.elements, this.elements, q.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * premultiply the quat
     * @param  {Quaternion} q
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    premultiply(q, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].multiply(this.elements, q.elements, this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Scales a quat by a scalar number
     * @param  {Vector3} scale the vector to scale
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    scale(scale, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].scale(this.elements, this.elements, scale);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     * @param  {Number} rad angle (in radians) to rotate
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    rotateX(rad, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].rotateX(this.elements, this.elements, rad);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     * @param  {Number} rad angle (in radians) to rotate
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    rotateY(rad, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].rotateY(this.elements, this.elements, rad);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     * @param  {Number} rad angle (in radians) to rotate
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    rotateZ(rad, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].rotateZ(this.elements, this.elements, rad);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @returns {Quaternion} this
     */
    calculateW(dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].calculateW(this.elements, this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates the dot product of two quat's
     * @param  {Quaternion} q
     * @return {Number} dot product of two quat's
     */
    dot(q) {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].dot(this.elements, q.elements);
    }
    /**
     * Performs a linear interpolation between two quat's
     * @param  {Quaternion} q
     * @param  {Number} t interpolation amount between the two inputs
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    lerp(q, t, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].lerp(this.elements, this.elements, q.elements, t);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     * @param  {Quaternion} q
     * @param  {Number} t interpolation amount between the two inputs
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    slerp(q, t, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].slerp(this.elements, this.elements, q.elements, t);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Performs a spherical linear interpolation with two control points
     * @param  {Quaternion} qa
     * @param  {Quaternion} qb
     * @param  {Quaternion} qc
     * @param  {Quaternion} qd
     * @param  {Number} t interpolation amount
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    sqlerp(qa, qb, qc, qd, t, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].sqlerp(this.elements, qa.elements, qb.elements, qc.elements, qd.elements, t);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates the inverse of a quat
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    invert(dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].invert(this.elements, this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    conjugate(dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].conjugate(this.elements, this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Calculates the length of a quat
     * @return {Number} length of this
     */
    length() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].length(this.elements);
    }
    /**
     * Calculates the squared length of a quat
     * @return {Number} squared length of this
     */
    squaredLength() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].squaredLength(this.elements);
    }
    /**
     * Normalize this
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    normalize(dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].normalize(this.elements, this.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {Matrix3} m rotation matrix
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    fromMat3(mat, dontFireEvent) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].fromMat3(this.elements, mat.elements);
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {Matrix4} m rotation matrix
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    fromMat4(mat, dontFireEvent) {
        tempMat3.fromMat4(mat);
        this.fromMat3(tempMat3, dontFireEvent);
        return this;
    }
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     * @param  {Quaternion} q
     * @return {Boolean}
     */
    exactEquals(q) {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].exactEquals(this.elements, q.elements);
    }
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     * @param  {Quaternion} q
     * @return {Boolean}
     */
    equals(q) {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__["quat"].equals(this.elements, q.elements);
    }
    /**
     * Creates a quaternion from the given euler.
     * @param  {Euler} euler
     * @param  {Boolean} [dontFireEvent=false] wether or not don`t fire change event.
     * @return {Quaternion} this
     */
    fromEuler(euler, dontFireEvent) {
        // Based on https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L200
        // quat.fromEuler(this.elements, euler.x, euler.y, euler.z);
        const x = euler.x * .5;
        const y = euler.y * .5;
        const z = euler.z * .5;
        const order = euler.order || 'ZYX';
        let sx = Math.sin(x);
        let cx = Math.cos(x);
        let sy = Math.sin(y);
        let cy = Math.cos(y);
        let sz = Math.sin(z);
        let cz = Math.cos(z);
        const out = this.elements;
        if (order === 'XYZ') {
            out[0] = sx * cy * cz + cx * sy * sz;
            out[1] = cx * sy * cz - sx * cy * sz;
            out[2] = cx * cy * sz + sx * sy * cz;
            out[3] = cx * cy * cz - sx * sy * sz;
        }
        else if (order === 'YXZ') {
            out[0] = sx * cy * cz + cx * sy * sz;
            out[1] = cx * sy * cz - sx * cy * sz;
            out[2] = cx * cy * sz - sx * sy * cz;
            out[3] = cx * cy * cz + sx * sy * sz;
        }
        else if (order === 'ZXY') {
            out[0] = sx * cy * cz - cx * sy * sz;
            out[1] = cx * sy * cz + sx * cy * sz;
            out[2] = cx * cy * sz + sx * sy * cz;
            out[3] = cx * cy * cz - sx * sy * sz;
        }
        else if (order === 'ZYX') {
            out[0] = sx * cy * cz - cx * sy * sz;
            out[1] = cx * sy * cz + sx * cy * sz;
            out[2] = cx * cy * sz - sx * sy * cz;
            out[3] = cx * cy * cz + sx * sy * sz;
        }
        else if (order === 'YZX') {
            out[0] = sx * cy * cz + cx * sy * sz;
            out[1] = cx * sy * cz + sx * cy * sz;
            out[2] = cx * cy * sz - sx * sy * cz;
            out[3] = cx * cy * cz - sx * sy * sz;
        }
        else if (order === 'XZY') {
            out[0] = sx * cy * cz - cx * sy * sz;
            out[1] = cx * sy * cz - sx * cy * sz;
            out[2] = cx * cy * sz + sx * sy * cz;
            out[3] = cx * cy * cz + sx * sy * sz;
        }
        if (!dontFireEvent) {
            this.fire('update');
        }
        return this;
    }
    /**
     * X component
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
        this.fire('update');
    }
    /**
     * Y component
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
        this.fire('update');
    }
    /**
     * Z component
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
        this.fire('update');
    }
    /**
    * W component
    * @type {Number}
    */
    get w() {
        return this.elements[3];
    }
    set w(value) {
        this.elements[3] = value;
        this.fire('update');
    }
    mul(a, b) {
        return this.multiply(a, b);
    }
    mulVec3(r) {
        let w_ = -this.x * r.x - this.y * r.y - this.z * r.z;
        let x_ = this.w * r.x + this.y * r.z - this.z * r.y;
        let y_ = this.w * r.y + this.z * r.x - this.x * r.z;
        let z_ = this.w * r.z + this.x * r.y - this.y * r.x;
        return new Quaternion(x_, y_, z_, w_);
    }
    len() {
        return this.length();
    }
    sqrLen() {
        return this.squaredLength();
    }
    getForward() {
        return tempVec3.set(0, 0, 1).rotate(this);
    }
    getBack() {
        return tempVec3.set(0, 0, -1).rotate(this);
    }
    getUp() {
        return tempVec3.set(0, 1, 0).rotate(this);
    }
    getDown() {
        return tempVec3.set(0, -1, 0).rotate(this);
    }
    getRight() {
        return tempVec3.set(1, 0, 0).rotate(this);
    }
    getLeft() {
        return tempVec3.set(-1, 0, 0).rotate(this);
    }
}


/***/ }),

/***/ "./src/engine/math/Sphere.ts":
/*!***********************************!*\
  !*** ./src/engine/math/Sphere.ts ***!
  \***********************************/
/*! exports provided: Sphere */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sphere", function() { return Sphere; });
/* harmony import */ var _Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3 */ "./src/engine/math/Vector3.ts");

const tempVector3 = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
class Sphere {
    /**
     * @constructs
     * @param {object} params 初始化参数，所有params都会复制到实例上
     */
    constructor(params) {
        /**
         * 半径
         * @type {Number}
         * @default 0
         */
        this.radius = 0;
        Object.assign(this, params);
        if (!this.center) {
            this.center = new _Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"](0, 0, 0);
        }
    }
    /**
     * 克隆
     * @return {Sphere}
     */
    clone() {
        const sphere = new Sphere();
        sphere.copy(this);
        return sphere;
    }
    /**
     * 复制
     * @param  {Sphere} sphere
     * @return {Sphere} this
     */
    copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
    }
    /**
     * 从点生成
     * @param  {Array} points
     * @return {Sphere} this
     */
    fromPoints(points) {
        let center = this.center;
        let maxSquaredRadius = 0;
        for (let i = 0; i < points.length; i += 3) {
            let x = points[i] - center.x;
            let y = points[i + 1] - center.y;
            let z = points[i + 2] - center.z;
            maxSquaredRadius = Math.max(x * x + y * y + z * z, maxSquaredRadius);
        }
        this.radius = Math.sqrt(maxSquaredRadius);
        return this;
    }
    /**
    * 从点生成
    * @param  {GeometryData} geometryData
    * @return {Sphere} this
    */
    fromGeometryData(geometryData) {
        let center = this.center;
        let maxSquaredRadius = 0;
        geometryData.traverse((vertexData) => {
            let x = vertexData.x - center.x;
            let y = vertexData.y - center.y;
            let z = vertexData.z - center.z;
            maxSquaredRadius = Math.max(x * x + y * y + z * z, maxSquaredRadius);
        });
        this.radius = Math.sqrt(maxSquaredRadius);
        return this;
    }
    /**
     * transformMat4
     * @param  {Matrix4} mat4
     * @return {Sphere} this
     */
    transformMat4(mat4) {
        this.center.transformMat4(mat4);
        const scale = mat4.getScaling(tempVector3);
        this.radius *= Math.max(scale.x, scale.y, scale.z);
        return this;
    }
}


/***/ }),

/***/ "./src/engine/math/Utils.ts":
/*!**********************************!*\
  !*** ./src/engine/math/Utils.ts ***!
  \**********************************/
/*! exports provided: EPSILON, Utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EPSILON", function() { return EPSILON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Utils", function() { return Utils; });
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");

const EPSILON = 0.000001;
const { BYTE, UNSIGNED_BYTE, SHORT, UNSIGNED_SHORT, UNSIGNED_INT, FLOAT } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"];
class Utils {
    static each(obj, fn) {
        if (!obj) {
            return;
        }
        if (Array.isArray(obj)) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach((key) => {
                fn(obj[key], key);
            });
        }
    }
    static copyArrayData(destArr, srcArr, destIdx, srcIdx, count) {
        if (!destArr || !srcArr) {
            return;
        }
        if (srcArr.isGeometryData) {
            srcArr = srcArr.data;
        }
        for (let i = 0; i < count; i++) {
            destArr[destIdx + i] = srcArr[srcIdx + i];
        }
    }
    static hasOwnProperty(obj, name) {
        return Object.prototype.hasOwnProperty.call(obj, name);
    }
    static getElementRect(elem) {
        const docElem = document.documentElement;
        let bounds;
        try {
            // this fails if it's a disconnected DOM node
            bounds = elem.getBoundingClientRect();
        }
        catch (e) {
            bounds = {
                top: elem.offsetTop,
                left: elem.offsetLeft,
                right: elem.offsetLeft + elem.offsetWidth,
                bottom: elem.offsetTop + elem.offsetHeight
            };
        }
        const offsetX = ((window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)) || 0;
        const offsetY = ((window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0)) || 0;
        const styles = window.getComputedStyle ? getComputedStyle(elem) : elem['currentStyle'];
        const parseIntFn = parseInt;
        const padLeft = (parseIntFn(styles.paddingLeft) + parseIntFn(styles.borderLeftWidth)) || 0;
        const padTop = (parseIntFn(styles.paddingTop) + parseIntFn(styles.borderTopWidth)) || 0;
        const padRight = (parseIntFn(styles.paddingRight) + parseIntFn(styles.borderRightWidth)) || 0;
        const padBottom = (parseIntFn(styles.paddingBottom) + parseIntFn(styles.borderBottomWidth)) || 0;
        const top = bounds.top || 0;
        const left = bounds.left || 0;
        const right = bounds.right || 0;
        const bottom = bounds.bottom || 0;
        return {
            left: left + offsetX + padLeft,
            top: top + offsetY + padTop,
            width: right - padRight - left - padLeft,
            height: bottom - padBottom - top - padTop
        };
    }
    static padLeft(str, len, char) {
        if (len <= str.length) {
            return str;
        }
        return new Array(len - str.length + 1).join(char || '0') + str;
    }
    static getTypedArrayGLType(array) {
        if (array instanceof Float32Array) {
            return FLOAT;
        }
        if (array instanceof Int8Array) {
            return BYTE;
        }
        if (array instanceof Uint8Array) {
            return UNSIGNED_BYTE;
        }
        if (array instanceof Int16Array) {
            return SHORT;
        }
        if (array instanceof Uint16Array) {
            return UNSIGNED_SHORT;
        }
        if (array instanceof Uint32Array) {
            return UNSIGNED_INT;
        }
        return FLOAT;
    }
    static getTypedArrayClass(type) {
        const TypedArrayClassMap = {
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].BYTE]: Int8Array,
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].UNSIGNED_BYTE]: Uint8Array,
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].SHORT]: Int16Array,
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].UNSIGNED_SHORT]: Uint16Array,
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].UNSIGNED_INT]: Uint32Array,
            [_constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"].FLOAT]: Float32Array
        };
        return TypedArrayClassMap[type] || Float32Array;
    }
}


/***/ }),

/***/ "./src/engine/math/Vector2.ts":
/*!************************************!*\
  !*** ./src/engine/math/Vector2.ts ***!
  \************************************/
/*! exports provided: Vector2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector2", function() { return Vector2; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");

class Vector2 {
    /**
      * Creates a new empty vec2
      * @param {Number} [x=0] X component
      * @param {Number} [y=0] Y component
      * @constructs
      */
    constructor(x = 0, y = 0) {
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].fromValues(x, y);
    }
    /**
     * Copy the values from one vec2 to this
     * @param  {Vector2} m the source vector
     * @return {Vector2} this
     */
    copy(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].copy(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a new vec2 initialized with values from this vector
     * @return {Vector2} a new Vector2
     */
    clone() {
        const elements = this.elements;
        return new Vector2(elements[0], elements[1]);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const elements = this.elements;
        array[0 + offset] = elements[0];
        array[1 + offset] = elements[1];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Vector2} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        elements[0] = array[offset + 0];
        elements[1] = array[offset + 1];
        return this;
    }
    /**
     * Set the components of a vec4 to the given values
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {Vector2} this
     */
    set(x, y) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].set(this.elements, x, y);
        return this;
    }
    /**
     * Adds two vec2's
     * @param {Vector2} a
     * @param {Vector2} [b] 如果不传，计算 this 和 a 的和
     * @returns {Vector2} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].add(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Subtracts vector b from vector a
     * @param {Vector2} a
     * @param {Vector2} [b] 如果不传，计算 this 和 a 的差
     * @returns {Vector2} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].subtract(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Multiplies two vec2's
     * @param {Vector2} a
     * @param {Vector2} [b] 如果不传，计算 this 和 a 的积
     * @returns {Vector2} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].multiply(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Divides two vec2's
     * @param {Vector2} a
     * @param {Vector2} [b] 如果不传，计算 this 和 a 的商
     * @returns {Vector2} this
     */
    divide(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].divide(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.ceil the components of this
     * @returns {Vector2} this
     */
    ceil() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].ceil(this.elements, this.elements);
        return this;
    }
    /**
     * Math.floor the components of this
     * @returns {Vector2} this
     */
    floor() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].floor(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the minimum of two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector2} this
     */
    min(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].min(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Returns the maximum of two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b]  如果不传，计算 this 和 a 的结果
     * @returns {Vector2} this
     */
    max(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].max(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.round the components of this
     * @returns {Vector2} this
     */
    round() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].round(this.elements, this.elements);
        return this;
    }
    /**
     * Scales this by a scalar number
     * @param  {Number} scale amount to scale the vector by
     * @returns {Vector2} this
     */
    scale(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].scale(this.elements, this.elements, scale);
        return this;
    }
    /**
     * Adds two vec2's after scaling the second vector by a scalar value
     * @param  {Number} scale the amount to scale the second vector by before adding
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector2} this
     */
    scaleAndAdd(scale, a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].scaleAndAdd(this.elements, a.elements, b.elements, scale);
        return this;
    }
    /**
     * Calculates the euclidian distance between two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} distance between a and b
     */
    distance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].distance(a.elements, b.elements);
    }
    /**
     * Calculates the squared euclidian distance between two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} squared distance between a and b
     */
    squaredDistance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].squaredDistance(a.elements, b.elements);
    }
    /**
     * Calculates the length of this
     * @return {Number} length of this
     */
    length() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].length(this.elements);
    }
    /**
     * Calculates the squared length of this
     * @return {Number} squared length of this
     */
    squaredLength() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].squaredLength(this.elements);
    }
    /**
     * Negates the components of this
     * @returns {Vector2} this
     */
    negate() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].negate(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the inverse of the components of a vec2
     * @param  {Vector2} [a=this]
     * @returns {Vector2} this
     */
    inverse(a) {
        if (!a) {
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].inverse(this.elements, a.elements);
        return this;
    }
    /**
     * Normalize this
     * @returns {Vector2} this
     */
    normalize() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].normalize(this.elements, this.elements);
        return this;
    }
    /**
     * Calculates the dot product of two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  product of a and b
     */
    dot(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].dot(a.elements, b.elements);
    }
    /**
     * Computes the cross product of two vec2's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  cross product of a and b
     */
    cross(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].cross(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Performs a linear interpolation between two vec2's
     * @param  {Vector2} v
     * @param  {Number} t interpolation amount between the two vectors
     * @returns {Vector2} this
     */
    lerp(v, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].lerp(this.elements, this.elements, v.elements, t);
        return this;
    }
    /**
     * Generates a random vector with the given scale
     * @param  {Number} [scale=1] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {Vector2} this
     */
    random(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].random(this.elements, scale);
        return this;
    }
    /**
     * Transforms the vec2 with a mat3
     * @param  {Matrix3} m matrix to transform with
     * @returns {Vector2} this
     */
    transformMat3(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].transformMat3(this.elements, this.elements, m.elements);
        return this;
    }
    /**
     * Transforms the vec2 with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector2} this
     */
    transformMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].transformMat4(this.elements, this.elements, m.elements);
        return this;
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec2"].equals(a.elements, b.elements);
    }
    /**
     * X component
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
    }
    /**
     * Y component
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
    }
    sub(a, b) {
        return this.subtract(a, b);
    }
    mul(a, b) {
        return this.multiply(a, b);
    }
    div(a, b) {
        return this.divide(a, b);
    }
    dist(a, b) {
        return this.distance(a, b);
    }
    sqrDist(a, b) {
        return this.squaredDistance(a, b);
    }
    len() {
        return this.length();
    }
    sqrLen(a, b) {
        return this.squaredLength();
    }
}


/***/ }),

/***/ "./src/engine/math/Vector3.ts":
/*!************************************!*\
  !*** ./src/engine/math/Vector3.ts ***!
  \************************************/
/*! exports provided: Vector3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return Vector3; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");

class Vector3 {
    /**
     * Creates a new empty vec3
     * @param {Number} [x=0] X component
     * @param {Number} [y=0] Y component
     * @param {Number} [z=0] Z component
     * @constructs
     */
    constructor(x = 0, y = 0, z = 0) {
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(x, y, z);
    }
    /**
     * Copy the values from one vec3 to this
     * @param  {Vector3} m the source vector
     * @return {Vector3} this
     */
    copy(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].copy(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a new vec3 initialized with values from this vec3
     * @return {Vector3} a new Vector3
     */
    clone() {
        const elements = this.elements;
        return new Vector3(elements[0], elements[1], elements[2]);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const elements = this.elements;
        array[0 + offset] = elements[0];
        array[1 + offset] = elements[1];
        array[2 + offset] = elements[2];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Vector3} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        elements[0] = array[offset + 0];
        elements[1] = array[offset + 1];
        elements[2] = array[offset + 2];
        return this;
    }
    /**
     * Set the components of a vec3 to the given values
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {Vector3} this
     */
    set(x, y, z) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].set(this.elements, x, y, z);
        return this;
    }
    /**
     * Adds two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的和
     * @returns {Vector3} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].add(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Subtracts vector b from vector a
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的差
     * @returns {Vector3} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].subtract(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Multiplies two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的积
     * @returns {Vector3} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].multiply(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Divides two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的商
     * @returns {Vector3} this
     */
    divide(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].divide(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.ceil the components of this
     * @returns {Vector3} this
     */
    ceil() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].ceil(this.elements, this.elements);
        return this;
    }
    /**
     * Math.floor the components of this
     * @returns {Vector3} this
     */
    floor() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].floor(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the minimum of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector3} this
     */
    min(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].min(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Returns the maximum of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b]  如果不传，计算 this 和 a 的结果
     * @returns {Vector3} this
     */
    max(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].max(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.round the components of this
     * @returns {Vector3} this
     */
    round() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].round(this.elements, this.elements);
        return this;
    }
    /**
     * Scales this by a scalar number
     * @param  {Number} scale amount to scale the vector by
     * @returns {Vector3} this
     */
    scale(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].scale(this.elements, this.elements, scale);
        return this;
    }
    /**
     * Adds two vec3's after scaling the second vector by a scalar value
     * @param  {Number} scale the amount to scale the second vector by before adding
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector3} this
     */
    scaleAndAdd(scale, a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].scaleAndAdd(this.elements, a.elements, b.elements, scale);
        return this;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} distance between a and b
     */
    distance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].distance(a.elements, b.elements);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} squared distance between a and b
     */
    squaredDistance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].squaredDistance(a.elements, b.elements);
    }
    /**
     * Calculates the length of this
     * @return {Number} length of this
     */
    length() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].length(this.elements);
    }
    /**
     * Calculates the squared length of this
     * @return {Number} squared length of this
     */
    squaredLength() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].squaredLength(this.elements);
    }
    /**
     * Negates the components of this
     * @returns {Vector3} this
     */
    negate() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].negate(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the inverse of the components of a vec3
     * @param  {Vector3} [a=this]
     * @returns {Vector3} this
     */
    inverse(a) {
        if (!a) {
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].inverse(this.elements, a.elements);
        return this;
    }
    /**
     * Normalize this
     * @returns {Vector3} this
     */
    normalize() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].normalize(this.elements, this.elements);
        return this;
    }
    /**
     * Calculates the dot product of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  product of a and b
     */
    dot(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].dot(a.elements, b.elements);
    }
    /**
     * Computes the cross product of two vec3's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  cross product of a and b
     */
    cross(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].cross(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Performs a linear interpolation between two vec3's
     * @param  {Vector3} v
     * @param  {Number} t interpolation amount between the two vectors
     * @returns {Vector3} this
     */
    lerp(v, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].lerp(this.elements, this.elements, v.elements, t);
        return this;
    }
    /**
     * Performs a hermite interpolation with two control points
     * @param  {Vector3} a
     * @param  {Vector3} b
     * @param  {Vector3} c
     * @param  {Vector3} d
     * @param  {Number} t interpolation amount between the two inputs
     * @return {Vector3} this
     */
    hermite(a, b, c, d, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].hermite(this.elements, a.elements, b.elements, c.elements, d.elements, t);
        return this;
    }
    /**
     * Performs a bezier interpolation with two control points
     * @param  {Vector3} a
     * @param  {Vector3} b
     * @param  {Vector3} c
     * @param  {Vector3} d
     * @param  {Number} t interpolation amount between the two inputs
     * @return {Vector3} this
     */
    bezier(a, b, c, d, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].bezier(this.elements, a.elements, b.elements, c.elements, d.elements, t);
        return this;
    }
    /**
     * Generates a random vector with the given scale
     * @param  {Number} [scale=1] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {Vector3} this
     */
    random(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].random(this.elements, scale);
        return this;
    }
    /**
     * Transforms the vec3 with a mat3
     * @param  {Matrix3} m matrix to transform with
     * @returns {Vector3} this
     */
    transformMat3(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat3(this.elements, this.elements, m.elements);
        return this;
    }
    /**
     * Transforms the vec3 with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector3} this
     */
    transformMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat4(this.elements, this.elements, m.elements);
        return this;
    }
    /**
     * Transforms the vec3 direction with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector3} this
     */
    transformDirection(m) {
        const elements = this.elements;
        const mElements = m.elements;
        const x = elements[0];
        const y = elements[1];
        const z = elements[2];
        elements[0] = x * mElements[0] + y * mElements[4] + z * mElements[8];
        elements[1] = x * mElements[1] + y * mElements[5] + z * mElements[9];
        elements[2] = x * mElements[2] + y * mElements[6] + z * mElements[10];
        return this;
    }
    /**
     * Transforms the vec3 with a quat
     * @param  {Quaternion} q quaternion to transform with
     * @returns {Vector3} this
     */
    transformQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformQuat(this.elements, this.elements, q.elements);
        return this;
    }
    /**
     * Rotate this 3D vector around the x-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateX(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateX(this.elements, this.elements, origin.elements, rotation);
        return this;
    }
    /**
     * Rotate this 3D vector around the y-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateY(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateY(this.elements, this.elements, origin.elements, rotation);
        return this;
    }
    /**
     * Rotate this 3D vector around the z-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateZ(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateZ(this.elements, this.elements, origin.elements, rotation);
        return this;
    }
    rotate(rotation) {
        let conjugate = rotation.conjugate();
        let w = rotation.mulVec3(this).multiply(conjugate);
        return new Vector3(w.x, w.y, w.z);
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].equals(a.elements, b.elements);
    }
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
    }
    /**
     * Y component
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
    }
    /**
     * Z component
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
    }
    sub(a, b) {
        return this.subtract(a, b);
    }
    mul(a, b) {
        return this.multiply(a, b);
    }
    div(a, b) {
        return this.divide(a, b);
    }
    dist(a, b) {
        return this.distance(a, b);
    }
    sqrDist(a, b) {
        return this.squaredDistance(a, b);
    }
    len() {
        return this.length();
    }
    sqrLen() {
        return this.squaredLength();
    }
}


/***/ }),

/***/ "./src/engine/math/Vector3Notifier.ts":
/*!********************************************!*\
  !*** ./src/engine/math/Vector3Notifier.ts ***!
  \********************************************/
/*! exports provided: Vector3Notifier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3Notifier", function() { return Vector3Notifier; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");


class Vector3Notifier extends _event_EventObject__WEBPACK_IMPORTED_MODULE_1__["EventObject"] {
    /**
     * Creates a new empty vec3
     * @param {Number} [x=0] X component
     * @param {Number} [y=0] Y component
     * @param {Number} [z=0] Z component
     * @constructs
     */
    constructor(x = 0, y = 0, z = 0) {
        super();
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].fromValues(x, y, z);
    }
    /**
     * Copy the values from one vec3 to this
     * @param  {Vector3} m the source vector
     * @return {Vector3} this
     */
    copy(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].copy(this.elements, v.elements);
        this.fire('update');
        return this;
    }
    /**
     * Creates a new vec3 initialized with values from this vec3
     * @return {Vector3} a new Vector3
     */
    clone() {
        const elements = this.elements;
        return new Vector3Notifier(elements[0], elements[1], elements[2]);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = [], offset = 0) {
        const elements = this.elements;
        array[0 + offset] = elements[0];
        array[1 + offset] = elements[1];
        array[2 + offset] = elements[2];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Vector3} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        elements[0] = array[offset + 0];
        elements[1] = array[offset + 1];
        elements[2] = array[offset + 2];
        this.fire('update');
        return this;
    }
    /**
     * Set the components of a vec3 to the given values
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {Vector3Notifier} this
     */
    set(x, y, z) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].set(this.elements, x, y, z);
        this.fire('update');
        return this;
    }
    /**
     * Adds two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的和
     * @returns {Vector3Notifier} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].add(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Subtracts vector b from vector a
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的差
     * @returns {Vector3Notifier} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].subtract(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Multiplies two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的积
     * @returns {Vector3Notifier} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].multiply(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Divides two vec3's
     * @param {Vector3} a
     * @param {Vector3} [b] 如果不传，计算 this 和 a 的商
     * @returns {Vector3Notifier} this
     */
    divide(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].divide(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Math.ceil the components of this
     * @returns {Vector3Notifier} this
     */
    ceil() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].ceil(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Math.floor the components of this
     * @returns {Vector3Notifier} this
     */
    floor() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].floor(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Returns the minimum of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector3Notifier} this
     */
    min(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].min(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Returns the maximum of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b]  如果不传，计算 this 和 a 的结果
     * @returns {Vector3Notifier} this
     */
    max(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].max(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Math.round the components of this
     * @returns {Vector3Notifier} this
     */
    round() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].round(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Scales this by a scalar number
     * @param  {Number} scale amount to scale the vector by
     * @returns {Vector3Notifier} this
     */
    scale(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].scale(this.elements, this.elements, scale);
        this.fire('update');
        return this;
    }
    /**
     * Adds two vec3's after scaling the second vector by a scalar value
     * @param  {Number} scale the amount to scale the second vector by before adding
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector3Notifier} this
     */
    scaleAndAdd(scale, a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].scaleAndAdd(this.elements, a.elements, b.elements, scale);
        this.fire('update');
        return this;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} distance between a and b
     */
    distance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].distance(a.elements, b.elements);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} squared distance between a and b
     */
    squaredDistance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].squaredDistance(a.elements, b.elements);
    }
    /**
     * Calculates the length of this
     * @return {Number} length of this
     */
    length() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].length(this.elements);
    }
    /**
     * Calculates the squared length of this
     * @return {Number} squared length of this
     */
    squaredLength() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].squaredLength(this.elements);
    }
    /**
     * Negates the components of this
     * @returns {Vector3Notifier} this
     */
    negate() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].negate(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Returns the inverse of the components of a vec3
     * @param  {Vector3} [a=this]
     * @returns {Vector3Notifier} this
     */
    inverse(a) {
        if (!a) {
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].inverse(this.elements, a.elements);
        this.fire('update');
        return this;
    }
    /**
     * Normalize this
     * @returns {Vector3Notifier} this
     */
    normalize() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].normalize(this.elements, this.elements);
        this.fire('update');
        return this;
    }
    /**
     * Calculates the dot product of two vec3's
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  product of a and b
     */
    dot(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].dot(a.elements, b.elements);
    }
    /**
     * Computes the cross product of two vec3's
     * @param  {Vector2} a
     * @param  {Vector2} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  cross product of a and b
     */
    cross(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].cross(this.elements, a.elements, b.elements);
        this.fire('update');
        return this;
    }
    /**
     * Performs a linear interpolation between two vec3's
     * @param  {Vector3} v
     * @param  {Number} t interpolation amount between the two vectors
     * @returns {Vector3Notifier} this
     */
    lerp(v, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].lerp(this.elements, this.elements, v.elements, t);
        this.fire('update');
        return this;
    }
    /**
     * Performs a hermite interpolation with two control points
     * @param  {Vector3} a
     * @param  {Vector3} b
     * @param  {Vector3} c
     * @param  {Vector3} d
     * @param  {Number} t interpolation amount between the two inputs
     * @return {Vector3} this
     */
    hermite(a, b, c, d, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].hermite(this.elements, a.elements, b.elements, c.elements, d.elements, t);
        this.fire('update');
        return this;
    }
    /**
     * Performs a bezier interpolation with two control points
     * @param  {Vector3} a
     * @param  {Vector3} b
     * @param  {Vector3} c
     * @param  {Vector3} d
     * @param  {Number} t interpolation amount between the two inputs
     * @return {Vector3} this
     */
    bezier(a, b, c, d, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].bezier(this.elements, a.elements, b.elements, c.elements, d.elements, t);
        this.fire('update');
        return this;
    }
    /**
     * Generates a random vector with the given scale
     * @param  {Number} [scale=1] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {Vector3Notifier} this
     */
    random(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].random(this.elements, scale);
        this.fire('update');
        return this;
    }
    /**
     * Transforms the vec3 with a mat3
     * @param  {Matrix3} m matrix to transform with
     * @returns {Vector3Notifier} this
     */
    transformMat3(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat3(this.elements, this.elements, m.elements);
        this.fire('update');
        return this;
    }
    /**
     * Transforms the vec3 with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector3Notifier} this
     */
    transformMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformMat4(this.elements, this.elements, m.elements);
        this.fire('update');
        return this;
    }
    /**
     * Transforms the vec3 direction with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector3Notifier} this
     */
    transformDirection(m) {
        const elements = this.elements;
        const mElements = m.elements;
        const x = elements[0];
        const y = elements[1];
        const z = elements[2];
        elements[0] = x * mElements[0] + y * mElements[4] + z * mElements[8];
        elements[1] = x * mElements[1] + y * mElements[5] + z * mElements[9];
        elements[2] = x * mElements[2] + y * mElements[6] + z * mElements[10];
        this.fire('update');
        return this;
    }
    /**
     * Transforms the vec3 with a quat
     * @param  {Quaternion} q quaternion to transform with
     * @returns {Vector3Notifier} this
     */
    transformQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].transformQuat(this.elements, this.elements, q.elements);
        this.fire('update');
        return this;
    }
    /**
     * Rotate this 3D vector around the x-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateX(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateX(this.elements, this.elements, origin.elements, rotation);
        this.fire('update');
        return this;
    }
    /**
     * Rotate this 3D vector around the y-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateY(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateY(this.elements, this.elements, origin.elements, rotation);
        this.fire('update');
        return this;
    }
    /**
     * Rotate this 3D vector around the z-axis
     * @param  {Vector3} origin The origin of the rotation
     * @param  {Number} rotation The angle of rotation
     * @return {Vector3} this
     */
    rotateZ(origin, rotation) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].rotateZ(this.elements, this.elements, origin.elements, rotation);
        this.fire('update');
        return this;
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     * @param  {Vector3} a
     * @param  {Vector3} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec3"].equals(a.elements, b.elements);
    }
    /**
     * X component
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
        this.fire('update');
    }
    /**
     * Y component
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
        this.fire('update');
    }
    /**
     * Z component
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
        this.fire('update');
    }
}


/***/ }),

/***/ "./src/engine/math/Vector4.ts":
/*!************************************!*\
  !*** ./src/engine/math/Vector4.ts ***!
  \************************************/
/*! exports provided: Vector4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector4", function() { return Vector4; });
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gl-matrix */ "./node_modules/gl-matrix/esm/index.js");

class Vector4 {
    /**
         * Creates a new empty vec4
         * @param {Number} [x=0] X component
         * @param {Number} [y=0] Y component
         * @param {Number} [z=0] Z component
         * @param {Number} [w=0] W component
         * @constructs
         */
    constructor(x = 0, y = 0, z = 0, w = 0) {
        /**
         * 数据
         * @type {Float32Array}
         */
        this.elements = gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].fromValues(x, y, z, w);
    }
    /**
     * Copy the values from one vec4 to this
     * @param  {Vector4} m the source vector
     * @return {Vector4} this
     */
    copy(v) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].copy(this.elements, v.elements);
        return this;
    }
    /**
     * Creates a new vec4 initialized with values from this vector
     * @return {Vector4} a new Vector4
     */
    clone() {
        const elements = this.elements;
        return new Vector4(elements[0], elements[1], elements[2], elements[3]);
    }
    /**
     * 转换到数组
     * @param  {Array}  [array=[]] 数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Array}
     */
    toArray(array = new Float32Array(), offset = 0) {
        const elements = this.elements;
        array[0 + offset] = elements[0];
        array[1 + offset] = elements[1];
        array[2 + offset] = elements[2];
        array[3 + offset] = elements[3];
        return array;
    }
    /**
     * 从数组赋值
     * @param  {Array} array  数组
     * @param  {Number} [offset=0] 数组偏移值
     * @return {Vector4} this
     */
    fromArray(array, offset = 0) {
        const elements = this.elements;
        elements[0] = array[offset + 0];
        elements[1] = array[offset + 1];
        elements[2] = array[offset + 2];
        elements[3] = array[offset + 3];
        return this;
    }
    /**
     * Set the components of a vec4 to the given values
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {Vector4} this
     */
    set(x, y, z, w) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].set(this.elements, x, y, z, w);
        return this;
    }
    /**
     * Adds two vec4's
     * @param {Vector4} a
     * @param {Vector4} [b] 如果不传，计算 this 和 a 的和
     * @returns {Vector4} this
     */
    add(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].add(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Subtracts vector b from vector a
     * @param {Vector4} a
     * @param {Vector4} [b] 如果不传，计算 this 和 a 的差
     * @returns {Vector4} this
     */
    subtract(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].subtract(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Multiplies two vec4's
     * @param {Vector4} a
     * @param {Vector4} [b] 如果不传，计算 this 和 a 的积
     * @returns {Vector4} this
     */
    multiply(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].multiply(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Divides two vec4's
     * @param {Vector4} a
     * @param {Vector4} [b] 如果不传，计算 this 和 a 的商
     * @returns {Vector4} this
     */
    divide(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].divide(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.ceil the components of this
     * @returns {Vector4} this
     */
    ceil() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].ceil(this.elements, this.elements);
        return this;
    }
    /**
     * Math.floor the components of this
     * @returns {Vector4} this
     */
    floor() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].floor(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the minimum of two vec4's
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector4} this
     */
    min(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].min(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Returns the maximum of two vec4's
     * @param  {Vector4} a
     * @param  {Vector4} [b]  如果不传，计算 this 和 a 的结果
     * @returns {Vector4} this
     */
    max(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].max(this.elements, a.elements, b.elements);
        return this;
    }
    /**
     * Math.round the components of this
     * @returns {Vector4} this
     */
    round() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].round(this.elements, this.elements);
        return this;
    }
    /**
     * Scales this by a scalar number
     * @param  {Number} scale amount to scale the vector by
     * @returns {Vector4} this
     */
    scale(scale) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].scale(this.elements, this.elements, scale);
        return this;
    }
    /**
     * Adds two vec4's after scaling the second vector by a scalar value
     * @param  {Number} scale the amount to scale the second vector by before adding
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @returns {Vector4} this
     */
    scaleAndAdd(scale, a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].scaleAndAdd(this.elements, a.elements, b.elements, scale);
        return this;
    }
    /**
     * Calculates the euclidian distance between two vec4's
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} distance between a and b
     */
    distance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].distance(a.elements, b.elements);
    }
    /**
     * Calculates the squared euclidian distance between two vec4's
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number} squared distance between a and b
     */
    squaredDistance(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].squaredDistance(a.elements, b.elements);
    }
    /**
     * Calculates the length of this
     * @return {Number} length of this
     */
    length() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].length(this.elements);
    }
    /**
     * Calculates the squared length of this
     * @return {Number} squared length of this
     */
    squaredLength() {
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].squaredLength(this.elements);
    }
    /**
     * Negates the components of this
     * @returns {Vector4} this
     */
    negate() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].negate(this.elements, this.elements);
        return this;
    }
    /**
     * Returns the inverse of the components of a vec4
     * @param  {Vector4} [a=this]
     * @returns {Vector4} this
     */
    inverse(a) {
        if (!a) {
            a = this;
        }
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].inverse(this.elements, a.elements);
        return this;
    }
    /**
     * Normalize this
     * @returns {Vector4} this
     */
    normalize() {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].normalize(this.elements, this.elements);
        return this;
    }
    /**
     * Calculates the dot product of two vec4's
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @return {Number}  product of a and b
     */
    dot(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].dot(a.elements, b.elements);
    }
    /**
     * Performs a linear interpolation between two vec4's
     * @param  {Vector4} v
     * @param  {Number} t interpolation amount between the two vectors
     * @returns {Vector4} this
     */
    lerp(v, t) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].lerp(this.elements, this.elements, v.elements, t);
        return this;
    }
    /**
     * Generates a random vector with the given scale
     * @param  {Number} [scale=1] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {Vector4} this
     */
    random(scale) {
        scale = scale || 1;
        this.elements[0] = Math.random();
        this.elements[1] = Math.random();
        this.elements[2] = Math.random();
        this.elements[3] = Math.random();
        this.normalize();
        this.scale(scale);
        return this;
    }
    /**
     * Transforms the vec4 with a mat4
     * @param  {Matrix4} m matrix to transform with
     * @returns {Vector4} this
     */
    transformMat4(m) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].transformMat4(this.elements, this.elements, m.elements);
        return this;
    }
    /**
     * Transforms the vec4 with a quat
     * @param  {Quaternion} q quaternion to transform with
     * @returns {Vector4} this
     */
    transformQuat(q) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].transformQuat(this.elements, this.elements, q.elements);
        return this;
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    exactEquals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].exactEquals(a.elements, b.elements);
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     * @param  {Vector4} a
     * @param  {Vector4} [b] 如果不传，计算 this 和 a 的结果
     * @return {Boolean} True if the vectors are equal, false otherwise.
     */
    equals(a, b) {
        if (!b) {
            b = a;
            a = this;
        }
        return gl_matrix__WEBPACK_IMPORTED_MODULE_0__["vec4"].equals(a.elements, b.elements);
    }
    /**
     * X component
     * @type {Number}
     */
    get x() {
        return this.elements[0];
    }
    set x(value) {
        this.elements[0] = value;
    }
    /**
     * Y component
     * @type {Number}
     */
    get y() {
        return this.elements[1];
    }
    set y(value) {
        this.elements[1] = value;
    }
    /**
     * Z component
     * @type {Number}
     */
    get z() {
        return this.elements[2];
    }
    set z(value) {
        this.elements[2] = value;
    }
    /**
     * W component
     * @type {Number}
     */
    get w() {
        return this.elements[3];
    }
    set w(value) {
        this.elements[3] = value;
    }
    sub(a, b) {
        return this.subtract(a, b);
    }
    mul(a, b) {
        return this.multiply(a, b);
    }
    div(a, b) {
        return this.divide(a, b);
    }
    dist(a, b) {
        return this.distance(a, b);
    }
    sqrDist(a, b) {
        return this.squaredDistance(a, b);
    }
    len() {
        return this.length();
    }
    sqrLen() {
        return this.squaredLength();
    }
}


/***/ }),

/***/ "./src/engine/math/math.ts":
/*!*********************************!*\
  !*** ./src/engine/math/math.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @namespace math
 * @type {Object}
 */
const math = {
    /**
     * 角度值转弧度值
     * @type {Number}
     */
    DEG2RAD: Math.PI / 180,
    /**
     * 弧度值转角度值
     * @type {Number}
     */
    RAD2DEG: 180 / Math.PI,
    /**
     * 生成唯一ID
     * @function
     * @param  {String} [prefix=''] ID前缀
     * @return {String} ID
     */
    generateUUID: (() => {
        let uid = 0;
        return (prefix) => {
            let id = ++uid;
            let id_str;
            if (prefix) {
                id_str = prefix + '_' + id;
            }
            else {
                id_str += '';
            }
            return id_str;
        };
    })(),
    /**
     * 截取
     * @param  {Number} value 值
     * @param  {Number} min 最小值
     * @param  {Number} max 最大值
     * @return {Number}
     */
    clamp(value, min, max) {
        return Math.max(min, Math.min(max, value));
    },
    /**
     * 角度值转换成弧度值
     * @param  {Number} deg 角度值
     * @return {Number} 弧度值
     */
    degToRad(deg) {
        return deg * this.DEG2RAD;
    },
    /**
     * 弧度值转换成角度值
     * @param  {Number} rad 弧度值
     * @return {Number} 角度值
     */
    radToDeg(rad) {
        return rad * this.RAD2DEG;
    },
    /**
     * 是否是 2 的指数值
     * @param  {Number}  value
     * @return {Boolean}
     */
    isPowerOfTwo(value) {
        return (value & (value - 1)) === 0 && value !== 0;
    },
    /**
     * 最近的 2 的指数值
     * @param  {Uint} value
     * @return {Uint}
     */
    nearestPowerOfTwo(value) {
        return Math.pow(2, Math.round(Math.log(value) / Math.LN2));
    },
    /**
     * 下一个的 2 的指数值
     * @param  {Uint} value
     * @return {Uint}
     */
    nextPowerOfTwo(value) {
        value--;
        value |= value >> 1;
        value |= value >> 2;
        value |= value >> 4;
        value |= value >> 8;
        value |= value >> 16;
        value++;
        return value;
    }
};
/* harmony default export */ __webpack_exports__["default"] = (math);


/***/ }),

/***/ "./src/engine/renderer/GLBuffer.ts":
/*!*****************************************!*\
  !*** ./src/engine/renderer/GLBuffer.ts ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* eslint no-buffer-constructor: "off" */



const { ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER, STATIC_DRAW } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"];
const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
/**
 * 缓冲
 * @class
 */
class GLBuffer {
    /**
     * @constructs
     * @param  {WebGLRenderingContext} gl
     * @param  {GLenum} [target = ARRAY_BUFFER]
     * @param  {TypedArray} data
     * @param  {GLenum} [usage = STATIC_DRAW]
     */
    constructor(gl, target = ARRAY_BUFFER, data, usage = STATIC_DRAW) {
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_2__["default"].generateUUID(this.constructor.name);
        this.gl = gl;
        this.target = target;
        this.usage = usage;
        this.buffer = gl.createBuffer();
        if (data) {
            this.bufferData(data);
        }
    }
    /**
     * 缓存
     * @readOnly
     * @return {Cache}
     */
    static get cache() {
        return cache;
    }
    /**
     * 重置缓存
     */
    static reset(gl) {
        cache.each((buffer) => {
            buffer.destroy();
        });
    }
    /**
     * 生成顶点缓冲
     * @param  {WebGLRenderingContext} gl
     * @param  {GeometryData} geometryData
     * @param  {GLenum} [usage = STATIC_DRAW]
     * @return {GLBuffer}
     */
    static createVertexBuffer(gl, geometryData, usage = STATIC_DRAW) {
        return this.createBuffer(gl, ARRAY_BUFFER, geometryData, usage);
    }
    static createBuffer(gl, target, geometryData, usage) {
        const id = geometryData.bufferViewId;
        let buffer = cache.get(id);
        if (buffer) {
            return buffer;
        }
        geometryData.isDirty = false;
        buffer = new GLBuffer(gl, target, geometryData.data, usage);
        cache.add(id, buffer);
        return buffer;
    }
    /**
     * 生成索引缓冲
     * @param  {WebGLRenderingContext} gl
     * @param  {GeometryData} geometryData
     * @param  {GLenum} [usage = STATIC_DRAW]
     * @return {GLBuffer}
     */
    static createIndexBuffer(gl, geometryData, usage = STATIC_DRAW) {
        return this.createBuffer(gl, ELEMENT_ARRAY_BUFFER, geometryData, usage);
    }
    /**
     * 绑定
     * @return {GLBuffer} this
     */
    bind() {
        this.gl.bindBuffer(this.target, this.buffer);
        return this;
    }
    /**
     * 上传数据
     * @param  {TypedArray} data
     * @return {GLBuffer} this
     */
    bufferData(data) {
        const { gl, target, usage } = this;
        this.bind();
        gl.bufferData(target, data, usage);
        this.data = data;
        return this;
    }
    /**
     * 上传部分数据
     * @param  {Number} byteOffset
     * @param  {TypedArray} data
     * @param  {Boolean} [isBinding=false]
     * @return {GLBuffer} this
     */
    bufferSubData(byteOffset, data, isBinding = false) {
        const { gl, target } = this;
        if (!isBinding) {
            this.bind();
        }
        gl.bufferSubData(target, byteOffset, data);
        return this;
    }
    /**
     * @param  {GeometryData} geometryData
     * @return {GLBuffer} this
     */
    uploadGeometryData(geometryData) {
        const subDataList = geometryData.subDataList;
        if (!this.data || this.data.byteLength < geometryData.data.byteLength || geometryData._isAllDirty === true) {
            this.bufferData(geometryData.data);
        }
        else if (subDataList && subDataList.length) {
            this.bind();
            subDataList.forEach((subData) => {
                this.bufferSubData(subData.byteOffset, subData.data, true);
            });
        }
        else {
            this.bufferData(geometryData.data);
        }
        geometryData.isDirty = false;
        return this;
    }
    /**
     * 没有被引用时销毁资源
     * @param  {WebGLRenderer} renderer
     * @return {GLBuffer} this
     */
    destroyIfNoRef(renderer) {
        const resourceManager = renderer.resourceManager;
        resourceManager.destroyIfNoRef(this);
        return this;
    }
    /**
     * 销毁资源
     * @return {GLBuffer} this
     */
    destroy() {
        if (this._isDestroyed) {
            return this;
        }
        this.gl.deleteBuffer(this.buffer);
        this.data = null;
        cache.removeObject(this);
        this._isDestroyed = true;
        return this;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (GLBuffer);


/***/ }),

/***/ "./src/engine/renderer/Program.ts":
/*!****************************************!*\
  !*** ./src/engine/renderer/Program.ts ***!
  \****************************************/
/*! exports provided: Program, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Program", function() { return Program; });
/* harmony import */ var _glType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glType */ "./src/engine/renderer/glType.ts");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensions */ "./src/engine/renderer/extensions.ts");
/* harmony import */ var _shader_Shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shader/Shader */ "./src/engine/shader/Shader.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");






const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_3__["Pool"]();
/**
 * @class
 */
class Program {
    /**
     * @constructs
     * @param  {WebGLState}state WebGL state
     */
    constructor(state, vertexShader, fragShader, ignoreError) {
        /**
         * 片段代码
         * @type {String}
         * @default ''
         */
        this.fragShader = '';
        /**
         * 顶点代码
         * @type {String}
         * @default ''
         */
        this.vertexShader = '';
        /**
         * attribute 集合
         * @type {Object}
         * @default null
         */
        this.attributes = null;
        /**
         * uniform 集合
         * @type {Object}
         * @default null
         */
        this.uniforms = null;
        /**
         * program
         * @type {WebGLProgram}
         * @default null
         */
        this.program = null;
        /**
         * gl
         * @type {WebGL}
         */
        this.gl = null;
        /**
         * webglState
         * @type {WebGLState}
         * @default null
         */
        this.state = null;
        /**
         * 是否始终使用
         * @default true
         * @type {Boolean}
         */
        this.alwaysUse = false;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_4__["default"].generateUUID(this.constructor.name);
        this._dict = {};
        this.vertexShader = vertexShader;
        this.fragShader = fragShader;
        this.ignoreError = ignoreError;
        this.attributes = {};
        this.uniforms = {};
        this.state = state;
        this.gl = this.state.gl;
        this.program = this.createProgram();
        if (this.program) {
            this.initAttributes();
            this.initUniforms();
            return this;
        }
        if (this.ignoreError) {
            return this;
        }
        return Program.getBlankProgram(state);
    }
    /**
     * 缓存
     * @readOnly
     * @return {Cache}
     */
    static get cache() {
        return cache;
    }
    /**
     * 重置缓存
     */
    static reset(gl) {
        cache.each((program) => {
            program.destroy();
        });
    }
    /**
     * 获取程序
     * @param  {Shader} shader
     * @param  {WebGLState} state
     * @param  {Boolean} [ignoreError=false]
     * @return {Program}
     */
    static getProgram(shader, state, ignoreError = false) {
        const id = shader.id;
        let program = cache.get(id);
        if (!program) {
            program = new Program(state, shader.vs, shader.fs, ignoreError);
            cache.add(id, program);
        }
        return program;
    }
    /**
     * 获取空白程序
     * @param  {WebGLState} state
     * @return {Program}
     */
    static getBlankProgram(state) {
        const shader = _shader_Shader__WEBPACK_IMPORTED_MODULE_2__["default"].getCustomShader('void main(){}', 'precision HILO_MAX_FRAGMENT_PRECISION float;void main(){gl_FragColor = vec4(0.0);}', '', '__hiloBlankShader');
        return this.getProgram(shader, state, true);
    }
    /**
     * 生成 program
     * @return {WebGLProgram}
     */
    createProgram() {
        const gl = this.gl;
        const program = gl.createProgram();
        const vertexShader = this.createShader(gl.VERTEX_SHADER, this.vertexShader);
        const fragShader = this.createShader(gl.FRAGMENT_SHADER, this.fragShader);
        if (vertexShader && fragShader) {
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragShader);
            gl.linkProgram(program);
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragShader);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                const error = gl.getProgramInfoLog(program);
                _utils_Log__WEBPACK_IMPORTED_MODULE_5__["log"].error('compileProgramError: ' + error, this);
                gl.deleteProgram(program);
                return null;
            }
            return program;
        }
        return null;
    }
    /**
     * 使用 program
     */
    useProgram() {
        this.state.useProgram(this.program);
    }
    /**
     * 生成 shader
     * @param  {Number} shaderType
     * @param  {String} code
     * @return {WebGLShader}
     */
    createShader(shaderType, code) {
        const gl = this.gl;
        const shader = gl.createShader(shaderType);
        gl.shaderSource(shader, code);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            const error = gl.getShaderInfoLog(shader);
            _utils_Log__WEBPACK_IMPORTED_MODULE_5__["log"].error('compileShaderError: ' + error, code.split('\n').map((line, index) => `${index + 1} ${line}`).join('\n'));
            return null;
        }
        return shader;
    }
    /**
     * 初始化 attribute 信息
     */
    initAttributes() {
        const gl = this.gl;
        const program = this.program;
        const num = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        const instancedExtension = _extensions__WEBPACK_IMPORTED_MODULE_1__["default"].instanced;
        for (let i = 0; i < num; i++) {
            const { name, type, size } = gl.getActiveAttrib(program, i);
            const location = gl.getAttribLocation(program, name);
            const glTypeInfo = _glType__WEBPACK_IMPORTED_MODULE_0__["default"].get(type);
            let pointer = ({ type = gl.FLOAT, normalized = false, stride = 0, offset = 0 }) => {
                gl.vertexAttribPointer(location, glTypeInfo.size, type, normalized, stride, offset);
            };
            let enable = () => {
                gl.enableVertexAttribArray(location);
            };
            let divisor = () => { };
            let addTo = (array, data) => {
                array[location] = data;
            };
            if (instancedExtension) {
                divisor = (d = 1) => {
                    instancedExtension.vertexAttribDivisorANGLE(location, d);
                };
            }
            if (glTypeInfo.type === 'Matrix') {
                const matrixStride = glTypeInfo.byteSize;
                const size = glTypeInfo.size;
                const matSize = Math.sqrt(size);
                const vectorByteSize = matSize * 4;
                const each = (callback) => {
                    for (let i = 0; i < matSize; i++) {
                        callback(location + i, i);
                    }
                };
                pointer = ({ type = gl.FLOAT, normalized = false, stride = 0, offset = 0 }) => {
                    let realStride;
                    if (stride === 0) {
                        realStride = matrixStride;
                    }
                    else {
                        realStride = stride;
                    }
                    each((location, i) => {
                        gl.vertexAttribPointer(location, matSize, type, normalized, realStride, offset + vectorByteSize * i);
                    });
                };
                enable = () => {
                    each((location) => {
                        gl.enableVertexAttribArray(location);
                    });
                };
                addTo = (array, data) => {
                    each((location) => {
                        array[location] = data;
                    });
                };
                if (instancedExtension) {
                    divisor = (d = 1) => {
                        each((location) => {
                            instancedExtension.vertexAttribDivisorANGLE(location, d);
                        });
                    };
                }
            }
            this.attributes[name] = {
                name,
                location,
                type,
                size,
                glTypeInfo,
                pointer,
                enable,
                divisor,
                addTo
            };
        }
    }
    /**
     * 初始化 uniform 信息
     */
    initUniforms() {
        const gl = this.gl;
        const program = this.program;
        const num = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        let textureIndex = 0;
        for (let i = 0; i < num; i++) {
            let { name, size, type } = gl.getActiveUniform(program, i);
            name = name.replace(/\[0\]$/, '');
            const location = gl.getUniformLocation(program, name);
            const glTypeInfo = _glType__WEBPACK_IMPORTED_MODULE_0__["default"].get(type);
            const { uniformArray, uniform } = glTypeInfo;
            this.uniforms[name] = {
                name,
                location,
                type,
                size,
                glTypeInfo
            };
            if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {
                this.uniforms[name].textureIndex = textureIndex;
                textureIndex += size;
            }
            Object.defineProperty(this, name, {
                set: glTypeInfo.size > 1 || size > 1 ? (value) => {
                    uniformArray(location, value);
                } : (value) => {
                    if (this._dict[name] !== value) {
                        this._dict[name] = value;
                        uniform(location, value);
                    }
                }
            });
        }
    }
    /**
     * 没有被引用时销毁资源
     * @param  {WebGLRenderer} renderer
     * @return {Program} this
     */
    destroyIfNoRef(renderer) {
        const resourceManager = renderer.resourceManager;
        resourceManager.destroyIfNoRef(this);
        return this;
    }
    /**
     * 销毁资源
     * @return {Program} this
     */
    destroy() {
        if (this._isDestroyed) {
            return this;
        }
        this.gl.deleteProgram(this.program);
        this.uniforms = null;
        this.attributes = null;
        this.program = null;
        this.gl = null;
        this.state = null;
        this._dict = null;
        cache.removeObject(this);
        this._isDestroyed = true;
        return this;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (Program);


/***/ }),

/***/ "./src/engine/renderer/RenderInfo.ts":
/*!*******************************************!*\
  !*** ./src/engine/renderer/RenderInfo.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * 渲染信息
 * @class
 */
class RenderInfo {
    /**
     * @constructs
     */
    constructor() {
        /**
         * 当前面数
         * @type {Number}
         * @private
         */
        this._currentFaceCount = 0;
        /**
         * 当前绘图数
         * @private
         * @type {Number}
         */
        this._currentDrawCount = 0;
        /**
         * 面数
         * @type {Number}
         * @readOnly
         */
        this.faceCount = 0;
        /**
         * 绘图数
         * @type {Number}
         * @readOnly
         */
        this.drawCount = 0;
        this.reset();
    }
    /**
     * 增加面数
     * @param {number} num
     */
    addFaceCount(num) {
        this._currentFaceCount += num;
    }
    /**
     * 增加绘图数
     * @param {Number} num
     */
    addDrawCount(num) {
        this._currentDrawCount += num;
    }
    /**
     * 重置信息
     */
    reset() {
        this.faceCount = Math.floor(this._currentFaceCount);
        this.drawCount = Math.floor(this._currentDrawCount);
        this._currentFaceCount = 0;
        this._currentDrawCount = 0;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (RenderInfo);


/***/ }),

/***/ "./src/engine/renderer/RenderList.ts":
/*!*******************************************!*\
  !*** ./src/engine/renderer/RenderList.ts ***!
  \*******************************************/
/*! exports provided: RenderList, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RenderList", function() { return RenderList; });
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");


const tempVector3 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const opaqueSort = function (meshA, meshB) {
    // sort by material renderOrder
    const renderOrderA = meshA.material.renderOrder;
    const renderOrderB = meshB.material.renderOrder;
    if (renderOrderA !== renderOrderB) {
        return renderOrderA - renderOrderB;
    }
    // sort by shader id
    const shaderNumIdA = meshA.material._shaderNumId || 0;
    const shaderNumIdB = meshB.material._shaderNumId || 0;
    if (shaderNumIdA !== shaderNumIdB) {
        return shaderNumIdA - shaderNumIdB;
    }
    // sort by render z
    return meshA._sortRenderZ - meshB._sortRenderZ;
};
const transparentSort = function (meshA, meshB) {
    // sort by material renderOrder
    const renderOrderA = meshA.material.renderOrder;
    const renderOrderB = meshB.material.renderOrder;
    if (renderOrderA !== renderOrderB) {
        return renderOrderA - renderOrderB;
    }
    // sort by inverse render z
    return meshB._sortRenderZ - meshA._sortRenderZ;
};
/**
 * 渲染列表
 * @class
 */
class RenderList {
    /**
     * @constructs
     */
    constructor() {
        this.opaqueList = [];
        this.transparentList = [];
    }
    /**
     * 重置列表
     */
    reset() {
        this.opaqueList.length = 0;
        this.transparentList.length = 0;
    }
    /**
     * 遍历列表执行回调
     * @param  {RenderList~traverseCallback} callback callback(mesh)nstancedCallback(instancedMeshes)
     */
    traverse(callback) {
        this.opaqueList.forEach((mesh) => {
            callback(mesh);
        });
        this.transparentList.forEach((mesh) => {
            callback(mesh);
        });
    }
    sort() {
        this.transparentList.sort(transparentSort);
        this.opaqueList.sort(opaqueSort);
    }
    /**
     * 增加 mesh
     * @param {Mesh} mesh
     * @param {Camera} camera
     */
    addMesh(mesh, camera) {
        const material = mesh.material;
        const geometry = mesh.geometry;
        if (material && geometry) {
            mesh.worldMatrix.getTranslation(tempVector3);
            tempVector3.transformMat4(camera.viewProjectionMatrix);
            mesh._sortRenderZ = tempVector3.z;
            if (material.transparent) {
                this.transparentList.push(mesh);
            }
            else {
                this.opaqueList.push(mesh);
            }
        }
        else {
            _utils_Log__WEBPACK_IMPORTED_MODULE_1__["log"].warnOnce(`RenderList.addMesh(${mesh.id})`, 'Mesh must have material and geometry', mesh);
        }
    }
}
/* harmony default export */ __webpack_exports__["default"] = (RenderList);
/**
 * @callback RenderList~traverseCallback
 * @param {Mesh} mesh
 */
/**
 * @callback RenderList~instancedTraverseCallback
 * @param {Mesh[]} meshes
 */


/***/ }),

/***/ "./src/engine/renderer/Semantic.ts":
/*!*****************************************!*\
  !*** ./src/engine/renderer/Semantic.ts ***!
  \*****************************************/
/*! exports provided: semantic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semantic", function() { return semantic; });
/* harmony import */ var _math_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _math_Matrix3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Matrix3 */ "./src/engine/math/Matrix3.ts");
/* harmony import */ var _math_Matrix4__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Matrix4 */ "./src/engine/math/Matrix4.ts");
/* harmony import */ var _math_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/Color */ "./src/engine/math/Color.ts");
/* harmony import */ var _texture_Texture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../texture/Texture */ "./src/engine/texture/Texture.ts");





const tempVector3 = new _math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
const tempMatrix3 = new _math_Matrix3__WEBPACK_IMPORTED_MODULE_1__["Matrix3"]();
const tempMatrix4 = new _math_Matrix4__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();
const tempFloat32Array4 = new Float32Array([0.5, 0.5, 0.5, 1]);
const tempFloat32Array2 = new Float32Array([0, 0]);
let camera;
let gl;
let lightManager;
let state;
let fog;
let renderer;
const blankInfo = {
    isBlankInfo: true,
    get() {
        return undefined;
    }
};
/**
 * 语义
 * @namespace semantic
 * @type {Object}
 */
class semantic {
    /**
     * 初始化
     * @param  {State} _state
     * @param  {Camera} _camera
     * @param  {LightManager} _lightManager
     * @param  {Fog} _fog
     */
    static init(_renderer, _state, _camera, _lightManager) {
        renderer = this._renderer = _renderer;
        state = this.state = _state;
        camera = this.camera = _camera;
        lightManager = this.lightManager = _lightManager;
        gl = this.gl = state.gl;
    }
    /**
     * 设置相机
     * @param {Camera} _camera
     */
    static setCamera(_camera) {
        camera = this.camera = _camera;
    }
    static handlerColorOrTexture(value, textureIndex) {
        if (value && value instanceof _texture_Texture__WEBPACK_IMPORTED_MODULE_4__["default"]) {
            return this.handlerTexture(value, textureIndex);
        }
        if (value && value instanceof _math_Color__WEBPACK_IMPORTED_MODULE_3__["default"]) {
            value.toArray(tempFloat32Array4);
        }
        else {
            tempFloat32Array4[0] = tempFloat32Array4[1] = tempFloat32Array4[2] = 0.5;
        }
        return tempFloat32Array4;
    }
    static handlerTexture(value, textureIndex) {
        if (value && value.isTexture) {
            return this.handlerGLTexture(value.target, value.getGLTexture(state), textureIndex);
        }
        return undefined;
    }
    static handlerGLTexture(target, texture, textureIndex) {
        if (texture) {
            state.activeTexture(gl.TEXTURE0 + textureIndex);
            state.bindTexture(target, texture);
            return textureIndex;
        }
        return undefined;
    }
    static handlerUV(texture) {
        if (texture && texture.isTexture) {
            return texture.uv || 0;
        }
        return 0;
    }
}
/**
 * @type {State}
 */
semantic.state = null;
/**
 * @type {Camera}
 */
semantic.camera = null;
/**
 * @type {LightManager}
 */
semantic.lightManager = null;
/**
 * @type {WebGLRenderingContext}
 */
semantic.gl = null;
/**
 * WebGLRenderer
 * @type {WebGLRenderer}
 */
semantic._renderer = null;
/**
 * @type {semanticObject}
 */
semantic.POSITION = {
    get(mesh, material, programInfo) {
        return mesh.geometry.vertices;
    }
};
/**
 * @type {semanticObject}
 */
semantic.NORMAL = {
    get(mesh, material, programInfo) {
        return mesh.geometry.normals;
    }
};
/**
 * @type {semanticObject}
 */
semantic.TANGENT = {
    get(mesh, material, programInfo) {
        const normalMap = material.normalMap;
        if (normalMap && normalMap.isTexture) {
            if (Number(normalMap.uv) === 1) {
                return mesh.geometry.tangents1;
            }
            return mesh.geometry.tangents;
        }
        return undefined;
    }
};
/**
 * @type {semanticObject}
 */
semantic.TEXCOORD_0 = {
    get(mesh, material, programInfo) {
        if (!mesh.geometry.uvs) {
            return undefined;
        }
        return mesh.geometry.uvs;
    }
};
/**
 * @type {semanticObject}
 */
semantic.TEXCOORD_1 = {
    get(mesh, material, programInfo) {
        if (!mesh.geometry.uvs1) {
            return undefined;
        }
        return mesh.geometry.uvs1;
    }
};
/**
 * @type {semanticObject}
 */
semantic.UVMATRIX_0 = {
    get(mesh, material, programInfo) {
        if (!material.uvMatrix) {
            return undefined;
        }
        return material.uvMatrix.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.UVMATRIX_1 = {
    get(mesh, material, programInfo) {
        if (!material.uvMatrix1) {
            return undefined;
        }
        return material.uvMatrix1.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.CAMERAFAR = {
    get(mesh, material, programInfo) {
        if (camera.isPerspectiveCamera) {
            return camera.far;
        }
        return undefined;
    }
};
/**
 * @type {semanticObject}
 */
semantic.CAMERANEAR = {
    get(mesh, material, programInfo) {
        if (camera.isPerspectiveCamera) {
            return camera.near;
        }
        return undefined;
    }
};
/**
 * @type {semanticObject}
 */
semantic.CAMERATYPE = {
    get(mesh, material, programInfo) {
        if (camera.isPerspectiveCamera) {
            return 1;
        }
        return 0;
    }
};
semantic.CAMERAPOSITION = {
    get(mesh, material, programInfo) {
        return camera.worldMatrix.getTranslation(tempVector3).elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.COLOR_0 = {
    get(mesh, material, programInfo) {
        if (!mesh.geometry.colors) {
            return undefined;
        }
        return mesh.geometry.colors;
    }
};
// uniforms
/**
 * @type {semanticObject}
 */
semantic.RENDERERSIZE = {
    get(mesh, material, programInfo) {
        tempFloat32Array2[0] = renderer.width;
        tempFloat32Array2[1] = renderer.height;
        return tempFloat32Array2;
    }
};
/**
 * @type {semanticObject}
 */
semantic.LOCAL = {
    get(mesh, material, programInfo) {
        return mesh.matrix.elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODEL = {
    get(mesh, material, programInfo) {
        return mesh.worldMatrix.elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.VIEW = {
    get(mesh, material, programInfo) {
        return camera.viewMatrix.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.PROJECTION = {
    get(mesh, material, programInfo) {
        return camera.projectionMatrix.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.VIEWPROJECTION = {
    get(mesh, material, programInfo) {
        return camera.viewProjectionMatrix.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.MODELVIEW = {
    get(mesh, material, programInfo) {
        return camera.getModelViewMatrix(mesh, tempMatrix4).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODELVIEWPROJECTION = {
    get(mesh, material, programInfo) {
        return camera.getModelProjectionMatrix(mesh, tempMatrix4).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODELINVERSE = {
    get(mesh, material, programInfo) {
        return tempMatrix4.invert(mesh.worldMatrix).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.VIEWINVERSE = {
    get(mesh, material, programInfo) {
        return camera.worldMatrix.elements;
    }
};
/**
 * @type {semanticObject}
*/
semantic.VIEWINVERSEINVERSETRANSPOSE = {
    get(mesh, material, programInfo) {
        return tempMatrix3.normalFromMat4(camera.worldMatrix).elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.PROJECTIONINVERSE = {
    get(mesh, material, programInfo) {
        return tempMatrix4.invert(camera.projectionMatrix).elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.MODELVIEWINVERSE = {
    get(mesh, material, programInfo) {
        return tempMatrix4.invert(camera.getModelViewMatrix(mesh, tempMatrix4)).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODELVIEWPROJECTIONINVERSE = {
    get(mesh, material, programInfo) {
        return tempMatrix4.invert(camera.getModelProjectionMatrix(mesh, tempMatrix4)).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODELINVERSETRANSPOSE = {
    get(mesh, material, programInfo) {
        return tempMatrix3.normalFromMat4(mesh.worldMatrix).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.MODELVIEWINVERSETRANSPOSE = {
    get(mesh, material, programInfo) {
        return tempMatrix3.normalFromMat4(camera.getModelViewMatrix(mesh, tempMatrix4)).elements;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.NORMALMAPSCALE = {
    get(mesh, material, programInfo) {
        return material.normalMapScale;
    }
};
/**
 * @type {semanticObject}
 */
semantic.OCCLUSIONSTRENGTH = {
    get(mesh, material, programInfo) {
        return material.occlusionStrength;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SHININESS = {
    get(mesh, material, programInfo) {
        return material.shininess;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPECULARENVMATRIX = {
    get(mesh, material, programInfo) {
        if (material.specularEnvMatrix && material.specularEnvMap) {
            return material.specularEnvMatrix.elements;
        }
        tempMatrix4.identity();
        return tempMatrix4.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.REFLECTIVITY = {
    get(mesh, material, programInfo) {
        return material.reflectivity;
    }
};
/**
 * @type {semanticObject}
 */
semantic.REFRACTRATIO = {
    get(mesh, material, programInfo) {
        return material.refractRatio;
    }
};
/**
 * @type {semanticObject}
 */
semantic.REFRACTIVITY = {
    get(mesh, material, programInfo) {
        return material.refractivity;
    }
};
semantic.LOGDEPTH = {
    get(mesh, material, programInfo) {
        return 2.0 / (Math.log(camera.far + 1.0) / Math.LN2);
    }
};
// light
/**
 * @type {semanticObject}
 */
semantic.AMBIENTLIGHTSCOLOR = {
    get(mesh, material, programInfo) {
        return lightManager.ambientInfo;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSCOLOR = {
    get(mesh, material, programInfo) {
        return lightManager.directionalInfo.colors;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSINFO = {
    get(mesh, material, programInfo) {
        return lightManager.directionalInfo.infos;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSSHADOWMAP = {
    get(mesh, material, programInfo) {
        const result = lightManager.directionalInfo.shadowMap.map((texture, i) => {
            return semantic.handlerTexture(texture, programInfo.textureIndex + i);
        });
        return result;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSSHADOWMAPSIZE = {
    get(mesh, material, programInfo) {
        return lightManager.directionalInfo.shadowMapSize;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSSHADOWBIAS = {
    get(mesh, material, programInfo) {
        return lightManager.directionalInfo.shadowBias;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIRECTIONALLIGHTSPACEMATRIX = {
    get(mesh, material, programInfo) {
        return lightManager.directionalInfo.lightSpaceMatrix;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSPOS = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.poses;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSCOLOR = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.colors;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSINFO = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.infos;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSRANGE = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.ranges;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSSHADOWMAP = {
    get(mesh, material, programInfo) {
        const result = lightManager.pointInfo.shadowMap.map((texture, i) => {
            return semantic.handlerTexture(texture, programInfo.textureIndex + i);
        });
        return result;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSSHADOWBIAS = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.shadowBias;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTSPACEMATRIX = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.lightSpaceMatrix;
    }
};
/**
 * @type {semanticObject}
 */
semantic.POINTLIGHTCAMERA = {
    get(mesh, material, programInfo) {
        return lightManager.pointInfo.cameras;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSPOS = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.poses;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSDIR = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.dirs;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSCOLOR = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.colors;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSCUTOFFS = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.cutoffs;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSINFO = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.infos;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSRANGE = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.ranges;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSSHADOWMAP = {
    get(mesh, material, programInfo) {
        const result = lightManager.spotInfo.shadowMap.map((texture, i) => {
            return semantic.handlerTexture(texture, programInfo.textureIndex + i);
        });
        return result;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSSHADOWMAPSIZE = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.shadowMapSize;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSSHADOWBIAS = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.shadowBias;
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPOTLIGHTSPACEMATRIX = {
    get(mesh, material, programInfo) {
        return lightManager.spotInfo.lightSpaceMatrix;
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSCOLOR = {
    get(mesh, material, programInfo) {
        return lightManager.areaInfo.colors;
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSPOS = {
    get(mesh, material, programInfo) {
        return lightManager.areaInfo.poses;
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSWIDTH = {
    get(mesh, material, programInfo) {
        return lightManager.areaInfo.width;
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSHEIGHT = {
    get(mesh, material, programInfo) {
        return lightManager.areaInfo.height;
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSLTCTEXTURE1 = {
    get(mesh, material, programInfo) {
        return semantic.handlerTexture(lightManager.areaInfo.ltcTexture1, programInfo.textureIndex);
    }
};
/**
 * @type {semanticObject}
 */
semantic.AREALIGHTSLTCTEXTURE2 = {
    get(mesh, material, programInfo) {
        return semantic.handlerTexture(lightManager.areaInfo.ltcTexture2, programInfo.textureIndex);
    }
};
// fog
/**
 * @type {semanticObject}
 */
semantic.FOGCOLOR = {
    get(mesh, material, programInfo) {
        if (fog) {
            return fog.color.elements;
        }
        return undefined;
    }
};
/**
 * @type {semanticObject}
 */
semantic.FOGINFO = {
    get(mesh, material, programInfo) {
        if (fog) {
            return fog.getInfo();
        }
        return undefined;
    }
};
// unQuantize
/**
 * @type {semanticObject}
 */
semantic.POSITIONDECODEMAT = {
    get(mesh, material, programInfo) {
        return mesh.geometry.positionDecodeMat;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.NORMALDECODEMAT = {
    get(mesh, material, programInfo) {
        return mesh.geometry.normalDecodeMat;
    },
    isDependMesh: true
};
/**
 * @type {semanticObject}
 */
semantic.UVDECODEMAT = {
    get(mesh, material, programInfo) {
        return mesh.geometry.uvDecodeMat;
    },
    isDependMesh: true
};
semantic.UV1DECODEMAT = {
    get(mesh, material, programInfo) {
        return mesh.geometry.uv1DecodeMat;
    },
    isDependMesh: true
};
// pbr
/**
 * @type {semanticObject}
 */
semantic.BASECOLOR = {
    get(mesh, material, programInfo) {
        return material.baseColor.elements;
    }
};
/**
 * @type {semanticObject}
 */
semantic.METALLIC = {
    get(mesh, material, programInfo) {
        return material.metallic;
    }
};
/**
 * @type {semanticObject}
 */
semantic.ROUGHNESS = {
    get(mesh, material, programInfo) {
        return material.roughness;
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIFFUSEENVMAP = {
    get(mesh, material, programInfo) {
        return semantic.handlerTexture(material.diffuseEnvMap, programInfo.textureIndex);
    }
};
/**
 * @type {semanticObject}
 */
semantic.DIFFUSEENVINTENSITY = {
    get(mesh, material, programInfo) {
        return material.diffuseEnvIntensity;
    }
};
semantic.DIFFUSEENVSPHEREHARMONICS3 = {
    get(mesh, material, programInfo) {
        const sphereHarmonics3 = material.diffuseEnvSphereHarmonics3;
        if (sphereHarmonics3) {
            return sphereHarmonics3.toArray();
        }
        return undefined;
    }
};
/**
 * @type {semanticObject}
 */
semantic.BRDFLUT = {
    get(mesh, material, programInfo) {
        return semantic.handlerTexture(material.brdfLUT, programInfo.textureIndex);
    }
};
/**
 * @type {semanticObject}
 */
semantic.SPECULARENVMAP = {
    get(mesh, material, programInfo) {
        return semantic.handlerTexture(material.specularEnvMap, programInfo.textureIndex);
    }
};
semantic.SPECULARENVINTENSITY = {
    get(mesh, material, programInfo) {
        return material.specularEnvIntensity;
    }
};
semantic.SPECULARENVMAPMIPCOUNT = {
    get(mesh, material, programInfo) {
        const specularEnvMap = material.specularEnvMap;
        if (specularEnvMap) {
            return specularEnvMap.mipmapCount;
        }
        return 1;
    }
};
semantic.GLOSSINESS = {
    get(mesh, material, programInfo) {
        return material.glossiness;
    }
};
semantic.ALPHACUTOFF = {
    get(mesh, material, programInfo) {
        return material.alphaCutoff;
    }
};
semantic.EXPOSURE = {
    get(mesh, material, programInfo) {
        return material.exposure;
    }
};
semantic.GAMMAFACTOR = {
    get(mesh, material, programInfo) {
        return material.gammaFactor;
    }
};
// Morph Animation Uniforms
semantic.MORPHWEIGHTS = {
    isDependMesh: true,
    notSupportInstanced: true,
    get(mesh, material, programInfo) {
        const geometry = mesh.geometry;
        if (!geometry.isMorphGeometry || !geometry.weights) {
            return undefined;
        }
        return geometry.weights;
    }
};
// Morph Animation Attributes
[
    ['POSITION', 'vertices'],
    ['NORMAL', 'normals'],
    ['TANGENT', 'tangents']
].forEach((info) => {
    for (let i = 0; i < 8; i++) {
        semantic['MORPH' + info[0] + i] = {
            get: (function (name, i) {
                return function (mesh, material, programInfo) {
                    const geometry = mesh.geometry;
                    if (!geometry.isMorphGeometry || !geometry.targets || !geometry.targets[name]) {
                        return undefined;
                    }
                    let idx = geometry._originalMorphIndices ? geometry._originalMorphIndices[i] : i;
                    const data = geometry.targets[name][idx];
                    const idxCacheKey = `_target_${name}_${i}`;
                    if (geometry[idxCacheKey] !== idx && data) {
                        data.isDirty = true;
                        geometry[idxCacheKey] = idx;
                    }
                    return data;
                };
            }(info[1], i))
        };
    }
});
// Texture or Vector4
[
    ['DIFFUSE', 'diffuse'],
    ['SPECULAR', 'specular'],
    ['EMISSION', 'emission'],
    ['AMBIENT', 'ambient']
].forEach((info) => {
    const [semanticName, textureName,] = info;
    semantic[semanticName] = {
        get(mesh, material, programInfo) {
            return semantic.handlerColorOrTexture(material[textureName], programInfo.textureIndex);
        }
    };
    semantic[`${semanticName}UV`] = {
        get(mesh, material, programInfo) {
            return semantic.handlerUV(material[textureName]);
        }
    };
});
// Texture
[
    ['NORMALMAP', 'normalMap'],
    ['PARALLAXMAP', 'parallaxMap'],
    ['BASECOLORMAP', 'baseColorMap'],
    ['METALLICMAP', 'metallicMap'],
    ['ROUGHNESSMAP', 'roughnessMap'],
    ['METALLICROUGHNESSMAP', 'metallicRoughnessMap'],
    ['OCCLUSIONMAP', 'occlusionMap'],
    ['SPECULARGLOSSINESSMAP', 'specularGlossinessMap'],
    ['LIGHTMAP', 'lightMap']
].forEach((info) => {
    const [semanticName, textureName,] = info;
    semantic[semanticName] = {
        get(mesh, material, programInfo) {
            return semantic.handlerTexture(material[textureName], programInfo.textureIndex);
        }
    };
    semantic[`${semanticName}UV`] = {
        get(mesh, material, programInfo) {
            return semantic.handlerUV(material[textureName]);
        }
    };
});
// TRANSPARENCY
[
    ['TRANSPARENCY', 'transparency']
].forEach((info) => {
    const [semanticName, textureName,] = info;
    semantic[semanticName] = {
        get(mesh, material, programInfo) {
            const value = material[textureName];
            if (value && value.isTexture) {
                return semantic.handlerTexture(value, programInfo.textureIndex);
            }
            if (value !== undefined && value !== null) {
                return value;
            }
            return 1;
        }
    };
    semantic[`${semanticName}UV`] = {
        get(mesh, material, programInfo) {
            return semantic.handlerUV(material[textureName]);
        }
    };
});


/***/ }),

/***/ "./src/engine/renderer/TextureOptions.ts":
/*!***********************************************!*\
  !*** ./src/engine/renderer/TextureOptions.ts ***!
  \***********************************************/
/*! exports provided: TextureOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextureOptions", function() { return TextureOptions; });
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _texture_Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../texture/Texture */ "./src/engine/texture/Texture.ts");


class TextureOptions {
    constructor() {
        this.uvTypes = null;
        this.option = null;
    }
    reset(option) {
        this.option = option;
        this.uvTypes = {};
        return this;
    }
    add(texture, optionName, callback) {
        if (texture) {
            const { uvTypes, option } = this;
            let uv = 0;
            if (texture instanceof _texture_Texture__WEBPACK_IMPORTED_MODULE_1__["default"]) {
                uv = texture.uv;
            }
            uvTypes[uv] = 1;
            option[optionName] = uv;
            if (callback) {
                callback(texture);
            }
        }
        return this;
    }
    update() {
        const supportUV = [0, 1];
        const { uvTypes, option } = this;
        for (const type in uvTypes) {
            if (supportUV.indexOf(Number(type)) !== -1) {
                option[`HAS_TEXCOORD${type}`] = 1;
            }
            else {
                _utils_Log__WEBPACK_IMPORTED_MODULE_0__["log"].warnOnce(`Material._textureOption.update(${type})`, `uv_${type} not support!`);
                option.HAS_TEXCOORD0 = 1;
            }
        }
        return this;
    }
}


/***/ }),

/***/ "./src/engine/renderer/VertexArrayObject.ts":
/*!**************************************************!*\
  !*** ./src/engine/renderer/VertexArrayObject.ts ***!
  \**************************************************/
/*! exports provided: VertexArrayObject, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexArrayObject", function() { return VertexArrayObject; });
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions */ "./src/engine/renderer/extensions.ts");
/* harmony import */ var _GLBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GLBuffer */ "./src/engine/renderer/GLBuffer.ts");




const { TRIANGLES } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"];
let globalStates = [];
let currentVao = null;
const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
/**
 * VAO
 * @class
 */
class VertexArrayObject {
    /**
     * @constructs
     * @param  {WebGLRenderingContext} gl
     * @param  {String} id  缓存id
     * @param  {Object} params
     */
    constructor(gl, id, useVao, mode) {
        /**
         * @default VertexArrayObject
         * @type {String}
         */
        this.className = 'VertexArrayObject';
        /**
         * @default true
         * @type {Boolean}
         */
        this.isVertexArrayObject = true;
        /**
         * 顶点数量
         * @type {Number}
         * @private
         */
        this.vertexCount = null;
        /**
         * 是否使用 vao
         * @type {Boolean}
         * @default false
         */
        this.useVao = false;
        /**
         * 是否使用 instanced
         * @type {Boolean}
         * @default false
         */
        this.useInstanced = false;
        /**
         * 绘图方式
         * @type {GLEnum}
         * @default gl.TRIANGLES
         */
        this.mode = TRIANGLES;
        /**
         * 是否脏
         * @type {Boolean}
         * @default true
         */
        this.isDirty = true;
        this.gl = gl;
        this.id = id;
        this.vaoExtension = _extensions__WEBPACK_IMPORTED_MODULE_2__["default"].vao;
        this.instancedExtension = _extensions__WEBPACK_IMPORTED_MODULE_2__["default"].instanced;
        this.useVao = useVao;
        this.mode = mode;
        if (!this.vaoExtension) {
            this.useVao = false;
        }
        if (!this.instancedExtension) {
            this.useInstanced = false;
        }
        if (this.useVao) {
            this.vao = this.vaoExtension.createVertexArrayOES();
        }
        this.attributes = [];
        this.activeStates = [];
        this.indexBuffer = null;
    }
    /**
     * 缓存
     * @readOnly
     * @return {Cache}
     */
    static get cache() {
        return cache;
    }
    /**
     * 获取 vao
     * @param  {WebGLRenderingContext} gl
     * @param  {String} id  缓存id
     * @param  {Object} params
     * @return {VertexArrayObject}
     */
    static getVao(gl, id, useVao, mode) {
        let vao = cache.get(id);
        if (!vao) {
            vao = new VertexArrayObject(gl, id, useVao, mode);
            cache.add(id, vao);
        }
        else if (mode && mode !== vao.mode) {
            // for geometry.mode change
            vao.mode = mode;
        }
        return vao;
    }
    /**
     * 重置所有vao
     * @param  {WebGLRenderingContext} gl
     */
    static reset(gl) {
        currentVao = null;
        globalStates = [];
        this.bindSystemVao();
        cache.each((vao) => {
            vao.destroy(gl);
        });
    }
    /**
     * 绑定系统vao
     */
    static bindSystemVao() {
        if (_extensions__WEBPACK_IMPORTED_MODULE_2__["default"].vao) {
            _extensions__WEBPACK_IMPORTED_MODULE_2__["default"].vao.bindVertexArrayOES(null);
        }
        currentVao = null;
    }
    /**
     * bind
     */
    bind() {
        if (currentVao !== this) {
            if (this.useVao) {
                this.vaoExtension.bindVertexArrayOES(this.vao);
            }
            else {
                this.bindSystemVao();
            }
            currentVao = this;
        }
    }
    /**
     * @private
     */
    bindSystemVao() {
        const gl = this.gl;
        if (currentVao && currentVao.useVao) {
            currentVao.unbind();
        }
        const activeStates = this.activeStates;
        let lastBuffer;
        this.attributes.forEach((attributeObject) => {
            const { buffer, attribute, geometryData } = attributeObject;
            if (lastBuffer !== buffer) {
                lastBuffer = buffer;
                buffer.bind();
            }
            attribute.enable();
            attribute.pointer(geometryData);
            if (attributeObject.useInstanced) {
                attribute.divisor(1);
            }
            else {
                attribute.divisor(0);
            }
        });
        globalStates.forEach((globalAttributeObject, i) => {
            const activeAttributeObject = activeStates[i];
            if (globalAttributeObject && !activeAttributeObject) {
                globalAttributeObject.attribute.divisor(0);
                gl.disableVertexAttribArray(i);
            }
        });
        if (this.indexBuffer) {
            this.indexBuffer.bind();
        }
        globalStates = activeStates;
    }
    /**
     * unbind
     */
    unbind() {
        if (this.useVao) {
            this.vaoExtension.bindVertexArrayOES(null);
        }
        currentVao = null;
    }
    /**
     * draw
     */
    draw() {
        this.bind();
        const { gl, mode } = this;
        if (this.indexBuffer) {
            gl.drawElements(mode, this.vertexCount, this.indexType, 0);
        }
        else {
            gl.drawArrays(mode, 0, this.getVertexCount());
        }
    }
    /**
     * 获取顶点数量
     * @return {Number} 顶点数量
     */
    getVertexCount() {
        if (this.vertexCount === null) {
            const attributeObj = this.attributes[0];
            if (attributeObj) {
                this.vertexCount = attributeObj.geometryData.count;
            }
            else {
                this.vertexCount = 0;
            }
        }
        return this.vertexCount;
    }
    /**
     * drawInstance
     * @param  {Number} [primcount=1]
     */
    drawInstance(primcount = 1) {
        this.bind();
        const { gl, mode } = this;
        if (this.useInstanced) {
            if (this.indexBuffer) {
                this.instancedExtension.drawElementsInstancedANGLE(mode, this.vertexCount, gl.UNSIGNED_SHORT, 0, primcount);
            }
            else {
                this.instancedExtension.drawArraysInstancedANGLE(mode, 0, this.getVertexCount(), primcount);
            }
        }
    }
    /**
     * addIndexBuffer
     * @param {GeometryData} data
     * @param {GLenum} usage gl.STATIC_DRAW|gl.DYNAMIC_DRAW
     * @return {GLBuffer} Buffer
     */
    addIndexBuffer(geometryData, usage) {
        this.bind();
        const gl = this.gl;
        let buffer = this.indexBuffer;
        this.indexType = geometryData.type;
        if (!buffer) {
            buffer = _GLBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].createIndexBuffer(gl, geometryData, usage);
            buffer.bind();
            this.indexBuffer = buffer;
            this.vertexCount = geometryData.length;
        }
        else if (geometryData.isDirty) {
            buffer.uploadGeometryData(geometryData);
            this.vertexCount = geometryData.length;
        }
        return buffer;
    }
    /**
     * addAttribute
     * @param {GeometryData} geometryData
     * @param {Object} attribute
     * @param {GLenum} usage gl.STATIC_DRAW|gl.DYNAMIC_DRAW
     * @param {Function} onInit
     * @return {AttributeObject} attributeObject
     */
    addAttribute(geometryData, attribute, usage, onInit) {
        this.bind();
        const gl = this.gl;
        const name = attribute.name;
        let attributeObject = this[name];
        if (!attributeObject) {
            const buffer = _GLBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].createVertexBuffer(gl, geometryData, usage);
            buffer.bind();
            attribute.enable();
            attribute.pointer(geometryData);
            attributeObject = {
                attribute,
                buffer,
                geometryData
            };
            this.attributes.push(attributeObject);
            this[name] = attributeObject;
            attribute.addTo(this.activeStates, attributeObject);
            if (onInit) {
                onInit(attributeObject);
            }
        }
        else if (geometryData.isDirty) {
            attributeObject.buffer.uploadGeometryData(geometryData);
        }
        return attributeObject;
    }
    /**
     * 使用了资源
     * @param  {WebGLResourceManager} resourceManager
     * @param  {Mesh} mesh
     * @return {VertexArrayObject}
     */
    useResource(resourceManager, mesh) {
        this.attributes.forEach((attributeObject) => {
            resourceManager.useResource(attributeObject.buffer, mesh);
        });
        if (this.indexBuffer) {
            resourceManager.useResource(this.indexBuffer, mesh);
        }
        return this;
    }
    /**
     * 没有被引用时销毁资源
     * @param  {WebGLRenderer} renderer
     * @return {VertexArrayObject} this
     */
    destroyIfNoRef(renderer) {
        const resourceManager = renderer.resourceManager;
        resourceManager.destroyIfNoRef(this);
        return this;
    }
    /**
     * 销毁资源
     * @return {VertexArrayObject} this
     */
    destroy() {
        if (this._isDestroyed) {
            return this;
        }
        if (this.useVao) {
            this.vaoExtension.deleteVertexArrayOES(this.vao);
        }
        this.gl = null;
        this.indexBuffer = null;
        this.attributes.forEach((attributeObject) => {
            const attribute = attributeObject;
            this[attribute.name] = null;
        });
        this.attributes = null;
        this.activeStates = null;
        cache.removeObject(this);
        this._isDestroyed = true;
        return this;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (VertexArrayObject);


/***/ }),

/***/ "./src/engine/renderer/WebGLRenderer.ts":
/*!**********************************************!*\
  !*** ./src/engine/renderer/WebGLRenderer.ts ***!
  \**********************************************/
/*! exports provided: WebGLRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLRenderer", function() { return WebGLRenderer; });
/* harmony import */ var _event_EventObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../event/EventObject */ "./src/engine/event/EventObject.ts");
/* harmony import */ var _math_Color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Color */ "./src/engine/math/Color.ts");
/* harmony import */ var _RenderInfo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RenderInfo */ "./src/engine/renderer/RenderInfo.ts");
/* harmony import */ var _RenderList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RenderList */ "./src/engine/renderer/RenderList.ts");
/* harmony import */ var _light_LightManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../light/LightManager */ "./src/engine/light/LightManager.ts");
/* harmony import */ var _WebGLResourceManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WebGLResourceManager */ "./src/engine/renderer/WebGLResourceManager.ts");
/* harmony import */ var _WebGlState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WebGlState */ "./src/engine/renderer/WebGlState.ts");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extensions */ "./src/engine/renderer/extensions.ts");
/* harmony import */ var _capabilities__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./capabilities */ "./src/engine/renderer/capabilities.ts");
/* harmony import */ var _glType__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./glType */ "./src/engine/renderer/glType.ts");
/* harmony import */ var _shader_shader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shader/shader */ "./src/engine/shader/shader.ts");
/* harmony import */ var _Program__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Program */ "./src/engine/renderer/Program.ts");
/* harmony import */ var _texture_Texture__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../texture/Texture */ "./src/engine/texture/Texture.ts");
/* harmony import */ var _GLBuffer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./GLBuffer */ "./src/engine/renderer/GLBuffer.ts");
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");
/* harmony import */ var _core_Mesh__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../core/Mesh */ "./src/engine/core/Mesh.ts");
/* harmony import */ var _VertexArrayObject__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./VertexArrayObject */ "./src/engine/renderer/VertexArrayObject.ts");
/* harmony import */ var _Semantic__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Semantic */ "./src/engine/renderer/Semantic.ts");
/* harmony import */ var _core_GameObject__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../core/GameObject */ "./src/engine/core/GameObject.ts");
/* harmony import */ var _light_Light__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../light/Light */ "./src/engine/light/Light.ts");




















const { DEPTH_TEST, SAMPLE_ALPHA_TO_COVERAGE, CULL_FACE, FRONT_AND_BACK, BLEND, LINES, STATIC_DRAW, DYNAMIC_DRAW } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_14__["glConstants"];
class WebGLRenderer extends _event_EventObject__WEBPACK_IMPORTED_MODULE_0__["EventObject"] {
    constructor(domElement, clearColor) {
        super();
        /**
         * gl
         * @default null
         * @type {WebGLRenderingContext}
         */
        this.gl = null;
        /**
        * 宽
        * @type {number}
        * @default 0
        */
        this.width = 0;
        /**
         * 高
         * @type {number}
         * @default 0
         */
        this.height = 0;
        /**
        * 偏移值
        * @type {Number}
        * @default 0
        */
        this.offsetX = 0;
        /**
         * 偏移值
         * @type {Number}
         * @default 0
         */
        this.offsetY = 0;
        /**
         * 像素密度
         * @type {number}
         * @default 1
         */
        this.pixelRatio = 1;
        /**
         * dom元素
         * @type {Canvas}
         * @default null
         */
        this.domElement = null;
        /**
         * 是否开启透明背景
         * @type {boolean}
         * @default false
         */
        this.alpha = false;
        /**
         * @type {boolean}
         * @default true
         */
        this.depth = true;
        /**
         * @type {boolean}
         * @default false
         */
        this.stencil = false;
        /**
        * 顶点着色器精度, 可以是以下值：highp, mediump, lowp
        * @type {string}
        * @default highp
        */
        this.vertexPrecision = 'highp';
        /**
         * 片段着色器精度, 可以是以下值：highp, mediump, lowp
         * @type {string}
         * @default mediump
         */
        this.fragmentPrecision = 'highp';
        /**
        * 是否初始化失败
        * @default false
        * @type {Boolean}
        */
        this.isInitFailed = false;
        /**
         * 是否初始化
         * @type {Boolean}
         * @default false
         * @private
         */
        this._isInit = false;
        /**
         * 是否lost context
         * @type {Boolean}
         * @default false
         * @private
         */
        this._isContextLost = false;
        /**
         * 是否使用VAO
         * @type {Boolean}
         * @default true
         */
        this.useVao = true;
        if (clearColor) {
            this.clearColor = clearColor;
        }
        else {
            this.clearColor = new _math_Color__WEBPACK_IMPORTED_MODULE_1__["default"](1, 1, 1);
        }
        this.domElement = domElement;
        this.renderInfo = new _RenderInfo__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.renderList = new _RenderList__WEBPACK_IMPORTED_MODULE_3__["default"]();
        this.lightManager = new _light_LightManager__WEBPACK_IMPORTED_MODULE_4__["LightManager"]();
        this.resourceManager = new _WebGLResourceManager__WEBPACK_IMPORTED_MODULE_5__["default"]();
    }
    /**
    * 改变大小
    * @param  {number} width  宽
    * @param  {number} height  高
    * @param  {boolean} [force=false] 是否强制刷新
    */
    resize(width, height, force) {
        if (force || this.width !== width || this.height !== height) {
            const canvas = this.domElement;
            this.width = width;
            this.height = height;
            canvas.width = width;
            canvas.height = height;
            this.viewport();
        }
    }
    /**
     * 设置viewport偏移值
     * @param {Number} x x
     * @param {Number} y y
     */
    setOffset(x, y) {
        if (this.offsetX !== x || this.offsetY !== y) {
            this.offsetX = x;
            this.offsetY = y;
            this.viewport();
        }
    }
    /**
    * 设置viewport
    * @param  {Number} [x=this.offsetX]  x
    * @param  {Number} [y=this.offsetY] y
    * @param  {Number} [width=this.gl.drawingBufferWidth]  width
    * @param  {Number} [height=this.gl.drawingBufferHeight]  height
    */
    viewport(x, y, width, height) {
        const { state, gl } = this;
        if (state) {
            if (x === undefined) {
                x = this.offsetX;
            }
            else {
                this.offsetX = x;
            }
            if (y === undefined) {
                y = this.offsetY;
            }
            else {
                this.offsetY = y;
            }
            if (width === undefined) {
                width = gl.drawingBufferWidth;
            }
            if (height === undefined) {
                height = gl.drawingBufferHeight;
            }
            state.viewport(x, y, width, height);
        }
    }
    /**
    * 是否初始化
    * @type {Boolean}
    * @default false
    * @readOnly
    */
    get isInit() {
        return this._isInit && !this.isInitFailed;
    }
    /**
     * 初始化回调
     * @return {WebGLRenderer} this
     */
    onInit(callback) {
        if (this._isInit) {
            callback(this);
        }
        else {
            this.on('init', () => {
                callback(this);
            }, true);
        }
    }
    /**
    * 初始化 context
    */
    initContext() {
        if (!this._isInit) {
            this._isInit = true;
            try {
                this._initContext();
                this.fire('init');
            }
            catch (e) {
                this.isInitFailed = true;
                this.fire('initFailed', e);
            }
        }
    }
    _initContext() {
        const contextAttributes = {
            alpha: this.alpha,
            depth: this.depth,
            stencil: this.stencil
        };
        let gl = this.gl = this.domElement.getContext('webgl', contextAttributes);
        gl.viewport(0, 0, this.width, this.height);
        _glType__WEBPACK_IMPORTED_MODULE_9__["default"].init(gl);
        _extensions__WEBPACK_IMPORTED_MODULE_7__["default"].init(gl);
        _capabilities__WEBPACK_IMPORTED_MODULE_8__["default"].init(gl);
        _shader_shader__WEBPACK_IMPORTED_MODULE_10__["default"].init(this);
        this.state = new _WebGlState__WEBPACK_IMPORTED_MODULE_6__["WebGLState"](gl);
        if (!_extensions__WEBPACK_IMPORTED_MODULE_7__["default"].vao) {
            this.useVao = false;
        }
        this.domElement.addEventListener('webglcontextlost', (e) => {
            this._onContextLost(e);
        }, false);
        this.domElement.addEventListener('webglcontextrestored', (e) => {
            this._onContextRestore(e);
        }, false);
    }
    _onContextLost(e) {
        this.fire('webglContextLost');
        const gl = this.gl;
        this._isContextLost = true;
        e.preventDefault();
        _Program__WEBPACK_IMPORTED_MODULE_11__["default"].reset(gl);
        _shader_shader__WEBPACK_IMPORTED_MODULE_10__["default"].reset(gl);
        _texture_Texture__WEBPACK_IMPORTED_MODULE_12__["default"].reset(gl);
        _GLBuffer__WEBPACK_IMPORTED_MODULE_13__["default"].reset(gl);
        this.state.reset(gl);
        this._lastMaterial = null;
        this._lastProgram = null;
    }
    _onContextRestore(e) {
        this.fire('webglContextRestored');
        const gl = this.gl;
        this._isContextLost = false;
        _extensions__WEBPACK_IMPORTED_MODULE_7__["default"].reset(gl);
    }
    /**
     * 设置深度检测
     * @param  {Material} material
     */
    setupDepthTest(material) {
        const state = this.state;
        if (material.depthTest) {
            state.enable(DEPTH_TEST);
            state.depthFunc(material.depthFunc);
            state.depthMask(material.depthMask);
            state.depthRange(material.depthRange[0], material.depthRange[1]);
        }
        else {
            state.disable(DEPTH_TEST);
        }
    }
    /**
     * 设置背面剔除
     * @param  {Material} material
     */
    setupCullFace(material) {
        const state = this.state;
        if (material.cullFace && material.cullFaceType !== FRONT_AND_BACK) {
            state.enable(CULL_FACE);
            state.cullFace(material.cullFaceType);
        }
        else {
            state.disable(CULL_FACE);
        }
    }
    /**
     * 设置混合
     * @param  {Material} material
     */
    setupBlend(material) {
        const state = this.state;
        if (material.blend) {
            state.enable(BLEND);
            state.blendFuncSeparate(material.blendSrc, material.blendDst, material.blendSrcAlpha, material.blendDstAlpha);
            state.blendEquationSeparate(material.blendEquation, material.blendEquationAlpha);
        }
        else {
            state.disable(BLEND);
        }
    }
    /**
    * 设置vao
    * @param  {VertexArrayObject} vao
    * @param  {Program} program
    * @param  {Mesh} mesh
    */
    setupVao(vao, program, mesh) {
        const geometry = mesh.geometry;
        const isStatic = geometry.isStatic;
        if (vao.isDirty || !isStatic || geometry.isDirty) {
            vao.isDirty = false;
            const material = this.forceMaterial || mesh.material;
            const materialAttributes = material.attributes;
            const usage = isStatic ? STATIC_DRAW : DYNAMIC_DRAW;
            for (let name in materialAttributes) {
                const programAttribute = program.attributes[name];
                if (programAttribute) {
                    const data = material.getAttributeData(name, mesh, programAttribute);
                    if (data !== undefined && data !== null) {
                        vao.addAttribute(data, programAttribute, usage);
                    }
                }
            }
            if (geometry.indices) {
                vao.addIndexBuffer(geometry.indices, usage);
            }
            geometry.isDirty = false;
        }
        if (geometry.vertexCount) {
            vao.vertexCount = geometry.vertexCount;
        }
    }
    /**
     * 设置通用的 uniform
     * @param  {Program} program
     * @param  {Mesh} mesh
     * @param  {Boolean} [force=false] 是否强制更新
     */
    setupUniforms(program, mesh, force) {
        const material = this.forceMaterial || mesh.material;
        for (let name in program.uniforms) {
            const uniformInfo = material.getUniformInfo(name);
            const programUniformInfo = program.uniforms[name];
            if (!uniformInfo.isBlankInfo) {
                if (force || uniformInfo.isDependMesh) {
                    const uniformData = uniformInfo.get(mesh, material, programUniformInfo);
                    if (uniformData !== undefined && uniformData !== null) {
                        program[name] = uniformData;
                    }
                }
            }
        }
    }
    /**
     * 设置材质
     * @param  {Program} program
     * @param  {Mesh} mesh
     */
    setupMaterial(program, mesh, needForceUpdateUniforms = false) {
        const material = this.forceMaterial || mesh.material;
        if (material.isDirty || this._lastMaterial !== material) {
            this.setupDepthTest(material);
            this.setupCullFace(material);
            this.setupBlend(material);
            needForceUpdateUniforms = true;
        }
        this.setupUniforms(program, mesh, needForceUpdateUniforms);
        material.isDirty = false;
        this._lastMaterial = material;
    }
    /**
   * 设置mesh
   * @param  {Mesh} mesh
   * @return {Object} res
   * @return {VertexArrayObject} res.vao
   * @return {Program} res.program
   * @return {Geometry} res.geometry
   */
    setupMesh(mesh) {
        const gl = this.gl;
        const state = this.state;
        const lightManager = this.lightManager;
        const resourceManager = this.resourceManager;
        const geometry = mesh.geometry;
        const material = this.forceMaterial || mesh.material;
        const shader = _shader_shader__WEBPACK_IMPORTED_MODULE_10__["default"].getShader(mesh, material, lightManager);
        const program = _Program__WEBPACK_IMPORTED_MODULE_11__["default"].getProgram(shader, state);
        program.useProgram();
        this.setupMaterial(program, mesh, this._lastProgram !== program);
        this._lastProgram = program;
        if (mesh.material.wireframe && geometry.mode !== LINES) {
            geometry.convertToLinesMode();
        }
        const vaoId = geometry.id + program.id;
        const vao = _VertexArrayObject__WEBPACK_IMPORTED_MODULE_16__["default"].getVao(gl, vaoId, this.useVao, geometry.mode);
        this.setupVao(vao, program, mesh);
        resourceManager.useResource(vao, mesh).useResource(shader, mesh).useResource(program, mesh);
        return {
            vao,
            program,
            geometry
        };
    }
    /**
    * 增加渲染信息
    * @param {Number} faceCount 面数量
    * @param {Number} drawCount 绘图数量
    */
    addRenderInfo(faceCount, drawCount) {
        const renderInfo = this.renderInfo;
        renderInfo.addFaceCount(faceCount);
        renderInfo.addDrawCount(drawCount);
    }
    /**
     * 渲染
     * @param  {Stage} stage
     * @param  {Camera} camera
     * @param  {Boolean} [fireEvent=false] 是否发送事件
     */
    render(stage, camera, fireEvent = false) {
        this.initContext();
        if (this.isInitFailed || this._isContextLost) {
            return;
        }
        const { renderList, renderInfo, lightManager, resourceManager, state } = this;
        lightManager.reset();
        renderInfo.reset();
        renderList.reset();
        resourceManager.reset();
        _Semantic__WEBPACK_IMPORTED_MODULE_17__["semantic"].init(this, state, camera, lightManager);
        stage.updateMatrixWorld();
        camera.updateViewProjectionMatrix();
        stage.traverse((node) => {
            if (!node.visible) {
                return _core_GameObject__WEBPACK_IMPORTED_MODULE_18__["default"].TRAVERSE_STOP_CHILDREN;
            }
            if (node instanceof _core_Mesh__WEBPACK_IMPORTED_MODULE_15__["Mesh"]) {
                renderList.addMesh(node, camera);
            }
            else if (node instanceof _light_Light__WEBPACK_IMPORTED_MODULE_19__["Light"]) {
                lightManager.addLight(node);
            }
            return _core_GameObject__WEBPACK_IMPORTED_MODULE_18__["default"].TRAVERSE_STOP_NONE;
        });
        renderList.sort();
        lightManager.updateInfo(camera);
        if (fireEvent) {
            this.fire('beforeRender');
        }
        this.clear();
        if (fireEvent) {
            this.fire('beforeRenderScene');
        }
        this.renderScene();
        if (fireEvent) {
            this.fire('afterRender');
        }
        resourceManager.destroyUnsuedResource();
    }
    /**
    * 渲染场景
    */
    renderScene() {
        const renderList = this.renderList;
        renderList.traverse((mesh) => {
            this.renderMesh(mesh);
        });
    }
    /**
    * 清除背景
    * @param  {Color} [clearColor=this.clearColor]
    */
    clear(clearColor) {
        const { gl, state } = this;
        clearColor = clearColor || this.clearColor;
        state.depthMask(true);
        this._lastMaterial = null;
        this._lastProgram = null;
        gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    }
    /**
    * 渲染一个mesh
    * @param  {Mesh} mesh
    */
    renderMesh(mesh) {
        const vao = this.setupMesh(mesh).vao;
        vao.draw();
        this.addRenderInfo(vao.vertexCount / 3, 1);
    }
    /**
    * 渲染一组普通mesh
    * @param  {Mesh[]} meshes
    */
    renderMultipleMeshes(meshes) {
        meshes.forEach((mesh) => {
            this.renderMesh(mesh);
        });
    }
    /**
    * 销毁 WebGL 资源
    */
    releaseGLResource() {
        const gl = this.gl;
        if (gl) {
            _Program__WEBPACK_IMPORTED_MODULE_11__["default"].reset(gl);
            _shader_shader__WEBPACK_IMPORTED_MODULE_10__["default"].reset(gl);
            _GLBuffer__WEBPACK_IMPORTED_MODULE_13__["default"].reset(gl);
            _VertexArrayObject__WEBPACK_IMPORTED_MODULE_16__["default"].reset(gl);
            this.state.reset(gl);
            _texture_Texture__WEBPACK_IMPORTED_MODULE_12__["default"].reset(gl);
        }
    }
}


/***/ }),

/***/ "./src/engine/renderer/WebGLResourceManager.ts":
/*!*****************************************************!*\
  !*** ./src/engine/renderer/WebGLResourceManager.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * WebGLResourceManager 资源管理器
 * @class
 */
class WebGLResourceManager {
    /**
     * @constructs始化参数，所有params都会复制到实例上
     */
    constructor() {
        /**
         * 是否有需要销毁的资源
         * @type {boolean}
         * @default false
         */
        this.hasNeedDestroyResource = false;
    }
    /**
     * 标记使用资源
     * @param  {Object} res
     * @param  {Mesh} mesh 使用资源的mesh
     * @return {WebGLResourceManager} this
     */
    useResource(res, mesh) {
        if (res) {
            const key = res.constructor.name + ':' + res.id;
            if (!this._usedResourceDict[key]) {
                this._usedResourceDict[key] = res;
                if (res.useResource) {
                    res.useResource(this, mesh);
                }
            }
        }
        if (mesh) {
            mesh.useResource(res);
        }
        return this;
    }
    /**
     * 没有引用时销毁资源
     * @param  {Object} res
     * @return {WebGLResourceManager} this
     */
    destroyIfNoRef(res) {
        if (!this._needDestroyDict) {
            this._needDestroyDict = {};
        }
        if (res) {
            this.hasNeedDestroyResource = true;
            this._needDestroyDict[res.className + ':' + res.id] = res;
        }
        return this;
    }
    /**
     * 销毁没被使用的资源
     * @return {WebGLResourceManager} this
     */
    destroyUnsuedResource() {
        if (!this.hasNeedDestroyResource) {
            return this;
        }
        const _needDestroyDict = this._needDestroyDict;
        const _usedResourceDict = this._usedResourceDict;
        for (let key in _needDestroyDict) {
            if (!_usedResourceDict[key]) {
                const res = _needDestroyDict[key];
                if (res && !res.alwaysUse && res.destroy) {
                    res.destroy();
                }
            }
        }
        this._needDestroyDict = {};
        this.hasNeedDestroyResource = false;
        return this;
    }
    /**
     * 重置
     * @return {WebGLResourceManager} this
     */
    reset() {
        this._usedResourceDict = {};
        return this;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (WebGLResourceManager);


/***/ }),

/***/ "./src/engine/renderer/WebGlState.ts":
/*!*******************************************!*\
  !*** ./src/engine/renderer/WebGlState.ts ***!
  \*******************************************/
/*! exports provided: WebGLState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebGLState", function() { return WebGLState; });
/**
 * WebGL 状态管理，减少 api 调用
 * @class
 */
class WebGLState {
    /**
     * @constructs
     * @param  {WebGLRenderingContext} gl
     */
    constructor(gl) {
        this.gl = gl;
        this.reset(gl);
    }
    /**
     * 重置状态
     */
    reset(gl) {
        this._dict = {};
        this.activeTextureIndex = null;
        this.textureUnitDict = {};
        this.currentFramebuffer = null;
        this.preFramebuffer = null;
    }
    /**
     * enable
     * @param  {GLenum} capability
     */
    enable(capability) {
        const value = this._dict[capability];
        if (value !== true) {
            this._dict[capability] = true;
            this.gl.enable(capability);
        }
    }
    /**
     * disable
     * @param  {GLenum} capability
     */
    disable(capability) {
        const value = this._dict[capability];
        if (value !== false) {
            this._dict[capability] = false;
            this.gl.disable(capability);
        }
    }
    /**
     * bindFramebuffer
     * @param  {GLenum} target
     * @param  {WebGLFramebuffer} framebuffer
     */
    bindFramebuffer(target, framebuffer) {
        if (this.currentFramebuffer !== framebuffer) {
            this.preFramebuffer = this.currentFramebuffer;
            this.currentFramebuffer = framebuffer;
            this.gl.bindFramebuffer(target, framebuffer);
        }
    }
    /**
     * 绑定系统framebuffer
     */
    bindSystemFramebuffer() {
        this.bindFramebuffer(this.gl.FRAMEBUFFER, this.systemFramebuffer);
    }
    /**
     * useProgram
     * @param  { WebGLProgram} program
     */
    useProgram(program) {
        this.set1('useProgram', program);
    }
    /**
     * depthFunc
     * @param  {GLenum } func
     */
    depthFunc(func) {
        this.set1('depthFunc', func);
    }
    /**
     * depthMask
     * @param  {GLenum } flag
     */
    depthMask(flag) {
        this.set1('depthMask', flag);
    }
    /**
     * clear
     * @param  {Number} mask
     */
    clear(mask) {
        this.gl.clear(mask);
    }
    /**
     * depthRange
     * @param  {Number} zNear
     * @param  {Number} zFar
     */
    depthRange(zNear, zFar) {
        this.set2('depthRange', zNear, zFar);
    }
    /**
     * stencilFunc
     * @param  {GLenum} func
     * @param  {Number} ref
     * @param  {Number} mask
     */
    stencilFunc(func, ref, mask) {
        this.set3('stencilFunc', func, ref, mask);
    }
    /**
     * stencilMask
     * @param  {Number} mask
     */
    stencilMask(mask) {
        this.set1('stencilMask', mask);
    }
    /**
     * stencilOp
     * @param  {GLenum} fail
     * @param  {GLenum} zfail
     * @param  {GLenum} zpass
     */
    stencilOp(fail, zfail, zpass) {
        this.set3('stencilOp', fail, zfail, zpass);
    }
    /**
     * colorMask
     * @param  {Boolean} red
     * @param  {Boolean} green
     * @param  {Boolean} blue
     * @param  {Boolean} alpha
     */
    colorMask(red, green, blue, alpha) {
        this.set4('colorMask', red, green, blue, alpha);
    }
    /**
     * cullFace
     * @param  {GLenum} mode
     */
    cullFace(mode) {
        this.set1('cullFace', mode);
    }
    /**
     * frontFace
     * @param  {GLenum} mode
     */
    frontFace(mode) {
        this.set1('frontFace', mode);
    }
    /**
     * blendFuncSeparate
     * @param  {GLenum} srcRGB
     * @param  {GLenum} dstRGB
     * @param  {GLenum} srcAlpha
     * @param  {GLenum} dstAlpha
     */
    blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {
        this.set4('blendFuncSeparate', srcRGB, dstRGB, srcAlpha, dstAlpha);
    }
    /**
     * blendEquationSeparate
     * @param  {GLenum} modeRGB
     * @param  {GLenum} modeAlpha
     */
    blendEquationSeparate(modeRGB, modeAlpha) {
        this.set2('blendEquationSeparate', modeRGB, modeAlpha);
    }
    /**
     * viewport
     * @param  {Number} x
     * @param  {Number} y
     * @param  {Number} width
     * @param  {Number} height
     */
    viewport(x, y, width, height) {
        this.set4('viewport', x, y, width, height);
    }
    /**
     * activeTexture
     * @param  {Number} texture
     */
    activeTexture(texture) {
        if (this.activeTextureIndex !== texture) {
            this.activeTextureIndex = texture;
            this.gl.activeTexture(texture);
        }
    }
    /**
     * bindTexture
     * @param  {GLenum} target
     * @param  {WebGLTexture } texture
     */
    bindTexture(target, texture) {
        let textureUnit = this.getActiveTextureUnit();
        if (textureUnit[target] !== texture) {
            textureUnit[target] = texture;
            this.gl.bindTexture(target, texture);
        }
    }
    /**
     * 获取当前激活的纹理对象
     * @return {TextureUnit}
     */
    getActiveTextureUnit() {
        let textureUnit = this.textureUnitDict[this.activeTextureIndex];
        if (!textureUnit) {
            textureUnit = this.textureUnitDict[this.activeTextureIndex] = {};
        }
        return textureUnit;
    }
    /**
     * 调 gl 1参数方法
     * @private
     * @param  {String} name  方法名
     * @param  {Number|Object} param 方法参数
     */
    set1(name, param) {
        const value = this._dict[name];
        if (value !== param) {
            this._dict[name] = param;
            this.gl[name](param);
        }
    }
    /**
     * 调 gl 2参数方法
     * @private
     * @param  {String} name  方法名
     * @param  {Number|Object} param0 方法参数
     * @param  {Number|Object} param1 方法参数
     */
    set2(name, param0, param1) {
        let value = this._dict[name];
        if (!value) {
            value = this._dict[name] = [];
        }
        if (value[0] !== param0 || value[1] !== param1) {
            value[0] = param0;
            value[1] = param1;
            this.gl[name](param0, param1);
        }
    }
    /**
     * 调 gl 3参数方法
     * @private
     * @param  {String} name  方法名
     * @param  {Number|Object} param0 方法参数
     * @param  {Number|Object} param1 方法参数
     * @param  {Number|Object} param2 方法参数
     */
    set3(name, param0, param1, param2) {
        let value = this._dict[name];
        if (!value) {
            value = this._dict[name] = [];
        }
        if (value[0] !== param0 || value[1] !== param1 || value[2] !== param2) {
            value[0] = param0;
            value[1] = param1;
            value[2] = param2;
            this.gl[name](param0, param1, param2);
        }
    }
    /**
     * 调 gl 4参数方法
     * @private
     * @param  {String} name  方法名
     * @param  {Number|Object} param0 方法参数
     * @param  {Number|Object} param1 方法参数
     * @param  {Number|Object} param2 方法参数
     * @param  {Number|Object} param3 方法参数
     */
    set4(name, param0, param1, param2, param3) {
        let value = this._dict[name];
        if (!value) {
            value = this._dict[name] = [];
        }
        if (value[0] !== param0 || value[1] !== param1 || value[2] !== param2 || value[3] !== param3) {
            value[0] = param0;
            value[1] = param1;
            value[2] = param2;
            value[3] = param3;
            this.gl[name](param0, param1, param2, param3);
        }
    }
    get(name) {
        return this._dict[name];
    }
}


/***/ }),

/***/ "./src/engine/renderer/capabilities.ts":
/*!*********************************************!*\
  !*** ./src/engine/renderer/capabilities.ts ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extensions */ "./src/engine/renderer/extensions.ts");

/**
 * WebGL 能力
 * @namespace capabilities
 * @type {Object}
 */
const capabilities = {
    /**
     * 最大纹理数量
     * @type {Number}
     */
    MAX_TEXTURE_INDEX: null,
    /**
     * 最高着色器精度, 可以是以下值：highp, mediump, lowp
     * @type {String}
     */
    MAX_PRECISION: null,
    /**
     * 最高顶点着色器精度, 可以是以下值：highp, mediump, lowp
     * @type {String}
     */
    MAX_VERTEX_PRECISION: null,
    /**
     * 最高片段着色器精度, 可以是以下值：highp, mediump, lowp
     * @type {String}
     */
    MAX_FRAGMENT_PRECISION: null,
    /**
     * 顶点浮点数纹理
     * @type {Boolean}
     */
    VERTEX_TEXTURE_FLOAT: null,
    /**
     * 片段浮点数纹理
     * @type {Boolean}
     */
    FRAGMENT_TEXTURE_FLOAT: null,
    /**
     * MAX_TEXTURE_MAX_ANISOTROPY
     * @type {Number}
     */
    MAX_TEXTURE_MAX_ANISOTROPY: 1,
    /**
     * 初始化
     * @param {WebGLRenderingContext} gl
     */
    init(gl) {
        this.gl = gl;
        const arr = [
            'MAX_RENDERBUFFER_SIZE',
            'MAX_COMBINED_TEXTURE_IMAGE_UNITS',
            'MAX_CUBE_MAP_TEXTURE_SIZE',
            'MAX_FRAGMENT_UNIFORM_VECTORS',
            'MAX_TEXTURE_IMAGE_UNITS',
            'MAX_TEXTURE_SIZE',
            'MAX_VARYING_VECTORS',
            'MAX_VERTEX_ATTRIBS',
            'MAX_VERTEX_TEXTURE_IMAGE_UNITS',
            'MAX_VERTEX_UNIFORM_VECTORS',
            'MAX_COMBINED_TEXTURE_IMAGE_UNITS'
        ];
        arr.forEach((name) => {
            this.get(name);
        });
        this.MAX_TEXTURE_INDEX = this.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;
        this.MAX_VERTEX_PRECISION = this._getMaxSupportPrecision(gl.VERTEX_SHADER);
        this.MAX_FRAGMENT_PRECISION = this._getMaxSupportPrecision(gl.FRAGMENT_SHADER);
        this.MAX_PRECISION = this.getMaxPrecision(this.MAX_FRAGMENT_PRECISION, this.MAX_VERTEX_PRECISION);
        this.VERTEX_TEXTURE_FLOAT = !!_extensions__WEBPACK_IMPORTED_MODULE_0__["default"].texFloat && this.MAX_VERTEX_TEXTURE_IMAGE_UNITS > 0;
        this.FRAGMENT_TEXTURE_FLOAT = !!_extensions__WEBPACK_IMPORTED_MODULE_0__["default"].texFloat;
        this.EXT_FRAG_DEPTH = _extensions__WEBPACK_IMPORTED_MODULE_0__["default"].get('EXT_frag_depth');
        this.SHADER_TEXTURE_LOD = !!_extensions__WEBPACK_IMPORTED_MODULE_0__["default"].shaderTextureLod;
        if (_extensions__WEBPACK_IMPORTED_MODULE_0__["default"].textureFilterAnisotropic) {
            this.MAX_TEXTURE_MAX_ANISOTROPY = gl.getParameter(_extensions__WEBPACK_IMPORTED_MODULE_0__["default"].textureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        }
    },
    /**
     * 获取 WebGL 能力
     * @param  {String} name
     * @return {Number|String}
     */
    get(name) {
        const gl = this.gl;
        let value = this[name];
        if (value === undefined) {
            value = this[name] = gl.getParameter(gl[name]);
        }
        return value;
    },
    _getMaxSupportPrecision(shaderType) {
        const gl = this.gl;
        let maxPrecision = 'lowp';
        if (gl.getShaderPrecisionFormat) {
            const precisions = [{
                    name: 'highp',
                    type: gl.HIGH_FLOAT,
                }, {
                    name: 'mediump',
                    type: gl.MEDIUM_FLOAT
                }];
            for (let i = 0; i < precisions.length; i++) {
                const precision = precisions[i];
                const precisionFormat = gl.getShaderPrecisionFormat(shaderType, precision.type) || {};
                if (precisionFormat.precision > 0) {
                    maxPrecision = precision.name;
                    break;
                }
            }
        }
        else {
            maxPrecision = 'mediump';
        }
        return maxPrecision;
    },
    /**
     * 获取最大支持精度
     * @param  {String} a
     * @param  {String} b
     * @return {String}
     */
    getMaxPrecision(a, b) {
        if (a === 'highp' || (a === 'mediump' && b === 'lowp')) {
            return b;
        }
        return a;
    }
};
/* harmony default export */ __webpack_exports__["default"] = (capabilities);


/***/ }),

/***/ "./src/engine/renderer/extensions.ts":
/*!*******************************************!*\
  !*** ./src/engine/renderer/extensions.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * WebGL 扩展
 * @namespace extensions
 * @type {Object}
 * @description WebGL 扩展管理，默认开启的扩展有：ANGLE_instanced_arrays, OES_vertex_array_object, OES_texture_float, WEBGL_lose_context, OES_element_index_uint, EXT_shader_texture_lod
 */
const extensions = {
    /**
     * ANGLE_instanced_arrays扩展
     * @type {ANGLEInstancedArrays}
     */
    instanced: undefined,
    /**
     * OES_vertex_array_object扩展
     * @type {OESVertexArrayObject}
     */
    vao: undefined,
    /**
     * OES_texture_float扩展
     * @type {OESTextureFloat}
     */
    texFloat: undefined,
    /**
     * WEBGL_lose_context扩展
     * @typeof {WebGLLoseContext}
     */
    loseContext: undefined,
    /**
     * EXT_texture_filter_anisotropic
     * @type {EXTTextureFilterAnisotropic}
     */
    textureFilterAnisotropic: undefined,
    shaderTextureLod: undefined,
    uintIndices: undefined,
    _usedExtensions: {},
    _disabledExtensions: {},
    /**
     * 初始化
     * @param {WebGLRenderingContext} gl
     */
    init(gl) {
        this.reset(gl);
    },
    /**
     * 重置扩展
     * @param {WebGLRenderingContext} gl
     */
    reset(gl) {
        this.gl = gl;
        const usedExtensions = this._usedExtensions;
        for (let name in usedExtensions) {
            const alias = usedExtensions[name];
            this[alias] = undefined;
            this.get(name, alias);
        }
    },
    /**
     * 使用扩展
     * @param  {String} name 扩展名称
     * @param {String} [alias=name] 别名，默认和 name 相同
     */
    use(name, alias = name) {
        if (this.gl) {
            this.get(name, alias);
        }
        else {
            this._usedExtensions[name] = alias;
        }
    },
    /**
     * 获取扩展，如果不支持返回 null，必须在 Renderer 初始化完后用
     * @param  {String} name 扩展名称
     * @param {String} [alias=name] 别名，默认和 name 相同
     * @return {ExtensionObject|null}
     */
    get(name, alias = name) {
        if (this._disabledExtensions[name]) {
            return null;
        }
        let ext = this[alias];
        if (ext === undefined) {
            ext = this._getExtension(name);
            this[alias] = ext;
        }
        return ext;
    },
    /**
     * 禁止扩展
     * @param  {String} name 扩展名称
     */
    disable(name) {
        this._disabledExtensions[name] = true;
    },
    /**
     * 开启扩展
     * @param  {String} name 扩展名称
     */
    enable(name) {
        this._disabledExtensions[name] = false;
    },
    _getExtension(name) {
        const gl = this.gl;
        if (gl && gl.getExtension) {
            return gl.getExtension(name) || gl.getExtension('WEBKIT_' + name) || gl.getExtension('MOZ_' + name) || null;
        }
        return null;
    }
};
extensions.use('ANGLE_instanced_arrays', 'instanced');
extensions.use('OES_vertex_array_object', 'vao');
extensions.use('OES_texture_float', 'texFloat');
extensions.use('WEBGL_lose_context', 'loseContext');
extensions.use('OES_element_index_uint', 'uintIndices');
extensions.use('EXT_shader_texture_lod', 'shaderTextureLod');
extensions.use('EXT_texture_filter_anisotropic', 'textureFilterAnisotropic');
/* harmony default export */ __webpack_exports__["default"] = (extensions);


/***/ }),

/***/ "./src/engine/renderer/glType.ts":
/*!***************************************!*\
  !*** ./src/engine/renderer/glType.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
const DATA_TYPES = [{
        name: 'FLOAT',
        byteSize: 4,
        uniformFuncName: 'uniform1f',
        type: 'Scalar',
        size: 1
    }, {
        name: 'FLOAT_VEC2',
        byteSize: 8,
        uniformFuncName: 'uniform2f',
        type: 'Vector',
        size: 2
    }, {
        name: 'FLOAT_VEC3',
        byteSize: 12,
        uniformFuncName: 'uniform3f',
        type: 'Vector',
        size: 3
    }, {
        name: 'FLOAT_VEC4',
        byteSize: 16,
        uniformFuncName: 'uniform4f',
        type: 'Vector',
        size: 4
    }, {
        name: 'FLOAT_MAT2',
        byteSize: 16,
        uniformFuncName: 'uniformMatrix2fv',
        type: 'Matrix',
        size: 4
    }, {
        name: 'FLOAT_MAT3',
        byteSize: 36,
        uniformFuncName: 'uniformMatrix3fv',
        type: 'Matrix',
        size: 9
    }, {
        name: 'FLOAT_MAT4',
        byteSize: 64,
        uniformFuncName: 'uniformMatrix4fv',
        type: 'Matrix',
        size: 16
    }, {
        name: 'INT',
        byteSize: 4,
        uniformFuncName: 'uniform1i',
        type: 'Scalar',
        size: 1
    }, {
        name: 'INT_VEC2',
        byteSize: 8,
        uniformFuncName: 'uniform2i',
        type: 'Vector',
        size: 2
    }, {
        name: 'INT_VEC3',
        byteSize: 12,
        uniformFuncName: 'uniform3i',
        type: 'Vector',
        size: 3
    }, {
        name: 'INT_VEC4',
        byteSize: 16,
        uniformFuncName: 'uniform4i',
        type: 'Vector',
        size: 4
    }, {
        name: 'BOOL',
        byteSize: 4,
        uniformFuncName: 'uniform1i',
        type: 'Scalar',
        size: 1
    }, {
        name: 'BOOL_VEC2',
        byteSize: 8,
        uniformFuncName: 'uniform2i',
        type: 'Vector',
        size: 2
    }, {
        name: 'BOOL_VEC3',
        byteSize: 12,
        uniformFuncName: 'uniform3i',
        type: 'Vector',
        size: 3
    }, {
        name: 'BOOL_VEC4',
        byteSize: 16,
        uniformFuncName: 'uniform4i',
        type: 'Vector',
        size: 4
    }, {
        name: 'SAMPLER_2D',
        byteSize: 4,
        uniformFuncName: 'uniform1i',
        type: 'Scalar',
        size: 1
    }, {
        name: 'SAMPLER_CUBE',
        byteSize: 4,
        uniformFuncName: 'uniform1i',
        type: 'Scalar',
        size: 1
    }];
const DATA_DICT = {};
/**
 * @namespace glType
 * @type {Object}
 */
const glType = {
    dict: DATA_DICT,
    /**
     * init
     * @param  {WebGLRenderingContext} gl
     */
    init(gl) {
        DATA_TYPES.forEach((dataType) => {
            const name = dataType.name;
            let uniform;
            let uniformArray;
            let uniformFuncName = dataType.uniformFuncName;
            let uniformArrayFuncName = uniformFuncName + 'v';
            if (dataType.type === 'Matrix') {
                uniform = uniformArray = (location, value) => {
                    if (value === undefined) {
                        return;
                    }
                    gl[uniformFuncName](location, false, value);
                };
            }
            else {
                uniform = (location, value) => {
                    if (value === undefined) {
                        return;
                    }
                    gl[uniformFuncName](location, value);
                };
                uniformArray = (location, value) => {
                    gl[uniformArrayFuncName](location, value);
                };
            }
            DATA_DICT[gl[name]] = Object.assign(dataType, {
                glValue: gl[name],
                uniform,
                uniformArray
            });
        });
    },
    /**
     * 获取信息
     * @param  {GLenum} type
     * @return {glTypeInfo}
     */
    get(type) {
        return DATA_DICT[type];
    }
};
/* harmony default export */ __webpack_exports__["default"] = (glType);
/**
 * @typedef {Object} glTypeInfo
 * @property {String} name 名字，e.g. FLOAT_VEC2
 * @property {Number} byteSize 字节大小
 * @property {String} uniformFuncName uniform方法名字，e.g. uniform3f
 * @property {String} type 类型，可以是 Scalar, Vector, Matrix
 * @property {Number} size 数量
 * @property {GLenum} glValue gl enum值
 * @property {function} uniform uniform单个值方法
 * @property {function} uniformArray uniform多个值方法
 */


/***/ }),

/***/ "./src/engine/shader/Shader.ts":
/*!*************************************!*\
  !*** ./src/engine/shader/Shader.ts ***!
  \*************************************/
/*! exports provided: Shader, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Shader", function() { return Shader; });
/* harmony import */ var _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../renderer/capabilities */ "./src/engine/renderer/capabilities.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../material/BasicMaterial */ "./src/engine/material/BasicMaterial.ts");




var basicFragCode = __webpack_require__(/*! ./basic.frag */ "./src/engine/shader/basic.frag");
var basicVertCode = __webpack_require__(/*! ./basic.vert */ "./src/engine/shader/basic.vert");
var geometryFragCode = __webpack_require__(/*! ./geometry.frag */ "./src/engine/shader/geometry.frag");
var pbrFragCode = __webpack_require__(/*! ./pbr.frag */ "./src/engine/shader/pbr.frag");
const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
const headerCache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
const CUSTUM_OPTION_PREFIX = 'HILO_CUSTUM_OPTION_';
/**
 * Shader类
 * @class
 */
class Shader {
    /**
     * @constructs
     * @param  {Object} params 初始化参数，所有params都会复制到实例上
     */
    constructor(params) {
        /**
         * vs 顶点代码
         * @default ''·
         * @type {String}
         */
        this.vs = '';
        /**
         * vs 片段代码
         * @default ''
         * @type {String}
         */
        this.fs = '';
        /**
         * 是否始终使用
         * @default true
         * @type {Boolean}
         */
        this.alwaysUse = false;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_2__["default"].generateUUID(this.constructor.name);
        Object.assign(this, params);
    }
    /**
     * 初始化
     * @param  {WebGLRenderer} renderer
     */
    static init(renderer) {
        this.renderer = renderer;
        this.commonHeader = this._getCommonHeader(this.renderer);
    }
    /**
     * Shader 缓存
     * @readOnly
     * @type {Cache}
     */
    static get cache() {
        return cache;
    }
    /**
     * Shader header缓存，一般不用管
     * @readOnly
     * @type {Cache}
     */
    static get headerCache() {
        return headerCache;
    }
    /**
     * 重置
     */
    static reset(gl) {
        cache.removeAll();
    }
    /**
     * 获取header缓存的key
     * @param {Mesh} mesh mesh
     * @param {Material} material 材质
     * @param {LightManager} lightManager lightManager
     * @param {Fog} fog fog
     * @param {Boolean} useLogDepth 是否使用对数深度
     * @return {string}
     */
    static getHeaderKey(mesh, material, lightManager) {
        let headerKey = 'header_' + material.id + '_' + lightManager.lightInfo.uid;
        headerKey += '_' + mesh.geometry.getShaderKey();
        return headerKey;
    }
    /**
     * 获取header
     * @param {Mesh} mesh
     * @param {Material} material
     * @param {LightManager} lightManager
     * @param {Fog} fog
     * @return {String}
     */
    static getHeader(mesh, material, lightManager) {
        const headerKey = this.getHeaderKey(mesh, material, lightManager);
        let header = headerCache.get(headerKey);
        if (!header || material.isDirty) {
            const headers = {};
            const lightType = material.lightType;
            if (lightType && lightType !== 'NONE') {
                lightManager.getRenderOption(headers);
            }
            material.getRenderOption(headers);
            mesh.getRenderOption(headers);
            if (headers['HAS_NORMAL'] && headers['NORMAL_MAP']) {
                headers['HAS_TANGENT'] = 1;
            }
            if (!headers['RECEIVE_SHADOWS']) {
                delete headers['DIRECTIONAL_LIGHTS_SMC'];
                delete headers['SPOT_LIGHTS_SMC'];
                delete headers['POINT_LIGHTS_SMC'];
            }
            header = `#define SHADER_NAME ${material.constructor.name}\n`;
            header += Object.keys(headers).map((name) => {
                if (name.indexOf(CUSTUM_OPTION_PREFIX) > -1) {
                    return `#define ${name.replace(CUSTUM_OPTION_PREFIX, '')} ${headers[name]}`;
                }
                return `#define HILO_${name} ${headers[name]}`;
            }).join('\n') + '\n';
            headerCache.add(headerKey, header);
        }
        return header;
    }
    static _getCommonHeader(renderer) {
        const vertexPrecision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(_renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].MAX_VERTEX_PRECISION, renderer.vertexPrecision);
        const fragmentPrecision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(_renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].MAX_FRAGMENT_PRECISION, renderer.fragmentPrecision);
        const precision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(vertexPrecision, fragmentPrecision);
        return `
#define HILO_MAX_PRECISION ${precision}
#define HILO_MAX_VERTEX_PRECISION ${vertexPrecision}
#define HILO_MAX_FRAGMENT_PRECISION ${fragmentPrecision}
`;
    }
    /**
     * 获取 shader
     * @param {Mesh} mesh
     * @param {Material} material
     * @param {Boolean} isUseInstance
     * @param {LightManager} lightManager
     * @param {Fog} fog
     * @param {Boolean} useLogDepth
     * @return {Shader}
     */
    static getShader(mesh, material, lightManager) {
        const header = this.getHeader(mesh, material, lightManager);
        if (material instanceof _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__["BasicMaterial"]) {
            return this.getBasicShader(material, header);
        }
        return null;
    }
    /**
     * 获取基础 shader
     * @param  {Material}  material
     * @param  {Boolean} isUseInstance
     * @param  {LightManager}  lightManager
     * @param  {Fog}  fog
     * @return {Shader}
     */
    static getBasicShader(material, header) {
        let key = material.constructor.name + ':';
        let shader = cache.get(key);
        if (!shader) {
            let fs = '';
            let vs = basicVertCode;
            if (material instanceof _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__["BasicMaterial"]) {
                fs += basicFragCode;
            }
            shader = this.getCustomShader(vs, fs, header, key, true);
        }
        if (shader) {
            const shaderNumId = this._getNumId(shader);
            if (shaderNumId !== null) {
                material._shaderNumId = shaderNumId;
            }
        }
        return shader;
    }
    static _getNumId(obj) {
        const id = obj.id;
        const res = id.match(/_(\d+)/);
        if (res && res[1]) {
            return parseInt(res[1], 10);
        }
        return null;
    }
    /**
     * 获取自定义shader
     * @param  {String} vs 顶点代码
     * @param  {String} fs 片段代码
     * @param  {String} [cacheKey] 如果有，会以此值缓存 shader
     * @param  {String} [useHeaderCache=false] 如果cacheKey和useHeaderCache同时存在，使用 cacheKey+useHeaderCache缓存 shader
     * @return {Shader}
     */
    static getCustomShader(vs, fs, header, cacheKey, useHeaderCache) {
        const commonHeader = this.commonHeader;
        let shader;
        if (cacheKey) {
            if (useHeaderCache) {
                cacheKey += ':' + header;
            }
            shader = cache.get(cacheKey);
        }
        if (!shader) {
            shader = new Shader({
                vs: commonHeader + header + vs,
                fs: commonHeader + header + fs
            });
            if (cacheKey) {
                cache.add(cacheKey, shader);
            }
        }
        return shader;
    }
    /**
     * 没有被引用时销毁资源
     * @param  {WebGLRenderer} renderer
     * @return {Shader} this
     */
    destroyIfNoRef(renderer) {
        const resourceManager = renderer.resourceManager;
        resourceManager.destroyIfNoRef(this);
        return this;
    }
    /**
     * 销毁资源
     * @return {Shader} this
     */
    destroy() {
        if (this._isDestroyed) {
            return this;
        }
        cache.removeObject(this);
        this._isDestroyed = true;
        return this;
    }
}
/**
 * 内部的所有shader块字符串，可以用来拼接glsl代码
 * @type {Object}
 */
Shader.shaders = {
    'chunk/baseDefine.glsl': __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl"),
    'chunk/color.frag': __webpack_require__(/*! ./chunk/color.frag */ "./src/engine/shader/chunk/color.frag"),
    'chunk/color.vert': __webpack_require__(/*! ./chunk/color.vert */ "./src/engine/shader/chunk/color.vert"),
    'chunk/color_main.vert': __webpack_require__(/*! ./chunk/color_main.vert */ "./src/engine/shader/chunk/color_main.vert"),
    'chunk/diffuse.frag': __webpack_require__(/*! ./chunk/diffuse.frag */ "./src/engine/shader/chunk/diffuse.frag"),
    'chunk/diffuse_main.frag': __webpack_require__(/*! ./chunk/diffuse_main.frag */ "./src/engine/shader/chunk/diffuse_main.frag"),
    'chunk/extensions.frag': __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag"),
    'chunk/extensions.vert': __webpack_require__(/*! ./chunk/extensions.vert */ "./src/engine/shader/chunk/extensions.vert"),
    'chunk/fog.frag': __webpack_require__(/*! ./chunk/fog.frag */ "./src/engine/shader/chunk/fog.frag"),
    'chunk/fog_main.frag': __webpack_require__(/*! ./chunk/fog_main.frag */ "./src/engine/shader/chunk/fog_main.frag"),
    'chunk/frag_color.frag': __webpack_require__(/*! ./chunk/frag_color.frag */ "./src/engine/shader/chunk/frag_color.frag"),
    'chunk/joint.vert': __webpack_require__(/*! ./chunk/joint.vert */ "./src/engine/shader/chunk/joint.vert"),
    'chunk/joint_main.vert': __webpack_require__(/*! ./chunk/joint_main.vert */ "./src/engine/shader/chunk/joint_main.vert"),
    'chunk/light.frag': __webpack_require__(/*! ./chunk/light.frag */ "./src/engine/shader/chunk/light.frag"),
    'chunk/lightFog.frag': __webpack_require__(/*! ./chunk/lightFog.frag */ "./src/engine/shader/chunk/lightFog.frag"),
    'chunk/lightFog.vert': __webpack_require__(/*! ./chunk/lightFog.vert */ "./src/engine/shader/chunk/lightFog.vert"),
    'chunk/lightFog_main.frag': __webpack_require__(/*! ./chunk/lightFog_main.frag */ "./src/engine/shader/chunk/lightFog_main.frag"),
    'chunk/lightFog_main.vert': __webpack_require__(/*! ./chunk/lightFog_main.vert */ "./src/engine/shader/chunk/lightFog_main.vert"),
    'chunk/logDepth.frag': __webpack_require__(/*! ./chunk/logDepth.frag */ "./src/engine/shader/chunk/logDepth.frag"),
    'chunk/logDepth_main.frag': __webpack_require__(/*! ./chunk/logDepth_main.frag */ "./src/engine/shader/chunk/logDepth_main.frag"),
    'chunk/logDepth.vert': __webpack_require__(/*! ./chunk/logDepth.vert */ "./src/engine/shader/chunk/logDepth.vert"),
    'chunk/logDepth_main.vert': __webpack_require__(/*! ./chunk/logDepth_main.vert */ "./src/engine/shader/chunk/logDepth_main.vert"),
    'chunk/morph.vert': __webpack_require__(/*! ./chunk/morph.vert */ "./src/engine/shader/chunk/morph.vert"),
    'chunk/morph_main.vert': __webpack_require__(/*! ./chunk/morph_main.vert */ "./src/engine/shader/chunk/morph_main.vert"),
    'chunk/normal.frag': __webpack_require__(/*! ./chunk/normal.frag */ "./src/engine/shader/chunk/normal.frag"),
    'chunk/normal.vert': __webpack_require__(/*! ./chunk/normal.vert */ "./src/engine/shader/chunk/normal.vert"),
    'chunk/normal_main.frag': __webpack_require__(/*! ./chunk/normal_main.frag */ "./src/engine/shader/chunk/normal_main.frag"),
    'chunk/normal_main.vert': __webpack_require__(/*! ./chunk/normal_main.vert */ "./src/engine/shader/chunk/normal_main.vert"),
    'chunk/pbr.frag': __webpack_require__(/*! ./chunk/pbr.frag */ "./src/engine/shader/chunk/pbr.frag"),
    'chunk/pbr_main.frag': __webpack_require__(/*! ./chunk/pbr_main.frag */ "./src/engine/shader/chunk/pbr_main.frag"),
    'chunk/phong.frag': __webpack_require__(/*! ./chunk/phong.frag */ "./src/engine/shader/chunk/phong.frag"),
    'chunk/phong_main.frag': __webpack_require__(/*! ./chunk/phong_main.frag */ "./src/engine/shader/chunk/phong_main.frag"),
    'chunk/precision.frag': __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag"),
    'chunk/precision.vert': __webpack_require__(/*! ./chunk/precision.vert */ "./src/engine/shader/chunk/precision.vert"),
    'chunk/transparency.frag': __webpack_require__(/*! ./chunk/transparency.frag */ "./src/engine/shader/chunk/transparency.frag"),
    'chunk/transparency_main.frag': __webpack_require__(/*! ./chunk/transparency_main.frag */ "./src/engine/shader/chunk/transparency_main.frag"),
    'chunk/unQuantize.vert': __webpack_require__(/*! ./chunk/unQuantize.vert */ "./src/engine/shader/chunk/unQuantize.vert"),
    'chunk/unQuantize_main.vert': __webpack_require__(/*! ./chunk/unQuantize_main.vert */ "./src/engine/shader/chunk/unQuantize_main.vert"),
    'chunk/uv.frag': __webpack_require__(/*! ./chunk/uv.frag */ "./src/engine/shader/chunk/uv.frag"),
    'chunk/uv.vert': __webpack_require__(/*! ./chunk/uv.vert */ "./src/engine/shader/chunk/uv.vert"),
    'chunk/uv_main.vert': __webpack_require__(/*! ./chunk/uv_main.vert */ "./src/engine/shader/chunk/uv_main.vert"),
    'method/encoding.glsl': __webpack_require__(/*! ./method/encoding.glsl */ "./src/engine/shader/method/encoding.glsl"),
    'method/getDiffuse.glsl': __webpack_require__(/*! ./method/getDiffuse.glsl */ "./src/engine/shader/method/getDiffuse.glsl"),
    'method/getLightAttenuation.glsl': __webpack_require__(/*! ./method/getLightAttenuation.glsl */ "./src/engine/shader/method/getLightAttenuation.glsl"),
    'method/getShadow.glsl': __webpack_require__(/*! ./method/getShadow.glsl */ "./src/engine/shader/method/getShadow.glsl"),
    'method/getSpecular.glsl': __webpack_require__(/*! ./method/getSpecular.glsl */ "./src/engine/shader/method/getSpecular.glsl"),
    'method/packFloat.glsl': __webpack_require__(/*! ./method/packFloat.glsl */ "./src/engine/shader/method/packFloat.glsl"),
    'method/textureEnvMap.glsl': __webpack_require__(/*! ./method/textureEnvMap.glsl */ "./src/engine/shader/method/textureEnvMap.glsl"),
    'method/transpose.glsl': __webpack_require__(/*! ./method/transpose.glsl */ "./src/engine/shader/method/transpose.glsl"),
    'method/unpackFloat.glsl': __webpack_require__(/*! ./method/unpackFloat.glsl */ "./src/engine/shader/method/unpackFloat.glsl"),
    'basic.frag': __webpack_require__(/*! ./basic.frag */ "./src/engine/shader/basic.frag"),
    'basic.vert': __webpack_require__(/*! ./basic.vert */ "./src/engine/shader/basic.vert"),
    'geometry.frag': __webpack_require__(/*! ./geometry.frag */ "./src/engine/shader/geometry.frag"),
    'pbr.frag': __webpack_require__(/*! ./pbr.frag */ "./src/engine/shader/pbr.frag"),
    'screen.frag': __webpack_require__(/*! ./screen.frag */ "./src/engine/shader/screen.frag"),
    'screen.vert': __webpack_require__(/*! ./screen.vert */ "./src/engine/shader/screen.vert")
};
/* harmony default export */ __webpack_exports__["default"] = (Shader);


/***/ }),

/***/ "./src/engine/shader/basic.frag":
/*!**************************************!*\
  !*** ./src/engine/shader/basic.frag ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag") + "\n\n" + __webpack_require__(/*! ./chunk/color.frag */ "./src/engine/shader/chunk/color.frag") + "\n" + __webpack_require__(/*! ./chunk/uv.frag */ "./src/engine/shader/chunk/uv.frag") + "\n" + __webpack_require__(/*! ./chunk/normal.frag */ "./src/engine/shader/chunk/normal.frag") + "\n" + __webpack_require__(/*! ./chunk/lightFog.frag */ "./src/engine/shader/chunk/lightFog.frag") + "\n" + __webpack_require__(/*! ./chunk/diffuse.frag */ "./src/engine/shader/chunk/diffuse.frag") + "\n" + __webpack_require__(/*! ./chunk/light.frag */ "./src/engine/shader/chunk/light.frag") + "\n" + __webpack_require__(/*! ./chunk/phong.frag */ "./src/engine/shader/chunk/phong.frag") + "\n" + __webpack_require__(/*! ./chunk/transparency.frag */ "./src/engine/shader/chunk/transparency.frag") + "\n" + __webpack_require__(/*! ./chunk/fog.frag */ "./src/engine/shader/chunk/fog.frag") + "\n" + __webpack_require__(/*! ./chunk/logDepth.frag */ "./src/engine/shader/chunk/logDepth.frag") + "\n\nvoid main(void) {\n    vec4 diffuse = vec4(0., 0., 0., 1.);\n    vec4 color = vec4(0., 0., 0., 1.);\n\n    " + __webpack_require__(/*! ./chunk/normal_main.frag */ "./src/engine/shader/chunk/normal_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/lightFog_main.frag */ "./src/engine/shader/chunk/lightFog_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/diffuse_main.frag */ "./src/engine/shader/chunk/diffuse_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/phong_main.frag */ "./src/engine/shader/chunk/phong_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/transparency_main.frag */ "./src/engine/shader/chunk/transparency_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/frag_color.frag */ "./src/engine/shader/chunk/frag_color.frag") + "\n    " + __webpack_require__(/*! ./chunk/logDepth_main.frag */ "./src/engine/shader/chunk/logDepth_main.frag") + "\n}"

/***/ }),

/***/ "./src/engine/shader/basic.vert":
/*!**************************************!*\
  !*** ./src/engine/shader/basic.vert ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.vert */ "./src/engine/shader/chunk/extensions.vert") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.vert */ "./src/engine/shader/chunk/precision.vert") + "\n\nattribute vec3 a_position;\nuniform mat4 u_modelViewProjectionMatrix;\n\n" + __webpack_require__(/*! ./chunk/unQuantize.vert */ "./src/engine/shader/chunk/unQuantize.vert") + "\n" + __webpack_require__(/*! ./chunk/joint.vert */ "./src/engine/shader/chunk/joint.vert") + "\n" + __webpack_require__(/*! ./chunk/uv.vert */ "./src/engine/shader/chunk/uv.vert") + "\n" + __webpack_require__(/*! ./chunk/normal.vert */ "./src/engine/shader/chunk/normal.vert") + "\n" + __webpack_require__(/*! ./chunk/lightFog.vert */ "./src/engine/shader/chunk/lightFog.vert") + "\n" + __webpack_require__(/*! ./chunk/morph.vert */ "./src/engine/shader/chunk/morph.vert") + "\n" + __webpack_require__(/*! ./chunk/color.vert */ "./src/engine/shader/chunk/color.vert") + "\n" + __webpack_require__(/*! ./chunk/logDepth.vert */ "./src/engine/shader/chunk/logDepth.vert") + "\nvoid main(void) {\n    vec4 pos = vec4(a_position, 1.0);\n    #ifdef HILO_HAS_TEXCOORD0\n        vec2 uv = a_texcoord0;\n    #endif\n    #ifdef HILO_HAS_TEXCOORD1\n        vec2 uv1 = a_texcoord1;\n    #endif\n    #ifdef HILO_HAS_NORMAL\n        vec3 normal = a_normal;\n    #endif\n\n    #ifdef HILO_NORMAL_MAP\n        vec4 tangent = a_tangent;\n    #endif\n\n    " + __webpack_require__(/*! ./chunk/color_main.vert */ "./src/engine/shader/chunk/color_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/unQuantize_main.vert */ "./src/engine/shader/chunk/unQuantize_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/morph_main.vert */ "./src/engine/shader/chunk/morph_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/joint_main.vert */ "./src/engine/shader/chunk/joint_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/uv_main.vert */ "./src/engine/shader/chunk/uv_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/normal_main.vert */ "./src/engine/shader/chunk/normal_main.vert") + "\n    " + __webpack_require__(/*! ./chunk/lightFog_main.vert */ "./src/engine/shader/chunk/lightFog_main.vert") + "\n\n    gl_Position = u_modelViewProjectionMatrix * pos;\n\n    " + __webpack_require__(/*! ./chunk/logDepth_main.vert */ "./src/engine/shader/chunk/logDepth_main.vert") + "\n}"

/***/ }),

/***/ "./src/engine/shader/chunk/baseDefine.glsl":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/baseDefine.glsl ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#define HILO_FRONT_SIDE 1028\n#define HILO_BACK_SIDE 1029\n#define HILO_FRONT_AND_BACK_SIDE 1032\n#define HILO_PI 3.141592653589793\n#define HILO_INVERSE_PI 0.3183098861837907"

/***/ }),

/***/ "./src/engine/shader/chunk/color.frag":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/color.frag ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_COLOR\n    varying vec4 v_color;\n#endif\n\n#ifdef HILO_USE_HDR\n    uniform float u_exposure;\n#endif\n\n#ifdef HILO_GAMMA_CORRECTION\n    uniform float u_gammaFactor;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/color.vert":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/color.vert ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_COLOR\n    #if HILO_COLOR_SIZE == 3\n        attribute vec3 a_color;\n    #elif HILO_COLOR_SIZE == 4\n        attribute vec4 a_color;\n    #endif\n    varying vec4 v_color;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/color_main.vert":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/color_main.vert ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_COLOR\n    #if HILO_COLOR_SIZE == 3\n        v_color = vec4(a_color, 1.0);\n    #elif HILO_COLOR_SIZE == 4\n        v_color = a_color;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/diffuse.frag":
/*!**********************************************!*\
  !*** ./src/engine/shader/chunk/diffuse.frag ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_DIFFUSE_MAP)\n    uniform HILO_SAMPLER_2D u_diffuse;\n#elif defined(HILO_DIFFUSE_CUBE_MAP)\n    uniform samplerCube u_diffuse;\n#else\n    uniform vec4 u_diffuse;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/diffuse_main.frag":
/*!***************************************************!*\
  !*** ./src/engine/shader/chunk/diffuse_main.frag ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_DIFFUSE_MAP)\n    diffuse = HILO_TEXTURE_2D(u_diffuse);\n#elif defined(HILO_DIFFUSE_CUBE_MAP)\n    diffuse = textureCube(u_diffuse, v_position);\n#elif defined(HILO_HAS_COLOR)\n    diffuse = v_color;\n#else\n    diffuse = u_diffuse;\n#endif\ncolor.a = diffuse.a;"

/***/ }),

/***/ "./src/engine/shader/chunk/extensions.frag":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/extensions.frag ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#ifdef HILO_USE_SHADER_TEXTURE_LOD\n    #extension GL_EXT_shader_texture_lod: enable\n#endif\n\n#ifdef HILO_USE_EXT_FRAG_DEPTH\n    #extension GL_EXT_frag_depth: enable\n#define GLSLIFY 1\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/extensions.vert":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/extensions.vert ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n"

/***/ }),

/***/ "./src/engine/shader/chunk/fixMathCrash.glsl":
/*!***************************************************!*\
  !*** ./src/engine/shader/chunk/fixMathCrash.glsl ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_FIX_MAX_BUG\n    float hilo_max(float a, float b){\n        if (a > b) {\n            return a;\n        }\n        return b;\n    }\n    #define HILO_MAX(a, b) hilo_max(a, b);\n#else\n    #define HILO_MAX(a, b) max(a, b);\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/fog.frag":
/*!******************************************!*\
  !*** ./src/engine/shader/chunk/fog.frag ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_FOG\n    varying float v_dist;\n    uniform vec4 u_fogColor;\n    \n    #ifdef HILO_FOG_LINEAR\n        uniform vec2 u_fogInfo;\n    #else\n        uniform float u_fogInfo;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/fog_main.frag":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/fog_main.frag ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_FOG\n    float fogFactor = 1.0;\n\n    #ifdef HILO_FOG_LINEAR\n        fogFactor = (u_fogInfo.y - v_dist)/(u_fogInfo.y - u_fogInfo.x);\n    #elif defined(HILO_FOG_EXP)\n        fogFactor = exp(-abs(u_fogInfo * v_dist));\n    #elif defined(HILO_FOG_EXP2)\n        fogFactor = exp(-(u_fogInfo * v_dist) * (u_fogInfo * v_dist)); \n    #endif\n    \n    fogFactor = clamp(fogFactor, 0.0, 1.0);\n    color = mix(u_fogColor, color, fogFactor);\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/frag_color.frag":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/frag_color.frag ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_IGNORE_TRANSPARENT\ncolor.a = 1.0;\n#endif\n\n#ifdef HILO_USE_HDR\n    color.rgb = vec3(1.0) - exp(-color.rgb * u_exposure);\n#endif\n\n#ifdef HILO_GAMMA_CORRECTION\n    color.rgb = pow(color.rgb, vec3(1.0 / u_gammaFactor));\n#endif\n\n" + __webpack_require__(/*! ./fog_main.frag */ "./src/engine/shader/chunk/fog_main.frag") + "\n\n#ifdef HILO_PREMULTIPLY_ALPHA\n    color.rgb *= color.a;\n#endif\n\ngl_FragColor = color;"

/***/ }),

/***/ "./src/engine/shader/chunk/joint.vert":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/joint.vert ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_JOINT_COUNT\n    attribute vec4 a_skinIndices;\n    attribute vec4 a_skinWeights;\n    #ifdef HILO_JOINT_MAT_MAP\n        uniform sampler2D u_jointMatTexture;\n        uniform vec2 u_jointMatTextureSize;\n        mat4 getJointMat(float index) {\n            index *= 4.0;\n            float x = float(mod(index, u_jointMatTextureSize.x));\n            float y = float(floor(index / u_jointMatTextureSize.x));\n            float dx = 1.0 / float(u_jointMatTextureSize.x);\n            float dy = 1.0 / float(u_jointMatTextureSize.y);\n            y = dy * (y + 0.5);\n            vec4 v1 = texture2D(u_jointMatTexture, vec2(dx * (x + 0.5), y));\n            vec4 v2 = texture2D(u_jointMatTexture, vec2(dx * (x + 1.5), y));\n            vec4 v3 = texture2D(u_jointMatTexture, vec2(dx * (x + 2.5), y));\n            vec4 v4 = texture2D(u_jointMatTexture, vec2(dx * (x + 3.5), y));\n            mat4 mat = mat4(v1, v2, v3, v4);\n            return mat;\n        }\n\n        mat4 getJointMat(vec4 weights, vec4 indices) {\n            mat4 mat = weights.x * getJointMat(indices.x);\n            mat += weights.y * getJointMat(indices.y);\n            mat += weights.z * getJointMat(indices.z);\n            mat += weights.w * getJointMat(indices.w);\n            return mat;\n        }\n    #else\n        uniform mat4 u_jointMat[HILO_JOINT_COUNT];\n       \n        mat4 getJointMat(vec4 weights, vec4 indices) {\n            mat4 mat = weights.x * u_jointMat[int(indices.x)];\n            mat += weights.y * u_jointMat[int(indices.y)];\n            mat += weights.z * u_jointMat[int(indices.z)];\n            mat += weights.w * u_jointMat[int(indices.w)];\n            return mat;\n        }\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/joint_main.vert":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/joint_main.vert ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_JOINT_COUNT\n    mat4 skinMat = getJointMat(a_skinWeights, a_skinIndices);\n    pos = skinMat * pos;\n\n    #ifdef HILO_HAS_NORMAL\n        normal = mat3(skinMat) * normal;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/light.frag":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/light.frag ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_DIRECTIONAL_LIGHTS\n    uniform vec3 u_directionalLightsColor[HILO_DIRECTIONAL_LIGHTS];\n    uniform vec3 u_directionalLightsInfo[HILO_DIRECTIONAL_LIGHTS];\n    #ifdef HILO_DIRECTIONAL_LIGHTS_SMC\n        uniform sampler2D u_directionalLightsShadowMap[HILO_DIRECTIONAL_LIGHTS_SMC];\n        uniform vec2 u_directionalLightsShadowMapSize[HILO_DIRECTIONAL_LIGHTS_SMC];\n        uniform mat4 u_directionalLightSpaceMatrix[HILO_DIRECTIONAL_LIGHTS_SMC];\n        uniform vec2 u_directionalLightsShadowBias[HILO_DIRECTIONAL_LIGHTS_SMC];\n    #endif\n#endif\n\n#ifdef HILO_SPOT_LIGHTS\n    uniform vec3 u_spotLightsPos[HILO_SPOT_LIGHTS];\n    uniform vec3 u_spotLightsDir[HILO_SPOT_LIGHTS];\n    uniform vec3 u_spotLightsColor[HILO_SPOT_LIGHTS];\n    uniform vec2 u_spotLightsCutoffs[HILO_SPOT_LIGHTS];\n    uniform vec3 u_spotLightsInfo[HILO_SPOT_LIGHTS];\n    uniform float u_spotLightsRange[HILO_SPOT_LIGHTS];\n    #ifdef HILO_SPOT_LIGHTS_SMC\n        uniform sampler2D u_spotLightsShadowMap[HILO_SPOT_LIGHTS_SMC];\n        uniform vec2 u_spotLightsShadowMapSize[HILO_SPOT_LIGHTS_SMC];\n        uniform mat4 u_spotLightSpaceMatrix[HILO_SPOT_LIGHTS_SMC];\n        uniform vec2 u_spotLightsShadowBias[HILO_SPOT_LIGHTS_SMC];\n    #endif\n#endif\n\n#ifdef HILO_POINT_LIGHTS\n    uniform vec3 u_pointLightsPos[HILO_POINT_LIGHTS];\n    uniform vec3 u_pointLightsColor[HILO_POINT_LIGHTS];\n    uniform vec3 u_pointLightsInfo[HILO_POINT_LIGHTS];\n    uniform float u_pointLightsRange[HILO_POINT_LIGHTS];\n    #ifdef HILO_POINT_LIGHTS_SMC\n        uniform samplerCube u_pointLightsShadowMap[HILO_POINT_LIGHTS_SMC];\n        uniform mat4 u_pointLightSpaceMatrix[HILO_POINT_LIGHTS_SMC];\n        uniform vec2 u_pointLightsShadowBias[HILO_POINT_LIGHTS_SMC];\n        uniform vec2 u_pointLightCamera[HILO_POINT_LIGHTS_SMC];\n    #endif\n#endif\n\n#ifdef HILO_AREA_LIGHTS\n    uniform vec3 u_areaLightsPos[HILO_AREA_LIGHTS];\n    uniform vec3 u_areaLightsColor[HILO_AREA_LIGHTS];\n    uniform vec3 u_areaLightsWidth[HILO_AREA_LIGHTS];\n    uniform vec3 u_areaLightsHeight[HILO_AREA_LIGHTS];\n    uniform sampler2D u_areaLightsLtcTexture1;\n    uniform sampler2D u_areaLightsLtcTexture2;\n\n    " + __webpack_require__(/*! ../method/getAreaLight.glsl */ "./src/engine/shader/method/getAreaLight.glsl") + "\n#endif\n\n#ifdef HILO_AMBIENT_LIGHTS\n    uniform vec3 u_ambientLightsColor;\n#endif\n\n" + __webpack_require__(/*! ../method/getDiffuse.glsl */ "./src/engine/shader/method/getDiffuse.glsl") + "\n" + __webpack_require__(/*! ../method/getSpecular.glsl */ "./src/engine/shader/method/getSpecular.glsl") + "\n" + __webpack_require__(/*! ../method/getLightAttenuation.glsl */ "./src/engine/shader/method/getLightAttenuation.glsl") + "\n" + __webpack_require__(/*! ../method/unpackFloat.glsl */ "./src/engine/shader/method/unpackFloat.glsl") + "\n" + __webpack_require__(/*! ../method/getShadow.glsl */ "./src/engine/shader/method/getShadow.glsl") + ""

/***/ }),

/***/ "./src/engine/shader/chunk/lightFog.frag":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/lightFog.frag ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_HAS_LIGHT) || defined(HILO_HAS_FRAG_POS)\n    varying vec3 v_fragPos;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/lightFog.vert":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/lightFog.vert ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_HAS_LIGHT) || defined(HILO_HAS_FOG) || defined(HILO_HAS_FRAG_POS)\n    uniform mat4 u_modelViewMatrix;\n    #ifdef HILO_HAS_FOG\n        varying float v_dist;\n    #endif\n\n    #if defined(HILO_HAS_LIGHT) || defined(HILO_HAS_FRAG_POS) \n        varying vec3 v_fragPos;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/lightFog_main.frag":
/*!****************************************************!*\
  !*** ./src/engine/shader/chunk/lightFog_main.frag ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_LIGHT\n    #if HILO_SIDE == HILO_FRONT_AND_BACK_SIDE\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/lightFog_main.vert":
/*!****************************************************!*\
  !*** ./src/engine/shader/chunk/lightFog_main.vert ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_HAS_LIGHT) || defined(HILO_HAS_FOG) || defined(HILO_HAS_FRAG_POS)\n    vec3 fragPos = (u_modelViewMatrix * pos).xyz;\n\n    #if defined(HILO_HAS_LIGHT) || defined(HILO_HAS_FRAG_POS)\n        v_fragPos = fragPos;\n    #endif\n\n    #ifdef HILO_HAS_FOG\n        v_dist = length(fragPos);\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/logDepth.frag":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/logDepth.frag ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_USE_LOG_DEPTH) && defined(HILO_USE_EXT_FRAG_DEPTH)\n    uniform float u_logDepth;\n    varying float v_fragDepth;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/logDepth.vert":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/logDepth.vert ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_USE_LOG_DEPTH\n    #ifdef HILO_USE_EXT_FRAG_DEPTH\n        varying float v_fragDepth;\n    #else\n        uniform float u_logDepth;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/logDepth_main.frag":
/*!****************************************************!*\
  !*** ./src/engine/shader/chunk/logDepth_main.frag ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#if defined(HILO_USE_LOG_DEPTH) && defined(HILO_USE_EXT_FRAG_DEPTH)\n    gl_FragDepthEXT = log2( v_fragDepth ) * u_logDepth * 0.5;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/logDepth_main.vert":
/*!****************************************************!*\
  !*** ./src/engine/shader/chunk/logDepth_main.vert ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_USE_LOG_DEPTH\n    #ifdef HILO_USE_EXT_FRAG_DEPTH\n        v_fragDepth = 1.0 + gl_Position.w;\n    #else\n        gl_Position.z = log2( max( 1e-6, gl_Position.w + 1.0 ) ) * u_logDepth - 1.0;\n        gl_Position.z *= gl_Position.w;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/morph.vert":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/morph.vert ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_MORPH_TARGET_COUNT\n    uniform float u_morphWeights[HILO_MORPH_TARGET_COUNT];\n\n    #if HILO_MORPH_TARGET_COUNT > 0\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition0;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal0;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent0;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 1\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition1;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal1;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent1;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 2\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition2;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal2;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent2;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 3\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition3;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal3;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent3;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 4\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition4;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal4;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent4;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 5\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition5;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal5;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent5;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 6\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition6;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal6;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent6;\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 7\n        #ifdef HILO_MORPH_HAS_POSITION\n            attribute vec3 a_morphPosition7;\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            attribute vec3 a_morphNormal7;\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            attribute vec3 a_morphTangent7;\n        #endif\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/morph_main.vert":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/morph_main.vert ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_MORPH_TARGET_COUNT\n    #if HILO_MORPH_TARGET_COUNT > 0\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition0 * u_morphWeights[0];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal0 * u_morphWeights[0];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent0 * u_morphWeights[0];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 1\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition1 * u_morphWeights[1];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal1 * u_morphWeights[1];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent1 * u_morphWeights[1];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 2\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition2 * u_morphWeights[2];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal2 * u_morphWeights[2];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent2 * u_morphWeights[2];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 3\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition3 * u_morphWeights[3];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal3 * u_morphWeights[3];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent3 * u_morphWeights[3];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 4\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition4 * u_morphWeights[4];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal4 * u_morphWeights[4];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent4 * u_morphWeights[4];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 5\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition5 * u_morphWeights[5];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal5 * u_morphWeights[5];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent5 * u_morphWeights[5];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 6\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition6 * u_morphWeights[6];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal6 * u_morphWeights[6];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent6 * u_morphWeights[6];\n        #endif\n    #endif\n\n    #if HILO_MORPH_TARGET_COUNT > 7\n        #ifdef HILO_MORPH_HAS_POSITION\n            pos.xyz += a_morphPosition7 * u_morphWeights[7];\n        #endif\n        #if defined(HILO_MORPH_HAS_NORMAL) && defined(HILO_HAS_NORMAL)\n            normal += a_morphNormal7 * u_morphWeights[7];\n        #endif\n        #if defined(HILO_MORPH_HAS_TANGENT) && defined(HILO_HAS_TANGENT)\n            tangent.xyz += a_morphTangent7 * u_morphWeights[7];\n        #endif\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/normal.frag":
/*!*********************************************!*\
  !*** ./src/engine/shader/chunk/normal.frag ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_NORMAL\n    varying vec3 v_normal;\n    #ifdef HILO_NORMAL_MAP\n        uniform HILO_SAMPLER_2D u_normalMap;\n        varying mat3 v_TBN;\n        \n        #ifdef HILO_NORMAL_MAP_SCALE\n        uniform float u_normalMapScale;\n        #endif\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/normal.vert":
/*!*********************************************!*\
  !*** ./src/engine/shader/chunk/normal.vert ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_NORMAL\n    attribute vec3 a_normal;\n    uniform mat3 u_normalMatrix;\n    varying vec3 v_normal;\n\n    #ifdef HILO_NORMAL_MAP\n        attribute vec4 a_tangent;\n        varying mat3 v_TBN;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/normal_main.frag":
/*!**************************************************!*\
  !*** ./src/engine/shader/chunk/normal_main.frag ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_NORMAL_MAP\n    vec3 normal = HILO_TEXTURE_2D(u_normalMap).rgb * 2.0 - 1.0;\n    #ifdef HILO_NORMAL_MAP_SCALE\n        normal.xy *= u_normalMapScale;\n    #endif\n    normal = normalize(v_TBN * normal);\n#elif defined(HILO_HAS_NORMAL)\n    vec3 normal = normalize(v_normal);\n#else\n    vec3 normal = vec3(0, 0, 1);\n#endif\n\n#if HILO_SIDE == HILO_BACK_SIDE\n    normal = -normal;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/normal_main.vert":
/*!**************************************************!*\
  !*** ./src/engine/shader/chunk/normal_main.vert ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_NORMAL\n    #ifdef HILO_NORMAL_MAP\n        vec3 T = normalize(u_normalMatrix * tangent.xyz);\n        vec3 N = normalize(u_normalMatrix * normal);\n        T = normalize(T - dot(T, N) * N);\n        vec3 B = cross(N, T) * tangent.w;\n        v_TBN = mat3(T, B, N);\n    #endif\n    v_normal = normalize(u_normalMatrix * normal);\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/pbr.frag":
/*!******************************************!*\
  !*** ./src/engine/shader/chunk/pbr.frag ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ../method/textureEnvMap.glsl */ "./src/engine/shader/method/textureEnvMap.glsl") + "\n" + __webpack_require__(/*! ../method/encoding.glsl */ "./src/engine/shader/method/encoding.glsl") + "\n" + __webpack_require__(/*! ./fixMathCrash.glsl */ "./src/engine/shader/chunk/fixMathCrash.glsl") + "\n\nuniform vec4 u_baseColor;\n#ifdef HILO_BASE_COLOR_MAP\n    uniform HILO_SAMPLER_2D u_baseColorMap;\n#endif\n\n#ifdef HILO_NEED_WORLD_NORMAL\n    uniform mat3 u_viewInverseNormalMatrix;\n#endif\n\n#ifdef HILO_HAS_LIGHT\n    uniform float u_metallic;\n    #ifdef HILO_METALLIC_MAP\n        uniform HILO_SAMPLER_2D u_metallicMap;\n    #endif\n        uniform float u_roughness;\n    #ifdef HILO_ROUGHNESS_MAP\n        uniform HILO_SAMPLER_2D u_roughnessMap;\n    #endif\n    #ifdef HILO_METALLIC_ROUGHNESS_MAP\n        uniform HILO_SAMPLER_2D u_metallicRoughnessMap;\n    #endif\n    #ifdef HILO_OCCLUSION_MAP\n        uniform HILO_SAMPLER_2D u_occlusionMap;\n    #endif\n\n    #ifdef HILO_OCCLUSION_STRENGTH\n        uniform float u_occlusionStrength;\n    #endif\n\n    #ifdef HILO_DIFFUSE_ENV_MAP\n        #ifdef HILO_DIFFUSE_ENV_MAP_CUBE\n            uniform samplerCube u_diffuseEnvMap;\n        #else\n            uniform sampler2D u_diffuseEnvMap;\n        #endif\n        uniform float u_diffuseEnvIntensity;\n    #elif defined(HILO_DIFFUSE_ENV_SPHERE_HARMONICS3)\n        uniform vec3 u_diffuseEnvSphereHarmonics3[9];\n        uniform float u_diffuseEnvIntensity;\n    #endif\n    #ifdef HILO_SPECULAR_ENV_MAP\n        uniform sampler2D u_brdfLUT;\n        #ifdef HILO_SPECULAR_ENV_MAP_CUBE\n            uniform samplerCube u_specularEnvMap;\n        #else\n            uniform sampler2D u_specularEnvMap;\n        #endif\n        uniform float u_specularEnvIntensity;\n\n        #ifdef HILO_USE_SHADER_TEXTURE_LOD\n            uniform float u_specularEnvMapMipCount;\n        #endif\n    #endif\n\n    #ifdef HILO_EMISSION_MAP\n        uniform HILO_SAMPLER_2D u_emission;\n    #endif\n\n    #ifdef HILO_PBR_SPECULAR_GLOSSINESS\n        uniform vec4 u_specular;\n        uniform float u_glossiness;\n        #ifdef HILO_SPECULAR_GLOSSINESS_MAP\n            uniform HILO_SAMPLER_2D u_specularGlossinessMap;\n        #endif\n    #endif\n\n    #ifdef HILO_LIGHT_MAP\n        uniform HILO_SAMPLER_2D u_lightMap;\n    #endif\n\n\n    // PBR Based on https://github.com/KhronosGroup/glTF-WebGL-PBR\n\n    // Basic Lambertian diffuse\n    // Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\n    // See also [1], Equation 1\n    vec3 diffuse(vec3 diffuseColor) {\n        return diffuseColor * HILO_INVERSE_PI;\n    }\n\n    // The following equation models the Fresnel reflectance term of the spec equation (aka F())\n    // Implementation of fresnel from [4], Equation 15\n    vec3 specularReflection(vec3 reflectance0, vec3 reflectance90, float VdotH) {\n        return reflectance0 + (reflectance90 - reflectance0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\n    }\n\n    // This calculates the specular geometric attenuation (aka G()),\n    // where rougher material will reflect less light back to the viewer.\n    // This implementation is based on [1] Equation 4, and we adopt their modifications to\n    // alphaRoughness as input as originally proposed in [2].\n    float geometricOcclusion(float NdotL, float NdotV, float alphaRoughness) {\n        float r = alphaRoughness * alphaRoughness;\n\n        float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));\n        float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));\n        return attenuationL * attenuationV;\n    }\n\n    // The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n    // Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n    // Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\n    float microfacetDistribution(float alphaRoughness, float NdotH) {\n        float roughnessSq = alphaRoughness * alphaRoughness;\n        float f = (NdotH * roughnessSq - NdotH) * NdotH + 1.0;\n        return roughnessSq * HILO_INVERSE_PI / (f * f);\n    }\n\n    vec3 computeDiffuseSHLight(vec3 normal, in vec3 sh[9]) {\n        return sh[0] +\n            sh[1] * (normal.y) +\n            sh[2] * (normal.z) +\n            sh[3] * (normal.x) +\n            sh[4] * (normal.y * normal.x) +\n            sh[5] * (normal.y * normal.z) +\n            sh[6] * ((3.0 * normal.z * normal.z) - 1.0) +\n            sh[7] * (normal.z * normal.x) +\n            sh[8] * (normal.x * normal.x - (normal.y * normal.y));\n    }\n\n    // https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_lights_image_based/README.md#rgbd\n    vec3 decodeRGBD(in vec4 color){\n        return color.rgb / color.a;\n    }\n\n    vec3 getIBLContribution(in vec3 N, in vec3 V, vec3 diffuseColor, vec3 specularColor, float ao, float NdotV, float perceptualRoughness) {\n        vec3 color = vec3(.0, .0, .0);\n        #ifdef HILO_NEED_WORLD_NORMAL\n        N = u_viewInverseNormalMatrix * N;\n        V = u_viewInverseNormalMatrix * V;\n        #endif\n        #if defined(HILO_DIFFUSE_ENV_MAP) || defined(HILO_DIFFUSE_ENV_SPHERE_HARMONICS3)\n            #ifdef HILO_DIFFUSE_ENV_MAP\n                #ifdef HILO_GAMMA_CORRECTION\n                    vec3 diffuseLight = sRGBToLinear(textureEnvMap(u_diffuseEnvMap, N)).rgb;\n                #else\n                    vec3 diffuseLight = textureEnvMap(u_diffuseEnvMap, N).rgb;\n                #endif\n            #elif defined(HILO_DIFFUSE_ENV_SPHERE_HARMONICS3)\n                vec3 diffuseLight = computeDiffuseSHLight(N, u_diffuseEnvSphereHarmonics3);\n            #endif\n            color.rgb += diffuseLight * diffuseColor * ao * u_diffuseEnvIntensity;\n        #endif\n\n        #ifdef HILO_SPECULAR_ENV_MAP\n            vec3 R = -normalize(reflect(V, N));\n            vec3 brdf = texture2D(u_brdfLUT, vec2(NdotV, 1.0 - perceptualRoughness)).rgb;\n            #ifdef HILO_USE_SHADER_TEXTURE_LOD\n                float lod = clamp(perceptualRoughness * u_specularEnvMapMipCount, 0.0, u_specularEnvMapMipCount);\n                vec4 specularEnvMap = textureEnvMapLod(u_specularEnvMap, R, lod);\n            #else\n                vec4 specularEnvMap = textureEnvMap(u_specularEnvMap, R);\n            #endif\n\n            vec3 specularLight = decodeRGBD(specularEnvMap);\n\n            #ifdef HILO_GAMMA_CORRECTION\n                specularLight = sRGBToLinear(specularLight);\n            #endif\n            color.rgb += specularLight * (specularColor * brdf.x + brdf.y) * u_specularEnvIntensity;\n        #endif\n        return color;\n    }\n\n    vec3 calculateLo(vec3 N, vec3 V, vec3 L, vec3 reflectance0, vec3 reflectance90, float alphaRoughness, vec3 diffuseColor, float NdotV) {\n        vec3 H = normalize(L + V);\n        float NdotL = clamp(dot(N, L), 0.001, 1.0);\n        float NdotH = clamp(dot(N, H), 0.0, 1.0);\n        float LdotH = clamp(dot(L, H), 0.0, 1.0);\n        float VdotH = clamp(dot(V, H), 0.0, 1.0);\n        // Calculate the shading terms for the microfacet specular shading model\n        vec3 F = specularReflection(reflectance0, reflectance90, VdotH);\n        float G = geometricOcclusion(NdotL, NdotV, alphaRoughness);\n        float D = microfacetDistribution(alphaRoughness, NdotH);\n\n        vec3 diffuseContrib;\n\n        #ifdef HILO_LIGHT_MAP\n            diffuseContrib = vec3(0.0);\n        #else\n            diffuseContrib = (1.0 - F) * diffuse(diffuseColor);\n        #endif\n        vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\n        // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n        return NdotL * (diffuseContrib + specContrib);\n    }\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/pbr_main.frag":
/*!***********************************************!*\
  !*** ./src/engine/shader/chunk/pbr_main.frag ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\nvec4 baseColor = u_baseColor;\n\n#ifdef HILO_BASE_COLOR_MAP\n    #ifdef HILO_GAMMA_CORRECTION\n        baseColor *= sRGBToLinear(HILO_TEXTURE_2D(u_baseColorMap));\n    #else\n        baseColor *= HILO_TEXTURE_2D(u_baseColorMap);\n    #endif\n#endif\n\n#if defined(HILO_HAS_COLOR)\n    baseColor *= v_color;\n#endif\n\ncolor.a = baseColor.a;\n\n" + __webpack_require__(/*! ./transparency_main.frag */ "./src/engine/shader/chunk/transparency_main.frag") + "\n\n#ifdef HILO_HAS_LIGHT\n    vec3 viewPos = vec3(0, 0, 0);\n    vec3 N = normal;\n    vec3 V = normalize(viewPos - v_fragPos);\n\n    #ifdef HILO_OCCLUSION_MAP\n        float ao  = HILO_TEXTURE_2D(u_occlusionMap).r;\n    #else\n        float ao = 1.0;\n    #endif\n\n    #ifdef HILO_PBR_SPECULAR_GLOSSINESS\n        vec3 specular = u_specular.rgb;\n        float glossiness = u_glossiness;\n        #ifdef HILO_SPECULAR_GLOSSINESS_MAP\n            vec4 specularGlossiness = sRGBToLinear(HILO_TEXTURE_2D(u_specularGlossinessMap));\n            specular = specularGlossiness.rgb * specular;\n            glossiness = specularGlossiness.a * glossiness;\n        #endif\n        float roughness = 1.0 - glossiness;\n        float metallic = 0.0;\n        vec3 diffuseColor = baseColor.rgb * (1.0 - max(max(specular.r, specular.g), specular.b));\n        vec3 specularColor = specular;\n    #else\n        float metallic = u_metallic;\n        float roughness = u_roughness;\n        #ifdef HILO_METALLIC_MAP\n            metallic = HILO_TEXTURE_2D(u_metallicMap).r * u_metallic;\n        #endif\n        #ifdef HILO_ROUGHNESS_MAP\n            roughness  = HILO_TEXTURE_2D(u_roughnessMap).r * u_roughness;\n        #endif\n        #ifdef HILO_METALLIC_ROUGHNESS_MAP\n            vec4 metallicRoughnessMap = HILO_TEXTURE_2D(u_metallicRoughnessMap);\n            #ifdef HILO_IS_OCCLUSION_MAP_IN_METALLIC_ROUGHNESS_MAP\n                ao = metallicRoughnessMap.r;\n            #endif\n            roughness = metallicRoughnessMap.g * u_roughness;\n            metallic = metallicRoughnessMap.b * u_metallic;\n        #endif\n        roughness = clamp(roughness, 0.04, 1.0);\n        metallic = clamp(metallic, 0.0, 1.0);\n        vec3 f0 = vec3(0.04);\n        vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n        diffuseColor *= 1.0 - metallic;\n        vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n    #endif\n\n    #ifdef HILO_OCCLUSION_STRENGTH\n        ao = mix(1.0, ao, u_occlusionStrength);\n    #endif\n\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n    float NdotV = clamp(abs(dot(N, V)), 0.001, 1.0);\n    float alphaRoughness = roughness * roughness;\n\n    #ifdef HILO_DIRECTIONAL_LIGHTS\n        for(int i = 0;i < HILO_DIRECTIONAL_LIGHTS;i++){\n            vec3 lightDir = normalize(-u_directionalLightsInfo[i]);\n            vec3 radiance = u_directionalLightsColor[i];\n            float shadow = 1.0;\n            #ifdef HILO_DIRECTIONAL_LIGHTS_SMC\n                if (i < HILO_DIRECTIONAL_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_directionalLightsShadowBias[i][1] * (1.0 - dot(N, lightDir)), u_directionalLightsShadowBias[i][0]);\n                    shadow = getShadow(u_directionalLightsShadowMap[i], u_directionalLightsShadowMapSize[i], bias, v_fragPos, u_directionalLightSpaceMatrix[i]);\n                }\n            #endif\n            color.rgb += shadow * radiance * calculateLo(N, V, lightDir, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, NdotV);\n        }\n    #endif\n\n    #ifdef HILO_SPOT_LIGHTS\n        for(int i = 0; i < HILO_SPOT_LIGHTS; i++){\n            vec3 lightDir = normalize(-u_spotLightsDir[i]);\n            vec3 distanceVec = u_spotLightsPos[i] - v_fragPos;\n\n            float theta = dot(normalize(distanceVec), lightDir);\n            float epsilon = u_spotLightsCutoffs[i][0] - u_spotLightsCutoffs[i][1];\n            float intensity = clamp((theta - u_spotLightsCutoffs[i][1]) / epsilon, 0.0, 1.0);\n            float attenuation = getLightAttenuation(distanceVec, u_spotLightsInfo[i], u_spotLightsRange[i]);\n            vec3 radiance = intensity * attenuation * u_spotLightsColor[i];\n\n            float shadow = 1.0;\n            #ifdef HILO_SPOT_LIGHTS_SMC\n                if (i < HILO_SPOT_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_spotLightsShadowBias[i][1] * (1.0 - dot(N, lightDir)), u_spotLightsShadowBias[i][0]);\n                    shadow = getShadow(u_spotLightsShadowMap[i], u_spotLightsShadowMapSize[i], bias, v_fragPos, u_spotLightSpaceMatrix[i]);\n                }\n            #endif\n            color.rgb += shadow * radiance * calculateLo(N, V, lightDir, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, NdotV);\n        }\n    #endif\n\n    #ifdef HILO_POINT_LIGHTS\n        for(int i = 0; i < HILO_POINT_LIGHTS; i++){\n            vec3 distanceVec = u_pointLightsPos[i] - v_fragPos;\n            vec3 lightDir = normalize(distanceVec);\n\n            float shadow = 1.0;\n            #ifdef HILO_POINT_LIGHTS_SMC\n                if (i < HILO_POINT_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_pointLightsShadowBias[i][1] * (1.0 - dot(normal, lightDir)), u_pointLightsShadowBias[i][0]);\n                    shadow = getShadow(u_pointLightsShadowMap[i], bias, u_pointLightsPos[i], v_fragPos, u_pointLightCamera[i], u_pointLightSpaceMatrix[i]);\n                }\n            #endif\n\n            float attenuation = getLightAttenuation(distanceVec, u_pointLightsInfo[i], u_pointLightsRange[i]);\n            vec3 radiance = attenuation * u_pointLightsColor[i];\n\n            color.rgb += shadow * radiance * calculateLo(N, V, lightDir, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, NdotV);\n        }\n    #endif\n\n    #ifdef HILO_AREA_LIGHTS\n        for(int i = 0; i < HILO_AREA_LIGHTS; i++){\n            color.rgb += getAreaLight(diffuseColor, specularColor, roughness, N, V, v_fragPos, u_areaLightsPos[i], u_areaLightsColor[i], u_areaLightsWidth[i], u_areaLightsHeight[i], u_areaLightsLtcTexture1, u_areaLightsLtcTexture2);\n        }\n    #endif\n\n    #ifdef HILO_LIGHT_MAP\n        vec4 lightMapColor = HILO_TEXTURE_2D(u_lightMap);\n        // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_lights_image_based#rgbd\n        color.rgb += baseColor.rgb * decodeRGBD(lightMapColor);\n    #endif\n\n    // IBL\n    color.rgb += getIBLContribution(N, V, diffuseColor, specularColor, ao, NdotV, roughness);\n\n    #if defined(HILO_AMBIENT_LIGHTS) && (defined(HILO_IS_DIFFUESENV_AND_AMBIENTLIGHT_WORK_TOGETHER) || (!defined(HILO_DIFFUSE_ENV_MAP) && !defined(HILO_DIFFUSE_ENV_SPHERE_HARMONICS3)))\n        color.rgb += u_ambientLightsColor * baseColor.rgb * ao;\n    #endif\n\n    #ifdef HILO_EMISSION_MAP\n        #ifdef HILO_GAMMA_CORRECTION\n            color.rgb += sRGBToLinear(HILO_TEXTURE_2D(u_emission)).rgb;\n        #else\n            color.rgb += HILO_TEXTURE_2D(u_emission).rgb;\n        #endif\n    #endif\n#else\n    color = baseColor;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/phong.frag":
/*!********************************************!*\
  !*** ./src/engine/shader/chunk/phong.frag ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ../method/textureEnvMap.glsl */ "./src/engine/shader/method/textureEnvMap.glsl") + "\n" + __webpack_require__(/*! ./fixMathCrash.glsl */ "./src/engine/shader/chunk/fixMathCrash.glsl") + "\n\n#ifdef HILO_HAS_LIGHT\n    #ifdef HILO_HAS_SPECULAR\n        uniform float u_shininess;\n        #ifdef HILO_SPECULAR_MAP\n            uniform HILO_SAMPLER_2D u_specular;\n        #else\n            uniform vec4 u_specular;\n        #endif\n    #endif\n    #ifdef HILO_EMISSION_MAP\n        uniform HILO_SAMPLER_2D u_emission;\n    #else\n        uniform vec4 u_emission;\n    #endif\n    #ifdef HILO_AMBIENT_MAP\n        uniform HILO_SAMPLER_2D u_ambient;\n    #endif\n    #ifdef HILO_SPECULAR_ENV_MAP\n        #ifdef HILO_SPECULAR_ENV_MAP_CUBE\n            uniform samplerCube u_specularEnvMap;\n        #else\n            uniform sampler2D u_specularEnvMap;\n        #endif\n        uniform mat4 u_specularEnvMatrix;\n        uniform float u_reflectivity;\n        uniform float u_refractRatio;\n        uniform float u_refractivity;\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/phong_main.frag":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/phong_main.frag ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_LIGHT\n    vec3 lightDiffuse = vec3(0, 0, 0);\n    vec3 lightAmbient = vec3(0, 0, 0);\n    vec3 viewPos = vec3(0, 0, 0);\n\n    #ifdef HILO_AMBIENT_MAP\n        lightAmbient = HILO_TEXTURE_2D(u_ambient).rgb;\n    #else\n        lightAmbient = diffuse.rgb;\n    #endif\n\n    #ifdef HILO_HAS_SPECULAR\n        vec3 lightSpecular = vec3(0, 0, 0);\n        #ifdef HILO_SPECULAR_MAP\n            vec4 specular = HILO_TEXTURE_2D(u_specular);\n        #else\n            vec4 specular = u_specular;\n        #endif\n    #endif\n    \n    #ifdef HILO_EMISSION_MAP\n        vec4 emission = HILO_TEXTURE_2D(u_emission);\n    #else\n        vec4 emission = u_emission;\n    #endif\n\n    #ifdef HILO_DIRECTIONAL_LIGHTS\n        for(int i = 0;i < HILO_DIRECTIONAL_LIGHTS;i++){\n            vec3 lightDir = -u_directionalLightsInfo[i];\n\n            float shadow = 1.0;\n            #ifdef HILO_DIRECTIONAL_LIGHTS_SMC\n                if (i < HILO_DIRECTIONAL_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_directionalLightsShadowBias[i][1] * (1.0 - dot(normal, lightDir)), u_directionalLightsShadowBias[i][0]);\n                    shadow = getShadow(u_directionalLightsShadowMap[i], u_directionalLightsShadowMapSize[i], bias, v_fragPos, u_directionalLightSpaceMatrix[i]);\n                }\n            #endif\n\n            float diff = getDiffuse(normal, lightDir);\n            lightDiffuse += diff * u_directionalLightsColor[i] * shadow;\n\n            #ifdef HILO_HAS_SPECULAR\n                float spec = getSpecular(viewPos, v_fragPos, lightDir, normal, u_shininess);\n                lightSpecular += spec * u_directionalLightsColor[i] * shadow;\n            #endif\n        }\n    #endif\n\n    #ifdef HILO_SPOT_LIGHTS\n        for(int i = 0; i < HILO_SPOT_LIGHTS; i++){\n            vec3 lightDir = -u_spotLightsDir[i];\n            vec3 distanceVec = u_spotLightsPos[i] - v_fragPos;\n\n            float shadow = 1.0;\n            #ifdef HILO_SPOT_LIGHTS_SMC\n                if (i < HILO_SPOT_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_spotLightsShadowBias[i][1] * (1.0 - dot(normal, lightDir)), u_spotLightsShadowBias[i][0]);\n                    shadow = getShadow(u_spotLightsShadowMap[i], u_spotLightsShadowMapSize[i], bias, v_fragPos, u_spotLightSpaceMatrix[i]);\n                }\n            #endif\n            \n            float diff = getDiffuse(normal, normalize(distanceVec));\n            float theta = dot(normalize(distanceVec), lightDir);\n            float epsilon = u_spotLightsCutoffs[i][0] - u_spotLightsCutoffs[i][1];\n            float intensity = clamp((theta - u_spotLightsCutoffs[i][1]) / epsilon, 0.0, 1.0);\n            float attenuation = getLightAttenuation(distanceVec, u_spotLightsInfo[i], u_spotLightsRange[i]);\n\n            lightDiffuse += intensity * attenuation * shadow * diff * u_spotLightsColor[i];\n\n            #ifdef HILO_HAS_SPECULAR\n                float spec = getSpecular(viewPos, v_fragPos, lightDir, normal, u_shininess);\n                lightSpecular += intensity * attenuation * shadow * spec * u_spotLightsColor[i];\n            #endif\n        }\n    #endif\n\n    #ifdef HILO_POINT_LIGHTS\n        for(int i = 0;i < HILO_POINT_LIGHTS;i++){\n            vec3 distanceVec = u_pointLightsPos[i] - v_fragPos;\n            vec3 lightDir = normalize(distanceVec);\n\n            float shadow = 1.0;\n            #ifdef HILO_POINT_LIGHTS_SMC\n                if (i < HILO_POINT_LIGHTS_SMC) {\n                    float bias = HILO_MAX(u_pointLightsShadowBias[i][1] * (1.0 - dot(normal, lightDir)), u_pointLightsShadowBias[i][0]);\n                    shadow = getShadow(u_pointLightsShadowMap[i], bias, u_pointLightsPos[i], v_fragPos, u_pointLightCamera[i], u_pointLightSpaceMatrix[i]);\n                }\n            #endif\n            \n            float diff = getDiffuse(normal, lightDir);\n            float attenuation = getLightAttenuation(distanceVec, u_pointLightsInfo[i], u_pointLightsRange[i]);\n            lightDiffuse += diff * attenuation * u_pointLightsColor[i] * shadow;\n\n            #ifdef HILO_HAS_SPECULAR\n                float spec = getSpecular(viewPos, v_fragPos, lightDir, normal, u_shininess);\n                lightSpecular += spec * attenuation * u_pointLightsColor[i] * shadow;\n            #endif\n        }\n    #endif\n\n    #ifdef HILO_AREA_LIGHTS\n        #ifndef HILO_HAS_SPECULAR\n            vec4 specular = vec4(0.0, 0.0, 0.0, 0.0);\n        #endif\n        vec3 viewDir = normalize(vec3(0, 0, 0) - v_fragPos);\n        for(int i = 0; i < HILO_AREA_LIGHTS; i++){\n            color.rgb += getAreaLight(diffuse.rgb, specular.rgb, sqrt(2.0/(u_shininess+2.0)), normal, viewDir, v_fragPos, u_areaLightsPos[i], u_areaLightsColor[i], u_areaLightsWidth[i], u_areaLightsHeight[i], u_areaLightsLtcTexture1, u_areaLightsLtcTexture2);\n        }\n    #endif\n\n    #ifdef HILO_AMBIENT_LIGHTS\n        color.rgb += u_ambientLightsColor * lightAmbient;\n    #endif\n\n    #if defined(HILO_SPECULAR_ENV_MAP) && defined(HILO_HAS_SPECULAR)\n        vec3 I = normalize(v_fragPos - viewPos);\n        if (u_reflectivity > 0.0) {\n            vec3 R = reflect(I, normal);\n            R = normalize(vec3(u_specularEnvMatrix * vec4(R, 1.0)));\n            lightSpecular += textureEnvMap(u_specularEnvMap, R).rgb * u_reflectivity;\n        }\n        if (u_refractivity > 0.0) {\n            vec3 R = refract(I, normal, u_refractRatio);\n            R = normalize(vec3(u_specularEnvMatrix * vec4(R, 1.0)));\n            lightSpecular += textureEnvMap(u_specularEnvMap, R).rgb * u_refractivity;\n        }\n    #endif\n\n    color.rgb += lightDiffuse * diffuse.rgb;\n    #ifdef HILO_HAS_SPECULAR\n        color.rgb += lightSpecular * specular.rgb;\n    #endif\n\n    color.rgb += emission.rgb;\n#else\n    color = diffuse;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/precision.frag":
/*!************************************************!*\
  !*** ./src/engine/shader/chunk/precision.frag ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#ifdef GL_ES\nprecision HILO_MAX_FRAGMENT_PRECISION float;\n#define GLSLIFY 1\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/precision.vert":
/*!************************************************!*\
  !*** ./src/engine/shader/chunk/precision.vert ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#ifdef GL_ES\nprecision HILO_MAX_VERTEX_PRECISION float;\n#define GLSLIFY 1\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/transparency.frag":
/*!***************************************************!*\
  !*** ./src/engine/shader/chunk/transparency.frag ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_TRANSPARENCY_MAP\n    uniform HILO_SAMPLER_2D u_transparency;\n#else\n    uniform float u_transparency;\n#endif\n\n#ifdef HILO_ALPHA_CUTOFF\n    uniform float u_alphaCutoff;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/transparency_main.frag":
/*!********************************************************!*\
  !*** ./src/engine/shader/chunk/transparency_main.frag ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat transparency = 1.0;\n#ifdef HILO_TRANSPARENCY_MAP\n    transparency = HILO_TEXTURE_2D(u_transparency).r;\n#else\n    transparency = u_transparency;\n#endif\ncolor.a *= transparency;\n#ifdef HILO_ALPHA_CUTOFF\n    if (color.a < u_alphaCutoff) {\n        discard;\n    } else {\n        color.a = 1.0;\n    }\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/unQuantize.vert":
/*!*************************************************!*\
  !*** ./src/engine/shader/chunk/unQuantize.vert ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_QUANTIZED\n    #ifdef HILO_POSITION_QUANTIZED\n        uniform mat4 u_positionDecodeMat;\n    #endif\n    #ifdef HILO_NORMAL_QUANTIZED\n        uniform mat4 u_normalDecodeMat;\n    #endif\n    #ifdef HILO_UV_QUANTIZED\n        uniform mat3 u_uvDecodeMat;\n    #endif\n    #ifdef HILO_UV1_QUANTIZED\n        uniform mat3 u_uv1DecodeMat;\n    #endif\n\n    vec2 unQuantize(vec2 data, mat3 decodeMat) {\n        vec3 result = vec3(data, 1.0);\n        result = decodeMat * result;\n        return result.xy;\n    }\n\n    vec3 unQuantize(vec3 data, mat4 decodeMat) {\n        vec4 result = vec4(data, 1.0);\n        result = decodeMat * result;\n        return result.xyz;\n    }\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/unQuantize_main.vert":
/*!******************************************************!*\
  !*** ./src/engine/shader/chunk/unQuantize_main.vert ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_QUANTIZED\n    #ifdef HILO_POSITION_QUANTIZED\n        pos.xyz = unQuantize(pos.xyz, u_positionDecodeMat);\n    #endif\n    #if defined(HILO_HAS_TEXCOORD0) && defined(HILO_UV_QUANTIZED)\n        uv = unQuantize(uv, u_uvDecodeMat);\n    #endif\n    #if defined(HILO_HAS_TEXCOORD1) && defined(HILO_UV1_QUANTIZED)\n        uv1 = unQuantize(uv1, u_uv1DecodeMat);\n    #endif\n    #if defined(HILO_HAS_NORMAL) && defined(HILO_NORMAL_QUANTIZED)\n        normal = unQuantize(normal, u_normalDecodeMat);\n    #endif\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/uv.frag":
/*!*****************************************!*\
  !*** ./src/engine/shader/chunk/uv.frag ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_TEXCOORD0\n    varying vec2 v_texcoord0;\n#endif\n\n#ifdef HILO_HAS_TEXCOORD1\n    varying vec2 v_texcoord1;\n#endif\n\n#if defined(HILO_HAS_TEXCOORD0) || defined(HILO_HAS_TEXCOORD1)\n    #if defined(HILO_HAS_TEXCOORD0) && defined(HILO_HAS_TEXCOORD1)\n        #define HILO_SAMPLER_2D hiloSampler2D\n        // https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Opaque_types\n        #define HILO_TEXTURE_2D(HILO_SAMPLER_2D)  hiloTexture2D(HILO_SAMPLER_2D.texture, HILO_SAMPLER_2D.uv)\n        struct hiloSampler2D{\n            sampler2D texture;\n            int uv; \n        };\n        \n        vec4 hiloTexture2D(sampler2D texture, int uv){\n            if(uv == 0){\n                return texture2D(texture, v_texcoord0);\n            }\n            else{\n                return texture2D(texture, v_texcoord1);\n            }\n        }\n    #else\n        #ifdef HILO_HAS_TEXCOORD1\n            #define HILO_V_TEXCOORD v_texcoord1\n        #else\n            #define HILO_V_TEXCOORD v_texcoord0\n        #endif\n        #define HILO_SAMPLER_2D sampler2D\n        #define HILO_TEXTURE_2D(HILO_SAMPLER_2D)  texture2D(HILO_SAMPLER_2D, HILO_V_TEXCOORD)\n    #endif\n#endif\n\n\n#ifdef HILO_DIFFUSE_CUBE_MAP\n    varying vec3 v_position;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/uv.vert":
/*!*****************************************!*\
  !*** ./src/engine/shader/chunk/uv.vert ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_TEXCOORD0\n    attribute vec2 a_texcoord0;\n    varying vec2 v_texcoord0;\n    #ifdef HILO_UV_MATRIX\n        uniform mat3 u_uvMatrix;\n    #endif\n#endif\n\n#ifdef HILO_HAS_TEXCOORD1\n    attribute vec2 a_texcoord1;\n    varying vec2 v_texcoord1;\n    #ifdef HILO_UV_MATRIX1\n        uniform mat3 u_uvMatrix1;\n    #endif\n#endif\n\n#ifdef HILO_DIFFUSE_CUBE_MAP\n    varying vec3 v_position;\n#endif"

/***/ }),

/***/ "./src/engine/shader/chunk/uv_main.vert":
/*!**********************************************!*\
  !*** ./src/engine/shader/chunk/uv_main.vert ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n#ifdef HILO_HAS_TEXCOORD0\n    #ifdef HILO_UV_MATRIX\n        v_texcoord0 = (u_uvMatrix * vec3(uv, 1.0)).xy;\n    #else\n        v_texcoord0 = uv;\n    #endif\n#endif\n#ifdef HILO_HAS_TEXCOORD1\n    #ifdef HILO_UV_MATRIX1\n        v_texcoord1 = (u_uvMatrix1 * vec3(uv1, 1.0)).xy;\n    #else\n        v_texcoord1 = uv1;\n    #endif\n#endif\n#ifdef HILO_DIFFUSE_CUBE_MAP\n    v_position = pos.xyz;\n#endif"

/***/ }),

/***/ "./src/engine/shader/geometry.frag":
/*!*****************************************!*\
  !*** ./src/engine/shader/geometry.frag ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag") + "\n\n#if defined(HILO_VERTEX_TYPE_POSITION)\n    varying vec3 v_fragPos;\n#elif defined(HILO_VERTEX_TYPE_NORMAL)\n    varying vec3 v_normal;\n#elif defined(HILO_VERTEX_TYPE_DEPTH)\n    uniform float u_cameraFar;\n    uniform float u_cameraNear;\n    uniform float u_cameraType;\n#elif defined(HILO_VERTEX_TYPE_DISTANCE)\n    " + __webpack_require__(/*! ./method/packFloat.glsl */ "./src/engine/shader/method/packFloat.glsl") + "\n\n    uniform float u_cameraFar;\n    uniform float u_cameraNear;\n    varying vec3 v_fragPos;\n#endif\n\nvec4 transformDataToColor(vec3 data){\n    #ifdef HILO_WRITE_ORIGIN_DATA\n        return vec4(data, 1.0);\n    #else\n        return vec4(data * 0.5 + 0.5, 1.0);\n    #endif\n}\n\n" + __webpack_require__(/*! ./chunk/logDepth.frag */ "./src/engine/shader/chunk/logDepth.frag") + "\n\nvoid main(void) {\n    #if defined(HILO_VERTEX_TYPE_POSITION)\n        gl_FragColor = transformDataToColor(v_fragPos);\n    #elif defined(HILO_VERTEX_TYPE_NORMAL)\n        gl_FragColor = transformDataToColor(v_normal);\n    #elif defined(HILO_VERTEX_TYPE_DEPTH)\n        float z;\n        #ifdef HILO_WRITE_ORIGIN_DATA\n            z = gl_FragCoord.z;\n        #else\n            // OrthographicCamera\n            if(u_cameraType < 1.0){\n                z = gl_FragCoord.z;\n            }\n            // PerspectiveCamera\n            else{\n                z = gl_FragCoord.z * 2.0 - 1.0;\n                z = (2.0 * u_cameraNear * u_cameraFar) / (u_cameraFar + u_cameraNear - z * (u_cameraFar - u_cameraNear));\n            }\n        #endif\n        gl_FragColor = vec4(z, z, z, 1.0);\n    #elif defined(HILO_VERTEX_TYPE_DISTANCE)\n        float distance = length(v_fragPos);\n        #ifdef HILO_WRITE_ORIGIN_DATA\n            gl_FragColor = vec4(distance, distance, distance, 1.0);\n        #else\n            gl_FragColor = packFloat((distance - u_cameraNear)/(u_cameraFar - u_cameraNear));\n        #endif\n    #endif\n    " + __webpack_require__(/*! ./chunk/logDepth_main.frag */ "./src/engine/shader/chunk/logDepth_main.frag") + "\n}"

/***/ }),

/***/ "./src/engine/shader/method/encoding.glsl":
/*!************************************************!*\
  !*** ./src/engine/shader/method/encoding.glsl ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nvec4 sRGBToLinear( in vec4 value ) {\n    return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\n\nvec3 sRGBToLinear( in vec3 value ) {\n    return vec3( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ));\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/getAreaLight.glsl":
/*!****************************************************!*\
  !*** ./src/engine/shader/method/getAreaLight.glsl ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n// modified from https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl#L26\n\n" + __webpack_require__(/*! ../method/transpose.glsl */ "./src/engine/shader/method/transpose.glsl") + "\n\nvec2 LTC_Uv(const in vec3 N, const in vec3 V, const in float roughness) {\n    const float LUT_SIZE = 64.0;\n    const float LUT_SCALE = (LUT_SIZE - 1.0) / LUT_SIZE;\n    const float LUT_BIAS = 0.5 / LUT_SIZE;\n    float dotNV = clamp(dot(N, V), 0.0, 1.0);\n    vec2 uv = vec2(roughness, sqrt(1.0 - dotNV));\n    uv = (uv * LUT_SCALE) + LUT_BIAS;\n    return uv;\n}\n\nfloat LTC_ClippedSphereFormFactor(const in vec3 f) {\n    float l = length(f);\n    return max(((l * l) + f.z) / (l + 1.0), 0.0);\n}\n\nvec3 LTC_EdgeVectorFormFactor(const in vec3 v1, const in vec3 v2) {\n    float x = dot(v1, v2);\n    float y = abs(x);\n    float a = 0.8543985 + ((0.4965155 + (0.0145206 * y)) * y);\n    float b = 3.4175940 + ((4.1616724 + y) * y);\n    float v = a / b;\n    float theta_sintheta = x > 0.0 ? v : (0.5 * inversesqrt(max(1.0 - (x * x), 1e-7))) - v;\n    return cross(v1, v2) * theta_sintheta;\n}\n\nvec3 LTC_Evaluate(const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[4]) {\n    vec3 v1 = rectCoords[1] - rectCoords[0];\n    vec3 v2 = rectCoords[3] - rectCoords[0];\n    vec3 lightNormal = cross(v1, v2);\n    if (dot(lightNormal, P - rectCoords[0]) < 0.0)\n        return vec3(0.0);\n    vec3 T1, T2;\n    T1 = normalize(V - (N * dot(V, N)));\n    T2 = -cross(N, T1);\n    mat3 mat = mInv * transpose(mat3(T1, T2, N));\n    vec3 coords[4];\n    coords[0] = mat * (rectCoords[0] - P);\n    coords[1] = mat * (rectCoords[1] - P);\n    coords[2] = mat * (rectCoords[2] - P);\n    coords[3] = mat * (rectCoords[3] - P);\n    coords[0] = normalize(coords[0]);\n    coords[1] = normalize(coords[1]);\n    coords[2] = normalize(coords[2]);\n    coords[3] = normalize(coords[3]);\n    vec3 vectorFormFactor = vec3(0.0);\n    vectorFormFactor += LTC_EdgeVectorFormFactor(coords[0], coords[1]);\n    vectorFormFactor += LTC_EdgeVectorFormFactor(coords[1], coords[2]);\n    vectorFormFactor += LTC_EdgeVectorFormFactor(coords[2], coords[3]);\n    vectorFormFactor += LTC_EdgeVectorFormFactor(coords[3], coords[0]);\n    float result = LTC_ClippedSphereFormFactor(vectorFormFactor);\n    return vec3(result);\n}\n\nvec3 getAreaLight(const in vec3 diffuseColor, const in vec3 specularColor, const in float roughness, const in vec3 normal, const in vec3 viewDir, const in vec3 position, const in vec3 lightPos, const in vec3 lightColor, const in vec3 halfWidth, const in vec3 halfHeight, const in sampler2D areaLightsLtcTexture1, const in sampler2D areaLightsLtcTexture2){\n    vec3 rectCoords[4];\n    rectCoords[0] = (lightPos - halfWidth) - halfHeight;\n    rectCoords[1] = (lightPos + halfWidth) - halfHeight;\n    rectCoords[2] = (lightPos + halfWidth) + halfHeight;\n    rectCoords[3] = (lightPos - halfWidth) + halfHeight;\n    \n    vec2 uv = LTC_Uv(normal, viewDir, roughness);\n    vec4 t1 = texture2D(areaLightsLtcTexture1, uv);\n    vec4 t2 = texture2D(areaLightsLtcTexture2, uv);\n\n    mat3 mInv = mat3(vec3(t1.x, 0, t1.y), vec3(0, 1, 0), vec3(t1.z, 0, t1.w));\n    vec3 fresnel = (specularColor * t2.x) + ((vec3(1.0) - specularColor) * t2.y);\n    \n    vec3 color = vec3(0.0, 0.0, 0.0);\n    color += ((lightColor * fresnel) * LTC_Evaluate(normal, viewDir, position, mInv, rectCoords));\n    color += ((lightColor * diffuseColor) * LTC_Evaluate(normal, viewDir, position, mat3(1.0), rectCoords));\n    return color;\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/getDiffuse.glsl":
/*!**************************************************!*\
  !*** ./src/engine/shader/method/getDiffuse.glsl ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat getDiffuse(vec3 normal, vec3 lightDir){\n    return max(dot(normal, lightDir), 0.0);\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/getLightAttenuation.glsl":
/*!***********************************************************!*\
  !*** ./src/engine/shader/method/getLightAttenuation.glsl ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat getLightAttenuation(vec3 distanceVec, vec3 info, float range){\n    float distance = length(distanceVec);\n    float attenuation = 1.0;\n    #ifdef HILO_USE_PHYSICS_LIGHT\n        attenuation = max(1.0 / (distance * distance), 0.001);\n        if (range > 0.0) {\n            attenuation *= max(min(1.0 - pow( distance / range, 4.0 ), 1.0), 0.0);\n        }\n    #else\n        attenuation = 1.0/(info.x + info.y * distance + info.z * distance * distance);\n    #endif\n\n    return attenuation;\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/getShadow.glsl":
/*!*************************************************!*\
  !*** ./src/engine/shader/method/getShadow.glsl ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nbool isOutOfRange(vec2 pos) {\n    if (pos.x < 0.0 || pos.x > 1.0 || pos.y < 0.0 || pos.y > 1.0) {\n        return true;\n    }\n    return false;\n}\n\nfloat getShadow(sampler2D shadowMap, vec2 shadowMapSize, float bias, vec3 fragPos, mat4 lightSpaceMatrix) {\n    vec4 fragPosLightSpace = lightSpaceMatrix * vec4(fragPos, 1.0);\n    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\n    projCoords = projCoords * 0.5 + 0.5;\n    if (isOutOfRange(projCoords.xy)) {\n        return 1.0;\n    }\n    float currentDepth = projCoords.z;\n    float shadow = 0.0;\n    vec2 texelSize = 1.0 / shadowMapSize;\n    for (int x = -1; x <= 1; ++x) {\n        for (int y = -1; y <= 1; ++y) {\n            vec2 pos = projCoords.xy + vec2(x, y) * texelSize;\n            if (isOutOfRange(pos)) {\n                shadow += 1.0;\n            } else {\n                float pcfDepth = texture2D(shadowMap, pos).r;\n                shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;\n            }\n        }\n    }\n    return 1.0 - shadow / 9.0;\n}\n\nfloat getShadow(samplerCube shadowMap, float bias, vec3 lightPos, vec3 position, vec2 camera, mat4 lightSpaceMatrix) {\n    vec4 distanceVec = lightSpaceMatrix * vec4(position, 1.0) - lightSpaceMatrix * vec4(lightPos, 1.0);\n    float currentDistance = length(distanceVec);\n    vec3 direction = normalize(distanceVec).xyz;\n\n    float shadow = 0.0;\n    const float samples = 2.0;\n    const float offset = 0.01;\n    const float step = offset / (samples * 0.5);\n    for(float x = -offset; x < offset; x +=step)\n    {\n        for(float y = -offset; y < offset; y +=step)\n        {\n            for(float z = -offset; z < offset; z +=step)\n            {\n                float closestDistance = camera[0] + (camera[1] - camera[0]) * unpackFloat(textureCube(shadowMap, direction + vec3(x, y, z)));\n                if (closestDistance == camera[0]) {\n                    continue;\n                }\n                else if(currentDistance - bias > closestDistance)\n                    shadow += 1.0;\n            }\n        }\n    }\n    shadow /= (samples * samples * samples);\n\n    return 1.0 - shadow;\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/getSpecular.glsl":
/*!***************************************************!*\
  !*** ./src/engine/shader/method/getSpecular.glsl ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat getSpecular(vec3 cameraPos, vec3 fragPos, vec3 lightDir, vec3 normal, float shininess){\n    vec3 viewDir = normalize(cameraPos - fragPos);\n    #ifdef LIGHT_TYPE_PHONG\n        return pow(max(dot(viewDir, reflect(-lightDir, normal), 0.0), shininess);\n    #else\n        return pow(max(dot(normal, normalize(lightDir + viewDir)), 0.0), shininess);\n    #endif\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/method/packFloat.glsl":
/*!*************************************************!*\
  !*** ./src/engine/shader/method/packFloat.glsl ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\n// https://github.com/playcanvas/engine/blob/master/src/graphics/program-lib/chunks/packDepth.frag\n// Packing a float in GLSL with multiplication and mod\n// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement\nvec4 packFloat(float depth) {\n    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);\n    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);\n\n    // combination of mod and multiplication and division works better\n    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);\n    res -= res.xxyz * bit_mask;\n    return res;\n}\n\n\n\n"

/***/ }),

/***/ "./src/engine/shader/method/textureEnvMap.glsl":
/*!*****************************************************!*\
  !*** ./src/engine/shader/method/textureEnvMap.glsl ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nvec4 textureEnvMap(sampler2D texture, vec3 position){\n    return texture2D(texture, vec2(atan(position.x, position.z) * HILO_INVERSE_PI * 0.5+0.5,  acos(position.y) * HILO_INVERSE_PI));\n}\n\nvec4 textureEnvMap(samplerCube texture, vec3 position){\n    return textureCube(texture, position);\n}\n\n#ifdef HILO_USE_SHADER_TEXTURE_LOD\n    vec4 textureEnvMapLod(sampler2D texture, vec3 position, float lod){\n        return texture2DLodEXT(texture, vec2(atan(position.x, position.z) * HILO_INVERSE_PI * 0.5+0.5,  acos(position.y) * HILO_INVERSE_PI), lod);\n    }\n\n    vec4 textureEnvMapLod(samplerCube texture, vec3 position, float lod){\n        return textureCubeLodEXT(texture, position, lod);\n    }\n#endif\n\n"

/***/ }),

/***/ "./src/engine/shader/method/transpose.glsl":
/*!*************************************************!*\
  !*** ./src/engine/shader/method/transpose.glsl ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat transpose(float m) {\n  return m;\n}\n\nmat2 transpose(mat2 m) {\n  return mat2(m[0][0], m[1][0],\n              m[0][1], m[1][1]);\n}\n\nmat3 transpose(mat3 m) {\n  return mat3(m[0][0], m[1][0], m[2][0],\n              m[0][1], m[1][1], m[2][1],\n              m[0][2], m[1][2], m[2][2]);\n}\n\nmat4 transpose(mat4 m) {\n  return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n              m[0][1], m[1][1], m[2][1], m[3][1],\n              m[0][2], m[1][2], m[2][2], m[3][2],\n              m[0][3], m[1][3], m[2][3], m[3][3]);\n}"

/***/ }),

/***/ "./src/engine/shader/method/unpackFloat.glsl":
/*!***************************************************!*\
  !*** ./src/engine/shader/method/unpackFloat.glsl ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#define GLSLIFY 1\nfloat unpackFloat(vec4 rgbaDepth) {\n    const vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n    float depth = dot(rgbaDepth, bitShift);\n    return depth;\n}\n\n"

/***/ }),

/***/ "./src/engine/shader/pbr.frag":
/*!************************************!*\
  !*** ./src/engine/shader/pbr.frag ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag") + "\n\n" + __webpack_require__(/*! ./chunk/color.frag */ "./src/engine/shader/chunk/color.frag") + "\n" + __webpack_require__(/*! ./chunk/uv.frag */ "./src/engine/shader/chunk/uv.frag") + "\n" + __webpack_require__(/*! ./chunk/normal.frag */ "./src/engine/shader/chunk/normal.frag") + "\n" + __webpack_require__(/*! ./chunk/lightFog.frag */ "./src/engine/shader/chunk/lightFog.frag") + "\n" + __webpack_require__(/*! ./chunk/pbr.frag */ "./src/engine/shader/chunk/pbr.frag") + "\n" + __webpack_require__(/*! ./chunk/light.frag */ "./src/engine/shader/chunk/light.frag") + "\n" + __webpack_require__(/*! ./chunk/transparency.frag */ "./src/engine/shader/chunk/transparency.frag") + "\n" + __webpack_require__(/*! ./chunk/fog.frag */ "./src/engine/shader/chunk/fog.frag") + "\n" + __webpack_require__(/*! ./chunk/logDepth.frag */ "./src/engine/shader/chunk/logDepth.frag") + "\n\nvoid main(void) {\n    vec4 color = vec4(0., 0., 0., 1.);\n\n    " + __webpack_require__(/*! ./chunk/normal_main.frag */ "./src/engine/shader/chunk/normal_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/lightFog_main.frag */ "./src/engine/shader/chunk/lightFog_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/pbr_main.frag */ "./src/engine/shader/chunk/pbr_main.frag") + "\n    " + __webpack_require__(/*! ./chunk/frag_color.frag */ "./src/engine/shader/chunk/frag_color.frag") + "\n    " + __webpack_require__(/*! ./chunk/logDepth_main.frag */ "./src/engine/shader/chunk/logDepth_main.frag") + "\n}"

/***/ }),

/***/ "./src/engine/shader/screen.frag":
/*!***************************************!*\
  !*** ./src/engine/shader/screen.frag ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag") + "\n\nvarying vec2 v_texcoord0;\nuniform sampler2D u_diffuse;\n\nvoid main(void) {  \n    gl_FragColor = texture2D(u_diffuse, v_texcoord0);\n}"

/***/ }),

/***/ "./src/engine/shader/screen.vert":
/*!***************************************!*\
  !*** ./src/engine/shader/screen.vert ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = "#define GLSLIFY 1\n" + __webpack_require__(/*! ./chunk/extensions.vert */ "./src/engine/shader/chunk/extensions.vert") + "\n" + __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl") + "\n" + __webpack_require__(/*! ./chunk/precision.vert */ "./src/engine/shader/chunk/precision.vert") + "\n\nattribute vec2 a_position;\nattribute vec2 a_texcoord0;\nvarying vec2 v_texcoord0;\n\n\nvoid main(void) {\n    vec4 pos = vec4(a_position, 0.0, 1.0);\n    gl_Position = pos;\n    v_texcoord0 = a_texcoord0;\n}"

/***/ }),

/***/ "./src/engine/shader/shader.ts":
/*!*************************************!*\
  !*** ./src/engine/shader/shader.ts ***!
  \*************************************/
/*! exports provided: Shader, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Shader", function() { return Shader; });
/* harmony import */ var _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../renderer/capabilities */ "./src/engine/renderer/capabilities.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../material/BasicMaterial */ "./src/engine/material/BasicMaterial.ts");




var basicFragCode = __webpack_require__(/*! ./basic.frag */ "./src/engine/shader/basic.frag");
var basicVertCode = __webpack_require__(/*! ./basic.vert */ "./src/engine/shader/basic.vert");
var geometryFragCode = __webpack_require__(/*! ./geometry.frag */ "./src/engine/shader/geometry.frag");
var pbrFragCode = __webpack_require__(/*! ./pbr.frag */ "./src/engine/shader/pbr.frag");
const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
const headerCache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
const CUSTUM_OPTION_PREFIX = 'HILO_CUSTUM_OPTION_';
/**
 * Shader类
 * @class
 */
class Shader {
    /**
     * @constructs
     * @param  {Object} params 初始化参数，所有params都会复制到实例上
     */
    constructor(params) {
        /**
         * vs 顶点代码
         * @default ''·
         * @type {String}
         */
        this.vs = '';
        /**
         * vs 片段代码
         * @default ''
         * @type {String}
         */
        this.fs = '';
        /**
         * 是否始终使用
         * @default true
         * @type {Boolean}
         */
        this.alwaysUse = false;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_2__["default"].generateUUID(this.constructor.name);
        Object.assign(this, params);
    }
    /**
     * 初始化
     * @param  {WebGLRenderer} renderer
     */
    static init(renderer) {
        this.renderer = renderer;
        this.commonHeader = this._getCommonHeader(this.renderer);
    }
    /**
     * Shader 缓存
     * @readOnly
     * @type {Cache}
     */
    static get cache() {
        return cache;
    }
    /**
     * Shader header缓存，一般不用管
     * @readOnly
     * @type {Cache}
     */
    static get headerCache() {
        return headerCache;
    }
    /**
     * 重置
     */
    static reset(gl) {
        cache.removeAll();
    }
    /**
     * 获取header缓存的key
     * @param {Mesh} mesh mesh
     * @param {Material} material 材质
     * @param {LightManager} lightManager lightManager
     * @param {Fog} fog fog
     * @param {Boolean} useLogDepth 是否使用对数深度
     * @return {string}
     */
    static getHeaderKey(mesh, material, lightManager) {
        let headerKey = 'header_' + material.id + '_' + lightManager.lightInfo.uid;
        headerKey += '_' + mesh.geometry.getShaderKey();
        return headerKey;
    }
    /**
     * 获取header
     * @param {Mesh} mesh
     * @param {Material} material
     * @param {LightManager} lightManager
     * @param {Fog} fog
     * @return {String}
     */
    static getHeader(mesh, material, lightManager) {
        const headerKey = this.getHeaderKey(mesh, material, lightManager);
        let header = headerCache.get(headerKey);
        if (!header || material.isDirty) {
            const headers = {};
            const lightType = material.lightType;
            if (lightType && lightType !== 'NONE') {
                lightManager.getRenderOption(headers);
            }
            material.getRenderOption(headers);
            mesh.getRenderOption(headers);
            if (headers['HAS_NORMAL'] && headers['NORMAL_MAP']) {
                headers['HAS_TANGENT'] = 1;
            }
            if (!headers['RECEIVE_SHADOWS']) {
                delete headers['DIRECTIONAL_LIGHTS_SMC'];
                delete headers['SPOT_LIGHTS_SMC'];
                delete headers['POINT_LIGHTS_SMC'];
            }
            header = `#define SHADER_NAME ${material.constructor.name}\n`;
            header += Object.keys(headers).map((name) => {
                if (name.indexOf(CUSTUM_OPTION_PREFIX) > -1) {
                    return `#define ${name.replace(CUSTUM_OPTION_PREFIX, '')} ${headers[name]}`;
                }
                return `#define HILO_${name} ${headers[name]}`;
            }).join('\n') + '\n';
            headerCache.add(headerKey, header);
        }
        return header;
    }
    static _getCommonHeader(renderer) {
        const vertexPrecision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(_renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].MAX_VERTEX_PRECISION, renderer.vertexPrecision);
        const fragmentPrecision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(_renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].MAX_FRAGMENT_PRECISION, renderer.fragmentPrecision);
        const precision = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_0__["default"].getMaxPrecision(vertexPrecision, fragmentPrecision);
        return `
#define HILO_MAX_PRECISION ${precision}
#define HILO_MAX_VERTEX_PRECISION ${vertexPrecision}
#define HILO_MAX_FRAGMENT_PRECISION ${fragmentPrecision}
`;
    }
    /**
     * 获取 shader
     * @param {Mesh} mesh
     * @param {Material} material
     * @param {Boolean} isUseInstance
     * @param {LightManager} lightManager
     * @param {Fog} fog
     * @param {Boolean} useLogDepth
     * @return {Shader}
     */
    static getShader(mesh, material, lightManager) {
        const header = this.getHeader(mesh, material, lightManager);
        if (material instanceof _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__["BasicMaterial"]) {
            return this.getBasicShader(material, header);
        }
        return null;
    }
    /**
     * 获取基础 shader
     * @param  {Material}  material
     * @param  {Boolean} isUseInstance
     * @param  {LightManager}  lightManager
     * @param  {Fog}  fog
     * @return {Shader}
     */
    static getBasicShader(material, header) {
        let key = material.constructor.name + ':';
        let shader = cache.get(key);
        if (!shader) {
            let fs = '';
            let vs = basicVertCode;
            if (material instanceof _material_BasicMaterial__WEBPACK_IMPORTED_MODULE_3__["BasicMaterial"]) {
                fs += basicFragCode;
            }
            shader = this.getCustomShader(vs, fs, header, key, true);
        }
        if (shader) {
            const shaderNumId = this._getNumId(shader);
            if (shaderNumId !== null) {
                material._shaderNumId = shaderNumId;
            }
        }
        return shader;
    }
    static _getNumId(obj) {
        const id = obj.id;
        const res = id.match(/_(\d+)/);
        if (res && res[1]) {
            return parseInt(res[1], 10);
        }
        return null;
    }
    /**
     * 获取自定义shader
     * @param  {String} vs 顶点代码
     * @param  {String} fs 片段代码
     * @param  {String} [cacheKey] 如果有，会以此值缓存 shader
     * @param  {String} [useHeaderCache=false] 如果cacheKey和useHeaderCache同时存在，使用 cacheKey+useHeaderCache缓存 shader
     * @return {Shader}
     */
    static getCustomShader(vs, fs, header, cacheKey, useHeaderCache) {
        const commonHeader = this.commonHeader;
        let shader;
        if (cacheKey) {
            if (useHeaderCache) {
                cacheKey += ':' + header;
            }
            shader = cache.get(cacheKey);
        }
        if (!shader) {
            shader = new Shader({
                vs: commonHeader + header + vs,
                fs: commonHeader + header + fs
            });
            if (cacheKey) {
                cache.add(cacheKey, shader);
            }
        }
        return shader;
    }
    /**
     * 没有被引用时销毁资源
     * @param  {WebGLRenderer} renderer
     * @return {Shader} this
     */
    destroyIfNoRef(renderer) {
        const resourceManager = renderer.resourceManager;
        resourceManager.destroyIfNoRef(this);
        return this;
    }
    /**
     * 销毁资源
     * @return {Shader} this
     */
    destroy() {
        if (this._isDestroyed) {
            return this;
        }
        cache.removeObject(this);
        this._isDestroyed = true;
        return this;
    }
}
/**
 * 内部的所有shader块字符串，可以用来拼接glsl代码
 * @type {Object}
 */
Shader.shaders = {
    'chunk/baseDefine.glsl': __webpack_require__(/*! ./chunk/baseDefine.glsl */ "./src/engine/shader/chunk/baseDefine.glsl"),
    'chunk/color.frag': __webpack_require__(/*! ./chunk/color.frag */ "./src/engine/shader/chunk/color.frag"),
    'chunk/color.vert': __webpack_require__(/*! ./chunk/color.vert */ "./src/engine/shader/chunk/color.vert"),
    'chunk/color_main.vert': __webpack_require__(/*! ./chunk/color_main.vert */ "./src/engine/shader/chunk/color_main.vert"),
    'chunk/diffuse.frag': __webpack_require__(/*! ./chunk/diffuse.frag */ "./src/engine/shader/chunk/diffuse.frag"),
    'chunk/diffuse_main.frag': __webpack_require__(/*! ./chunk/diffuse_main.frag */ "./src/engine/shader/chunk/diffuse_main.frag"),
    'chunk/extensions.frag': __webpack_require__(/*! ./chunk/extensions.frag */ "./src/engine/shader/chunk/extensions.frag"),
    'chunk/extensions.vert': __webpack_require__(/*! ./chunk/extensions.vert */ "./src/engine/shader/chunk/extensions.vert"),
    'chunk/fog.frag': __webpack_require__(/*! ./chunk/fog.frag */ "./src/engine/shader/chunk/fog.frag"),
    'chunk/fog_main.frag': __webpack_require__(/*! ./chunk/fog_main.frag */ "./src/engine/shader/chunk/fog_main.frag"),
    'chunk/frag_color.frag': __webpack_require__(/*! ./chunk/frag_color.frag */ "./src/engine/shader/chunk/frag_color.frag"),
    'chunk/joint.vert': __webpack_require__(/*! ./chunk/joint.vert */ "./src/engine/shader/chunk/joint.vert"),
    'chunk/joint_main.vert': __webpack_require__(/*! ./chunk/joint_main.vert */ "./src/engine/shader/chunk/joint_main.vert"),
    'chunk/light.frag': __webpack_require__(/*! ./chunk/light.frag */ "./src/engine/shader/chunk/light.frag"),
    'chunk/lightFog.frag': __webpack_require__(/*! ./chunk/lightFog.frag */ "./src/engine/shader/chunk/lightFog.frag"),
    'chunk/lightFog.vert': __webpack_require__(/*! ./chunk/lightFog.vert */ "./src/engine/shader/chunk/lightFog.vert"),
    'chunk/lightFog_main.frag': __webpack_require__(/*! ./chunk/lightFog_main.frag */ "./src/engine/shader/chunk/lightFog_main.frag"),
    'chunk/lightFog_main.vert': __webpack_require__(/*! ./chunk/lightFog_main.vert */ "./src/engine/shader/chunk/lightFog_main.vert"),
    'chunk/logDepth.frag': __webpack_require__(/*! ./chunk/logDepth.frag */ "./src/engine/shader/chunk/logDepth.frag"),
    'chunk/logDepth_main.frag': __webpack_require__(/*! ./chunk/logDepth_main.frag */ "./src/engine/shader/chunk/logDepth_main.frag"),
    'chunk/logDepth.vert': __webpack_require__(/*! ./chunk/logDepth.vert */ "./src/engine/shader/chunk/logDepth.vert"),
    'chunk/logDepth_main.vert': __webpack_require__(/*! ./chunk/logDepth_main.vert */ "./src/engine/shader/chunk/logDepth_main.vert"),
    'chunk/morph.vert': __webpack_require__(/*! ./chunk/morph.vert */ "./src/engine/shader/chunk/morph.vert"),
    'chunk/morph_main.vert': __webpack_require__(/*! ./chunk/morph_main.vert */ "./src/engine/shader/chunk/morph_main.vert"),
    'chunk/normal.frag': __webpack_require__(/*! ./chunk/normal.frag */ "./src/engine/shader/chunk/normal.frag"),
    'chunk/normal.vert': __webpack_require__(/*! ./chunk/normal.vert */ "./src/engine/shader/chunk/normal.vert"),
    'chunk/normal_main.frag': __webpack_require__(/*! ./chunk/normal_main.frag */ "./src/engine/shader/chunk/normal_main.frag"),
    'chunk/normal_main.vert': __webpack_require__(/*! ./chunk/normal_main.vert */ "./src/engine/shader/chunk/normal_main.vert"),
    'chunk/pbr.frag': __webpack_require__(/*! ./chunk/pbr.frag */ "./src/engine/shader/chunk/pbr.frag"),
    'chunk/pbr_main.frag': __webpack_require__(/*! ./chunk/pbr_main.frag */ "./src/engine/shader/chunk/pbr_main.frag"),
    'chunk/phong.frag': __webpack_require__(/*! ./chunk/phong.frag */ "./src/engine/shader/chunk/phong.frag"),
    'chunk/phong_main.frag': __webpack_require__(/*! ./chunk/phong_main.frag */ "./src/engine/shader/chunk/phong_main.frag"),
    'chunk/precision.frag': __webpack_require__(/*! ./chunk/precision.frag */ "./src/engine/shader/chunk/precision.frag"),
    'chunk/precision.vert': __webpack_require__(/*! ./chunk/precision.vert */ "./src/engine/shader/chunk/precision.vert"),
    'chunk/transparency.frag': __webpack_require__(/*! ./chunk/transparency.frag */ "./src/engine/shader/chunk/transparency.frag"),
    'chunk/transparency_main.frag': __webpack_require__(/*! ./chunk/transparency_main.frag */ "./src/engine/shader/chunk/transparency_main.frag"),
    'chunk/unQuantize.vert': __webpack_require__(/*! ./chunk/unQuantize.vert */ "./src/engine/shader/chunk/unQuantize.vert"),
    'chunk/unQuantize_main.vert': __webpack_require__(/*! ./chunk/unQuantize_main.vert */ "./src/engine/shader/chunk/unQuantize_main.vert"),
    'chunk/uv.frag': __webpack_require__(/*! ./chunk/uv.frag */ "./src/engine/shader/chunk/uv.frag"),
    'chunk/uv.vert': __webpack_require__(/*! ./chunk/uv.vert */ "./src/engine/shader/chunk/uv.vert"),
    'chunk/uv_main.vert': __webpack_require__(/*! ./chunk/uv_main.vert */ "./src/engine/shader/chunk/uv_main.vert"),
    'method/encoding.glsl': __webpack_require__(/*! ./method/encoding.glsl */ "./src/engine/shader/method/encoding.glsl"),
    'method/getDiffuse.glsl': __webpack_require__(/*! ./method/getDiffuse.glsl */ "./src/engine/shader/method/getDiffuse.glsl"),
    'method/getLightAttenuation.glsl': __webpack_require__(/*! ./method/getLightAttenuation.glsl */ "./src/engine/shader/method/getLightAttenuation.glsl"),
    'method/getShadow.glsl': __webpack_require__(/*! ./method/getShadow.glsl */ "./src/engine/shader/method/getShadow.glsl"),
    'method/getSpecular.glsl': __webpack_require__(/*! ./method/getSpecular.glsl */ "./src/engine/shader/method/getSpecular.glsl"),
    'method/packFloat.glsl': __webpack_require__(/*! ./method/packFloat.glsl */ "./src/engine/shader/method/packFloat.glsl"),
    'method/textureEnvMap.glsl': __webpack_require__(/*! ./method/textureEnvMap.glsl */ "./src/engine/shader/method/textureEnvMap.glsl"),
    'method/transpose.glsl': __webpack_require__(/*! ./method/transpose.glsl */ "./src/engine/shader/method/transpose.glsl"),
    'method/unpackFloat.glsl': __webpack_require__(/*! ./method/unpackFloat.glsl */ "./src/engine/shader/method/unpackFloat.glsl"),
    'basic.frag': __webpack_require__(/*! ./basic.frag */ "./src/engine/shader/basic.frag"),
    'basic.vert': __webpack_require__(/*! ./basic.vert */ "./src/engine/shader/basic.vert"),
    'geometry.frag': __webpack_require__(/*! ./geometry.frag */ "./src/engine/shader/geometry.frag"),
    'pbr.frag': __webpack_require__(/*! ./pbr.frag */ "./src/engine/shader/pbr.frag"),
    'screen.frag': __webpack_require__(/*! ./screen.frag */ "./src/engine/shader/screen.frag"),
    'screen.vert': __webpack_require__(/*! ./screen.vert */ "./src/engine/shader/screen.vert")
};
/* harmony default export */ __webpack_exports__["default"] = (Shader);


/***/ }),

/***/ "./src/engine/texture/Texture.ts":
/*!***************************************!*\
  !*** ./src/engine/texture/Texture.ts ***!
  \***************************************/
/*! exports provided: Texture, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Texture", function() { return Texture; });
/* harmony import */ var _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/glConstants */ "./src/engine/constants/glConstants.ts");
/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ "./src/engine/utils/Pool.ts");
/* harmony import */ var _utils_Log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Log */ "./src/engine/utils/Log.ts");
/* harmony import */ var _math_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../math/math */ "./src/engine/math/math.ts");
/* harmony import */ var _renderer_capabilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renderer/capabilities */ "./src/engine/renderer/capabilities.ts");
/* harmony import */ var _renderer_extensions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renderer/extensions */ "./src/engine/renderer/extensions.ts");






const { TEXTURE_2D, RGBA, LINEAR, NEAREST, REPEAT, CLAMP_TO_EDGE, UNSIGNED_BYTE } = _constants_glConstants__WEBPACK_IMPORTED_MODULE_0__["glConstants"];
const cache = new _utils_Pool__WEBPACK_IMPORTED_MODULE_1__["Pool"]();
class Texture {
    /**
     * @constructs
     * @param {object} params 初始化参数，所有params都会复制到实例上
     */
    constructor(params) {
        /**
         * 图片资源是否可以释放，可以的话，上传到GPU后将释放图片引用
         * @type {boolean}
         * @default false
         */
        this.isImageCanRelease = false;
        this._isImageReleased = false;
        this._image = null;
        /**
         * mipmaps
         * @type {Image[]|TypedArray[]}
         * @default null
         */
        this.mipmaps = null;
        /**
         * Texture Target
         * @default gl.TEXTURE_2D
         * @type {GLenum}
         */
        this.target = TEXTURE_2D;
        /**
         * Texture Internal Format
         * @default gl.RGBA
         * @type {GLenum}
         */
        this.internalFormat = RGBA;
        /**
         * 图片 Format
         * @default gl.RGBA
         * @type {GLenum}
         */
        this.format = RGBA;
        /**
         * 类型
         * @default gl.UNSIGNED_BYTE
         * @type {GLenum}
         */
        this.type = UNSIGNED_BYTE;
        /**
         * @default 0
         * @type {number}
         */
        this.width = 0;
        /**
         * @default 0
         * @type {number}
         */
        this.height = 0;
        /**
         * @default 0
         * @readOnly
         * @type {Number}
         */
        this.border = 0;
        /**
         * magFilter
         * @default gl.LINEAR
         * @type {GLenum}
         */
        this.magFilter = LINEAR;
        /**
         * minFilter
         * @default gl.LINEAR
         * @type {GLenum}
         */
        this.minFilter = LINEAR;
        /**
         * wrapS
         * @default gl.REPEAT
         * @type {GLenum}
         */
        this.wrapS = REPEAT;
        /**
         * wrapT
         * @default gl.REPEAT
         * @type {GLenum}
         */
        this.wrapT = REPEAT;
        /**
         * @type {string}
         */
        this.name = '';
        /**
         * @default false
         * @type {boolean}
         */
        this.premultiplyAlpha = false;
        /**
         * 是否翻转Texture的Y轴
         * @default false
         * @type {boolean}
         */
        this.flipY = false;
        /**
         * 是否压缩
         * @default false
         * @type {Boolean}
         */
        this.compressed = false;
        /**
         * 是否需要更新Texture
         * @default true
         * @type {boolean}
         */
        this.needUpdate = true;
        /**
         * 是否需要销毁之前的Texture，Texture参数变更之后需要销毁
         * @default false
         * @type {boolean}
         */
        this.needDestroy = false;
        /**
         * 是否每次都更新Texture
         * @default false
         * @type {boolean}
         */
        this.autoUpdate = false;
        /**
         * uv
         * @default 0
         * @type {number}
         */
        this.uv = 0;
        /**
         * anisotropic
         * @default 1
         * @type {Number}
         */
        this.anisotropic = 1;
        this._needUpdateSubTexture = false;
        this._subTextureList = null;
        this.id = _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].generateUUID(this.constructor.name);
        Object.assign(this, params);
    }
    /**
     * 缓存
     * @readOnly
     * @type {Object}
     */
    static get cache() {
        return cache;
    }
    /**
     * 重置
     * @param  {WebGLRenderingContext} gl
     */
    static reset(gl) {
        cache.each((glTexture, id) => {
            gl.deleteTexture(glTexture);
            cache.remove(id);
        });
    }
    /**
     * 图片对象
     * @type {Image}
     * @default null
     */
    get image() {
        if (this._isImageReleased) {
            _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].errorOnce(`Read Texture.image(${this.id})`, 'Read Texture.image after image released!');
        }
        return this._image;
    }
    set image(_img) {
        this._image = _img;
        this._isImageReleased = false;
    }
    _releaseImage() {
        this._canvasImage = null;
        this._canvasCtx = null;
        this._originImage = null;
        this._image = null;
        this.mipmaps = null;
        this._isImageReleased = true;
    }
    /**
     * 获取原始图像宽度。
     * @default 0
     * @type {Number}
     */
    get origWidth() {
        if (this._originImage) {
            return this._originImage.width || this.width;
        }
        if (this.image) {
            return this.image.width || this.width;
        }
        return this.width;
    }
    /**
     * 获取原始图像高度。
     * @default 0
     * @type {Number}
     */
    get origHeight() {
        if (this._originImage) {
            return this._originImage.height || this.height;
        }
        if (this.image) {
            return this.image.height || this.height;
        }
        return this.height;
    }
    /**
     * 是否使用 mipmap
     * @readOnly
     * @type {Boolean}
     */
    get useMipmap() {
        return this.minFilter !== LINEAR && this.minFilter !== NEAREST;
    }
    set useMipmap(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warn('texture.useMipmap is readOnly!');
    }
    /**
     * 是否使用 repeat
     * @readOnly
     * @type {Boolean}
     */
    get useRepeat() {
        return this.wrapS !== CLAMP_TO_EDGE || this.wrapT !== CLAMP_TO_EDGE;
    }
    set useRepeat(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warn('texture.useRepeat is readOnly!');
    }
    /**
     * mipmapCount
     * @readOnly
     * @type {Number}
     */
    get mipmapCount() {
        return Math.floor(Math.log2(Math.max(this.width, this.height)) + 1);
    }
    set mipmapCount(value) {
        _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warn('texture.mipmapCount is readOnly!');
    }
    /**
     * 是否是 2 的 n 次方
     * @param  {Image}  img
     * @return {Boolean}
     */
    isImgPowerOfTwo(img) {
        return _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].isPowerOfTwo(img.width) && _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].isPowerOfTwo(img.height);
    }
    /**
     * 获取支持的尺寸
     * @param  {Image} img
     * @param  {Boolean} [needPowerOfTwo=false]
     * @return {Object} { width, height }
     */
    getSupportSize(img, needPowerOfTwo = false) {
        let width = img.width;
        let height = img.height;
        if (needPowerOfTwo && !this.isImgPowerOfTwo(img)) {
            width = _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].nextPowerOfTwo(width);
            height = _math_math__WEBPACK_IMPORTED_MODULE_3__["default"].nextPowerOfTwo(height);
        }
        const maxTextureSize = _renderer_capabilities__WEBPACK_IMPORTED_MODULE_4__["default"]['MAX_TEXTURE_SIZE'];
        if (maxTextureSize) {
            if (width > maxTextureSize) {
                width = maxTextureSize;
            }
            if (height > maxTextureSize) {
                height = maxTextureSize;
            }
        }
        return {
            width,
            height
        };
    }
    /**
     * 更新图片大小成为 2 的 n 次方
     * @param  {Image} img
     * @return {Canvas|Image}
     */
    resizeImgToPowerOfTwo(img) {
        const sizeResult = this.getSupportSize(img, true);
        return this.resizeImg(img, sizeResult.width, sizeResult.height);
    }
    /**
     * 更新图片大小
     * @param  {Image} img
     * @param {Number} width
     * @param {Number} height
     * @return {Canvas|Image}
     */
    resizeImg(img, width, height) {
        if (img.width === width && img.height === height) {
            return img;
        }
        let canvas = this._canvasImage;
        if (!canvas) {
            canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            this._canvasImage = canvas;
            this._canvasCtx = canvas.getContext('2d');
        }
        else {
            canvas.width = width;
            canvas.height = height;
            this._canvasCtx = canvas.getContext('2d');
        }
        this._canvasCtx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);
        _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warnOnce(`Texture.resizeImg(${this.id})`, `image size(${img.width}x${img.height}) is not support. Resized to ${canvas.width}x${canvas.height}`, img.src);
        this._originImage = img;
        return canvas;
    }
    /**
     * GL上传贴图
     * @private
     * @param  {WebGLState} state
     * @param  {GLEnum} target
     * @param  {Image|TypedArray} image
     * @param  {image} [level=0]
     * @param  {Number} [width=this.width]
     * @param  {Number} [height=this.height]
     * @return {Texture}  this
     */
    _glUploadTexture(state, target, image, level = 0, width = this.width, height = this.height) {
        const gl = state.gl;
        if (this.compressed) {
            gl.compressedTexImage2D(target, level, this.internalFormat, width, height, this.border, image);
        }
        else if (image && image.width !== undefined) {
            gl.texImage2D(target, level, this.internalFormat, this.format, this.type, image);
        }
        else {
            gl.texImage2D(target, level, this.internalFormat, width, height, this.border, this.format, this.type, image);
        }
        return this;
    }
    /**
     * 上传贴图，子类可重写
     * @private
     * @param  {WebGLState} state
     * @return {Texture} this
     */
    _uploadTexture(state) {
        if (this.useMipmap && this.mipmaps) {
            this.mipmaps.forEach((mipmap, index) => {
                this._glUploadTexture(state, this.target, mipmap.data, index, mipmap.width, mipmap.height);
            });
        }
        else {
            this._glUploadTexture(state, this.target, this.image, 0);
        }
        return this;
    }
    /**
     * 更新 Texture
     * @param  {WebGLState} state
     * @param  {WebGLTexture} glTexture
     * @return {Texture} this
     */
    updateTexture(state, glTexture) {
        const gl = state.gl;
        if (this.needUpdate || this.autoUpdate) {
            if (this._originImage && this.image === this._canvasImage) {
                this.image = this._originImage;
            }
            const useMipmap = this.useMipmap;
            const useRepeat = this.useRepeat;
            if (this.image && !this.image.length) {
                const needPowerOfTwo = useRepeat || useMipmap;
                const sizeResult = this.getSupportSize(this.image, needPowerOfTwo);
                this.image = this.resizeImg(this.image, sizeResult.width, sizeResult.height);
                this.width = this.image.width;
                this.height = this.image.height;
            }
            state.activeTexture(gl.TEXTURE0 + _renderer_capabilities__WEBPACK_IMPORTED_MODULE_4__["default"].MAX_TEXTURE_INDEX);
            state.bindTexture(this.target, glTexture);
            state.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
            state.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!this.flipY);
            const textureFilterAnisotropic = _renderer_extensions__WEBPACK_IMPORTED_MODULE_5__["default"].textureFilterAnisotropic;
            if (textureFilterAnisotropic && this.anisotropic > 1) {
                gl.texParameterf(this.target, textureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(this.anisotropic, _renderer_capabilities__WEBPACK_IMPORTED_MODULE_4__["default"].MAX_TEXTURE_MAX_ANISOTROPY));
            }
            this._uploadTexture(state);
            if (useMipmap) {
                if (!this.compressed) {
                    gl.generateMipmap(this.target);
                }
                else if (!this.mipmaps) {
                    _utils_Log__WEBPACK_IMPORTED_MODULE_2__["log"].warn(`Compressed texture has no mipmips, changed the minFilter from ${this.minFilter} to Linear!`, this);
                    this.minFilter = LINEAR;
                }
            }
            gl.texParameterf(this.target, gl.TEXTURE_MAG_FILTER, this.magFilter);
            gl.texParameterf(this.target, gl.TEXTURE_MIN_FILTER, this.minFilter);
            gl.texParameterf(this.target, gl.TEXTURE_WRAP_S, this.wrapS);
            gl.texParameterf(this.target, gl.TEXTURE_WRAP_T, this.wrapT);
            this.needUpdate = false;
        }
        if (this._needUpdateSubTexture) {
            this._uploadSubTextures(state, glTexture);
            this._needUpdateSubTexture = false;
        }
        return this;
    }
    /**
     * 跟新所有的局部贴图
     * @private
     * @param  {WebGLState} state
     * @param  {WebGLTexture} glTexture
     */
    _uploadSubTextures(state, glTexture) {
        if (this._subTextureList && this._subTextureList.length > 0) {
            const gl = state.gl;
            state.activeTexture(gl.TEXTURE0 + _renderer_capabilities__WEBPACK_IMPORTED_MODULE_4__["default"].MAX_TEXTURE_INDEX);
            state.bindTexture(this.target, glTexture);
            state.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);
            state.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, !!this.flipY);
            this._subTextureList.forEach((subInfo) => {
                const xOffset = subInfo[0];
                const yOffset = subInfo[1];
                const image = subInfo[2];
                gl.texSubImage2D(this.target, 0, xOffset, yOffset, this.format, this.type, image);
            });
            this._subTextureList.length = 0;
        }
    }
    /**
     * 跟新局部贴图
     * @param  {Number} xOffset
     * @param  {Number} yOffset
     * @param  {Image|Canvas|ImageData} image
     */
    updateSubTexture(xOffset, yOffset, image) {
        if (!this._subTextureList) {
            this._subTextureList = [];
        }
        this._subTextureList.push([xOffset, yOffset, image]);
        this._needUpdateSubTexture = true;
    }
    /**
     * 获取 GLTexture
     * @param  {WebGLState} state
     * @return {WebGLTexture}
     */
    getGLTexture(state) {
        this.state = state;
        const gl = this.gl = state.gl;
        const id = this.id;
        if (this.needDestroy) {
            this.destroy();
            this.needDestroy = false;
        }
        let glTexture = cache.get(id);
        if (glTexture) {
            this.updateTexture(state, glTexture);
        }
        else {
            glTexture = gl.createTexture();
            cache.add(id, glTexture);
            this.needUpdate = true;
            this.updateTexture(state, glTexture);
        }
        if (this.isImageCanRelease) {
            this._releaseImage();
        }
        return glTexture;
    }
    /**
     * 设置 GLTexture
     * @param {WebGLTexture}  texture
     * @param {Boolean} [needDestroy=false] 是否销毁之前的 GLTexture
     * @return {Texture} this
     */
    setGLTexture(texture, needDestroy = false) {
        if (needDestroy) {
            this.destroy();
        }
        cache.add(this.id, texture);
        return this;
    }
    /**
     * 销毁当前Texture
     * @return {Texture} this
     */
    destroy() {
        const id = this.id;
        const glTexture = cache.get(id);
        if (glTexture && this.gl) {
            this.gl.deleteTexture(glTexture);
            cache.remove(id);
        }
        return this;
    }
    /**
     * clone
     * @return {Texture}
     */
    clone() {
        const option = Object.assign({}, this);
        delete option.id;
        const texture = new Texture(option);
        return texture;
    }
}
/* harmony default export */ __webpack_exports__["default"] = (Texture);


/***/ }),

/***/ "./src/engine/utils/Log.ts":
/*!*********************************!*\
  !*** ./src/engine/utils/Log.ts ***!
  \*********************************/
/*! exports provided: log */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* eslint prefer-spread: "off", prefer-rest-params:"off", no-console:"off" */
const cache = {};
const LEVEL_NONE = 0;
const LEVEL_ERROR = 1;
const LEVEL_WARN = 2;
const LEVEL_LOG = 3;
/**
 * log
 * @namespace
 */
class log {
    /**
     * log，等同 console.log
     * @return {Object} this
     */
    static log() {
        if (this.level >= LEVEL_LOG) {
            console.log.apply(console, arguments);
        }
        return this;
    }
    /**
     * log，等同 console.log
     * @return {Object} this
     */
    static warn(...args) {
        if (this.level >= LEVEL_WARN) {
            console.warn.apply(console, args);
        }
        return this;
    }
    /**
     * error，等同 console.log
     * @return {Object} this
     */
    static error(...args) {
        if (this.level >= LEVEL_ERROR) {
            console.error.apply(console, args);
        }
        return this;
    }
    /**
     * logOnce 相同 id 只 log 一次
     * @param {String} id
     * @return {Object} this
     */
    static logOnce(id, ...args) {
        if (!cache['log_' + id]) {
            cache['log_' + id] = true;
            this.log.apply(this, args);
        }
        return this;
    }
    /**
     * warnOnce  相同 id 只 once 一次
     * @param {String} id
     * @return {Object} this
     */
    static warnOnce(id, ...args) {
        if (!cache['warn_' + id]) {
            cache['warn_' + id] = true;
            this.warn.apply(this, args);
        }
        return this;
    }
    /**
     * errorOnce 相同 id 只 error 一次
     * @param {String} id
     * @return {Object} this
     */
    static errorOnce(id, ...args) {
        if (!cache['error_' + id]) {
            cache['error_' + id] = true;
            this.error.apply(this, args);
        }
        return this;
    }
}
log._cache = cache;
/**
 * log级别
 * @type {Enum}
 */
log.level = LEVEL_LOG;


/***/ }),

/***/ "./src/engine/utils/Pool.ts":
/*!**********************************!*\
  !*** ./src/engine/utils/Pool.ts ***!
  \**********************************/
/*! exports provided: Pool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pool", function() { return Pool; });
class Pool {
    /**
     * @constructs
     */
    constructor() {
        this._cache = {};
        this._cache = {};
    }
    /**
    * 获取对象
    * @param  {String} id
    * @return {Object}
    */
    get(id) {
        return this._cache[id];
    }
    /**
     * 获取对象
     * @param {Object} obj
     * @return {Object} [description]
     */
    getObject(obj) {
        return this._cache[obj.__cacheId];
    }
    /**
     * 增加对象
     * @param {String} id
     * @param {Object} obj
     */
    add(id, obj) {
        if (typeof obj === 'object') {
            obj.__cacheId = id;
        }
        this._cache[id] = obj;
    }
    /**
     * 移除对象
     * @param {String} id
     */
    remove(id) {
        delete this._cache[id];
    }
    /**
     * 移除对象
     * @param {Object} obj
     */
    removeObject(obj) {
        delete this._cache[obj.__cacheId];
    }
    /**
    * 移除所有对象
    */
    removeAll() {
        this._cache = {};
    }
    /**
    * 遍历所有缓存
    * @param  {Function} callback
    */
    each(callback) {
        const cache = this._cache;
        for (let id in cache) {
            callback(cache[id], id);
        }
    }
}


/***/ }),

/***/ "./src/engine/utils/Ticker.ts":
/*!************************************!*\
  !*** ./src/engine/utils/Ticker.ts ***!
  \************************************/
/*! exports provided: Ticker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ticker", function() { return Ticker; });
/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./browser */ "./src/engine/utils/browser.ts");
/**
 * Hilo 2.0.0 for commonjs
 * Copyright 2016 alibaba.com
 * Licensed under the MIT License
 */

/**
 * @language=en
 * @class Ticker is a Timer. It can run the code at specified framerate.
 * @param {Number} fps The fps of ticker.Default is 60.
 * @module hilo/util/Ticker
 * @requires hilo/core/Class
 * @requires hilo/util/browser
 */
class Ticker {
    constructor(fps) {
        this._paused = false;
        this._targetFPS = 0;
        this._interval = 0;
        this._intervalId = null;
        this._tickers = null;
        this._lastTime = 0;
        this._tickCount = 0;
        this._tickTime = 0;
        this._measuredFPS = 0;
        this._targetFPS = fps || 60;
        this._interval = 1000 / this._targetFPS;
        this._tickers = [];
    }
    /**
     * @language=en
     * Start the ticker.
     * @param {Boolean} userRAF Whether or not use requestAnimationFrame, default is true.
     */
    start(useRAF) {
        if (useRAF === undefined) {
            useRAF = true;
        }
        if (this._intervalId)
            return;
        this._lastTime = +new Date();
        var self = this, interval = this._interval, raf = window.requestAnimationFrame ||
            window[_browser__WEBPACK_IMPORTED_MODULE_0__["browser"]['jsVendor'] + 'RequestAnimationFrame'];
        var runLoop;
        if (useRAF && raf && interval < 17) {
            this._useRAF = true;
            runLoop = function () {
                self._intervalId = raf(runLoop);
                self._tick();
            };
        }
        else {
            runLoop = function () {
                self._intervalId = setTimeout(runLoop, interval);
                self._tick();
            };
        }
        this._paused = false;
        runLoop();
    }
    /**
     * @language=en
     * Stop the ticker.
     */
    stop() {
        if (this._useRAF) {
            var cancelRAF = window.cancelAnimationFrame ||
                window[_browser__WEBPACK_IMPORTED_MODULE_0__["browser"]['jsVendor'] + 'CancelAnimationFrame'];
            cancelRAF(this._intervalId);
        }
        else {
            clearTimeout(this._intervalId);
        }
        this._intervalId = null;
        this._lastTime = 0;
        this._paused = true;
    }
    /**
     * @language=en
     * Pause the ticker.
     */
    pause() {
        this._paused = true;
    }
    /**
     * @language=en
     * Resume the ticker.
     */
    resume() {
        this._paused = false;
    }
    /**
     * @private
     */
    _tick() {
        if (this._paused)
            return;
        var startTime = +new Date(), deltaTime = startTime - this._lastTime, tickers = this._tickers;
        //calculates the real fps
        if (++this._tickCount >= this._targetFPS) {
            this._measuredFPS = 1000 / (this._tickTime / this._tickCount) + 0.5 >> 0;
            this._tickCount = 0;
            this._tickTime = 0;
        }
        else {
            this._tickTime += startTime - this._lastTime;
        }
        this._lastTime = startTime;
        var tickersCopy = tickers.slice(0);
        for (var i = 0, len = tickersCopy.length; i < len; i++) {
            tickersCopy[i].tick(deltaTime);
        }
    }
    /**
     * @language=en
     * Get the fps.
     */
    getMeasuredFPS() {
        return Math.min(this._measuredFPS, this._targetFPS);
    }
    /**
     * @language=en
     * Add tickObject. The tickObject must implement the tick method.
     * @param {Object} tickObject The tickObject to add.It must implement the tick method.
     */
    addTick(tickObject) {
        if (!tickObject || typeof (tickObject.tick) != 'function') {
            throw new Error('Ticker: The tick object must implement the tick method.');
        }
        this._tickers.push(tickObject);
    }
    /**
     * @language=en
     * Remove the tickObject
     * @param {Object} tickObject The tickObject to remove.
     */
    removeTick(tickObject) {
        var tickers = this._tickers, index = tickers.indexOf(tickObject);
        if (index >= 0) {
            tickers.splice(index, 1);
        }
    }
    /**
     * 下次tick时回调
     * @param  {Function} callback
     * @return {tickObj}
     */
    nextTick(callback) {
        var that = this;
        var tickObj = {
            tick(dt) {
                that.removeTick(tickObj);
                callback();
            }
        };
        that.addTick(tickObj);
        return tickObj;
    }
    /**
     * 延迟指定的时间后调用回调, 类似setTimeout
     * @param  {Function} callback
     * @param  {Number}   duration 延迟的毫秒数
     * @return {tickObj}
     */
    timeout(callback, duration) {
        var that = this;
        var targetTime = new Date().getTime() + duration;
        var tickObj = {
            tick() {
                var nowTime = new Date().getTime();
                var dt = nowTime - targetTime;
                if (dt >= 0) {
                    that.removeTick(tickObj);
                    callback();
                }
            }
        };
        that.addTick(tickObj);
        return tickObj;
    }
    /**
     * 指定的时间周期来调用函数, 类似setInterval
     * @param  {Function} callback
     * @param  {Number}   duration 时间周期，单位毫秒
     * @return {tickObj}
     */
    interval(callback, duration) {
        var that = this;
        var targetTime = new Date().getTime() + duration;
        var tickObj = {
            tick() {
                var nowTime = new Date().getTime();
                var dt = nowTime - targetTime;
                if (dt >= 0) {
                    if (dt < duration) {
                        nowTime -= dt;
                    }
                    targetTime = nowTime + duration;
                    callback();
                }
            }
        };
        that.addTick(tickObj);
        return tickObj;
    }
}


/***/ }),

/***/ "./src/engine/utils/browser.ts":
/*!*************************************!*\
  !*** ./src/engine/utils/browser.ts ***!
  \*************************************/
/*! exports provided: browser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "browser", function() { return browser; });
/**
 * Hilo 2.0.0 for commonjs
 * Copyright 2016 alibaba.com
 * Licensed under the MIT License
 */
/**
 * @language=en
 * @class Browser feature set
 * @static
 * @module hilo/util/browser
 */
var browser = (function () {
    var ua = navigator.userAgent;
    var doc = document;
    var win = window;
    var docElem = doc.documentElement;
    var data = /** @lends browser */ {
        /**
         * 是否是iphone
         * @type {Boolean}
         */
        iphone: /iphone/i.test(ua),
        /**
         * 是否是ipad
         * @type {Boolean}
         */
        ipad: /ipad/i.test(ua),
        /**
         * 是否是ipod
         * @type {Boolean}
         */
        ipod: /ipod/i.test(ua),
        /**
         * 是否是ios
         * @type {Boolean}
         */
        ios: /iphone|ipad|ipod/i.test(ua),
        /**
         * 是否是android
         * @type {Boolean}
         */
        android: /android/i.test(ua),
        /**
         * 是否是webkit
         * @type {Boolean}
         */
        webkit: /webkit/i.test(ua),
        /**
         * 是否是chrome
         * @type {Boolean}
         */
        chrome: /chrome/i.test(ua),
        /**
         * 是否是safari
         * @type {Boolean}
         */
        safari: /safari/i.test(ua),
        /**
         * 是否是firefox
         * @type {Boolean}
         */
        firefox: /firefox/i.test(ua),
        /**
         * 是否是ie
         * @type {Boolean}
         */
        ie: /msie/i.test(ua),
        /**
         * 是否是opera
         * @type {Boolean}
         */
        opera: /opera/i.test(ua),
        /**
         * 是否支持触碰事件。
         * @type {String}
         */
        supportTouch: 'ontouchstart' in win,
        /**
         * 是否支持canvas元素。
         * @type {Boolean}
         */
        supportCanvas: doc.createElement('canvas').getContext != null,
        /**
         * 是否支持本地存储localStorage。
         * @type {Boolean}
         */
        supportStorage: false,
        /**
         * 是否支持检测设备方向orientation。
         * @type {Boolean}
         */
        supportOrientation: 'orientation' in win || 'orientation' in win.screen,
        /**
         * 是否支持检测加速度devicemotion。
         * @type {Boolean}
         */
        supportDeviceMotion: 'ondevicemotion' in win
    };
    //`localStorage` is null or `localStorage.setItem` throws error in some cases (e.g. localStorage is disabled)
    try {
        var value = 'hilo';
        localStorage.setItem(value, value);
        localStorage.removeItem(value);
        data.supportStorage = true;
    }
    catch (e) { }
    /**
     * 浏览器厂商CSS前缀的js值。比如：webkit。
     * @type {String}
     */
    var jsVendor = data['jsVendor'] = data.webkit ? 'webkit' : data.firefox ? 'webkit' : data.opera ? 'o' : data.ie ? 'ms' : '';
    /**
     * 浏览器厂商CSS前缀的css值。比如：-webkit-。
     * @type {String}
     */
    var cssVendor = data['cssVendor'] = '-' + jsVendor + '-';
    //css transform/3d feature dectection
    var testElem = doc.createElement('div'), style = testElem.style;
    var supportTouch = data.supportTouch;
    /**
     * 鼠标或触碰开始事件。对应touchstart或mousedown。
     * @type {String}
     */
    var POINTER_START = supportTouch ? 'touchstart' : 'mousedown';
    /**
     * 鼠标或触碰移动事件。对应touchmove或mousemove。
     * @type {String}
     */
    var POINTER_MOVE = supportTouch ? 'touchmove' : 'mousemove';
    /**
     * 鼠标或触碰结束事件。对应touchend或mouseup。
     * @type {String}
     */
    var POINTER_END = supportTouch ? 'touchend' : 'mouseup';
    data['POINTER_START'] = POINTER_START;
    data['POINTER_MOVE'] = POINTER_MOVE;
    data['POINTER_END'] = POINTER_END;
    return data;
})();


/***/ }),

/***/ "./src/game/TestGame.ts":
/*!******************************!*\
  !*** ./src/game/TestGame.ts ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_camera_PerspectiveCamera__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../engine/camera/PerspectiveCamera */ "./src/engine/camera/PerspectiveCamera.ts");
/* harmony import */ var _engine_core_Scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../engine/core/Scene */ "./src/engine/core/Scene.ts");
/* harmony import */ var _engine_math_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../engine/math/Color */ "./src/engine/math/Color.ts");
/* harmony import */ var _engine_light_DirectionLight__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../engine/light/DirectionLight */ "./src/engine/light/DirectionLight.ts");
/* harmony import */ var _engine_math_Vector3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../engine/math/Vector3 */ "./src/engine/math/Vector3.ts");
/* harmony import */ var _engine_geometry_BoxGeometry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../engine/geometry/BoxGeometry */ "./src/engine/geometry/BoxGeometry.ts");
/* harmony import */ var _engine_core_Mesh__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../engine/core/Mesh */ "./src/engine/core/Mesh.ts");
/* harmony import */ var _engine_material_BasicMaterial__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../engine/material/BasicMaterial */ "./src/engine/material/BasicMaterial.ts");
/* harmony import */ var _engine_utils_Ticker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../engine/utils/Ticker */ "./src/engine/utils/Ticker.ts");









let test = function () {
    let camera = new _engine_camera_PerspectiveCamera__WEBPACK_IMPORTED_MODULE_0__["PerspectiveCamera"]();
    camera.aspect = innerWidth / innerHeight;
    camera.far = 100;
    camera.near = 0.1;
    camera.z = 3;
    let scene = new _engine_core_Scene__WEBPACK_IMPORTED_MODULE_1__["Scene"]({
        container: document.getElementById('container'),
        width: innerWidth,
        height: innerHeight,
        clearColor: new _engine_math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](0.4, 0.4, 0.4),
        camera: camera,
    });
    window.onresize = function () {
        camera.aspect = innerWidth / innerHeight;
        scene.resize(innerWidth, innerHeight);
    };
    let boxGeometry = new _engine_geometry_BoxGeometry__WEBPACK_IMPORTED_MODULE_5__["default"]();
    boxGeometry.setAllRectUV([[0, 1], [1, 1], [1, 0], [0, 0]]);
    let colorBox = new _engine_core_Mesh__WEBPACK_IMPORTED_MODULE_6__["Mesh"]();
    colorBox.geometry = boxGeometry;
    colorBox.material = new _engine_material_BasicMaterial__WEBPACK_IMPORTED_MODULE_7__["BasicMaterial"]({ diffuse: new _engine_math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](0.8, 0, 0) });
    colorBox.x = -1;
    colorBox.onUpdate = function () {
        this.rotationX += .5;
        this.rotationY += .5;
    };
    scene.addChild(colorBox);
    let renderer = scene.renderer;
    let directionLight = new _engine_light_DirectionLight__WEBPACK_IMPORTED_MODULE_3__["DirectionLight"]();
    directionLight.color = new _engine_math_Color__WEBPACK_IMPORTED_MODULE_2__["default"](1, 1, 1);
    directionLight.direction = new _engine_math_Vector3__WEBPACK_IMPORTED_MODULE_4__["Vector3"](0, -1, 0);
    scene.addChild(directionLight);
    let ticker = new _engine_utils_Ticker__WEBPACK_IMPORTED_MODULE_8__["Ticker"](60);
    ticker.addTick(scene);
    ['init', 'initFailed'].forEach(function (eventName) {
        scene.renderer.on(eventName, function (e) {
            console.log(e.type, e);
        });
    });
    let gl;
    setTimeout(function () {
        ticker.start(true);
        gl = renderer.gl;
    }, 10);
};
window.onload = function () {
    test();
};


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,